
(** val xorb : bool -> bool -> bool **)

let xorb b1 b2 =
  if b1 then if b2 then false else true else b2

(** val negb : bool -> bool **)

let negb = function
| true -> false
| false -> true

type ('a, 'b) sum =
| Inl of 'a
| Inr of 'b

(** val fst : ('a1 * 'a2) -> 'a1 **)

let fst = function
| (x, _) -> x

(** val snd : ('a1 * 'a2) -> 'a2 **)

let snd = function
| (_, y) -> y

(** val length : 'a1 list -> int **)

let rec length = function
| [] -> 0
| _ :: l' -> Stdlib.succ (length l')

(** val app : 'a1 list -> 'a1 list -> 'a1 list **)

let rec app l m0 =
  match l with
  | [] -> m0
  | a :: l1 -> a :: (app l1 m0)

type comparison =
| Eq
| Lt
| Gt

(** val compOpp : comparison -> comparison **)

let compOpp = function
| Eq -> Eq
| Lt -> Gt
| Gt -> Lt

type 'a sig0 = 'a
  (* singleton inductive, whose constructor was exist *)



module Coq__1 = struct
 (** val add : int -> int -> int **)let rec add = (+)
end
include Coq__1

(** val bool_dec : bool -> bool -> bool **)

let bool_dec b1 b2 =
  if b1 then if b2 then true else false else if b2 then false else true

(** val eqb : bool -> bool -> bool **)

let eqb b1 b2 =
  if b1 then b2 else if b2 then false else true

module Nat =
 struct
  (** val add : int -> int -> int **)

  let rec add n0 m0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> m0)
      (fun p -> Stdlib.succ (add p m0))
      n0

  (** val mul : int -> int -> int **)

  let rec mul n0 m0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> 0)
      (fun p -> add m0 (mul p m0))
      n0

  (** val sub : int -> int -> int **)

  let rec sub n0 m0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> n0)
      (fun k ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> n0)
        (fun l -> sub k l)
        m0)
      n0

  (** val ltb : int -> int -> bool **)

  let ltb n0 m0 =
    (<=) (Stdlib.succ n0) m0

  (** val even : int -> bool **)

  let rec even n0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> true)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> false)
        (fun n' -> even n')
        n1)
      n0

  (** val odd : int -> bool **)

  let odd n0 =
    negb (even n0)

  (** val divmod : int -> int -> int -> int -> int * int **)

  let rec divmod x y q u =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> (q, u))
      (fun x' ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> divmod x' y (Stdlib.succ q) y)
        (fun u' -> divmod x' y q u')
        u)
      x

  (** val div : int -> int -> int **)

  let div x y =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> y)
      (fun y' -> fst (divmod x y' 0 y'))
      y

  (** val div2 : int -> int **)

  let rec div2 = fun n -> n/2

  (** val bitwise : (bool -> bool -> bool) -> int -> int -> int -> int **)

  let rec bitwise op n0 a b =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> 0)
      (fun n' ->
      add (if op (odd a) (odd b) then Stdlib.succ 0 else 0)
        (mul (Stdlib.succ (Stdlib.succ 0))
          (bitwise op n' (div2 a) (div2 b))))
      n0

  (** val coq_land : int -> int -> int **)

  let coq_land a b =
    bitwise (&&) a a b
 end

module Pos =
 struct
  type mask =
  | IsNul
  | IsPos of int
  | IsNeg
 end

module Coq_Pos =
 struct
  (** val succ : int -> int **)

  let rec succ = Stdlib.succ

  (** val add : int -> int -> int **)

  let rec add = (+)

  (** val add_carry : int -> int -> int **)

  and add_carry x y =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> (fun p->1+2*p) (add_carry p q))
        (fun q -> (fun p->2*p) (add_carry p q))
        (fun _ -> (fun p->1+2*p) (succ p))
        y)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> (fun p->2*p) (add_carry p q))
        (fun q -> (fun p->1+2*p) (add p q))
        (fun _ -> (fun p->2*p) (succ p))
        y)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> (fun p->1+2*p) (succ q))
        (fun q -> (fun p->2*p) (succ q))
        (fun _ -> (fun p->1+2*p) 1)
        y)
      x

  (** val pred_double : int -> int **)

  let rec pred_double x =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p -> (fun p->1+2*p) ((fun p->2*p) p))
      (fun p -> (fun p->1+2*p) (pred_double p))
      (fun _ -> 1)
      x

  (** val pred_N : int -> int **)

  let pred_N x =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p -> ((fun p->2*p) p))
      (fun p -> (pred_double p))
      (fun _ -> 0)
      x

  type mask = Pos.mask =
  | IsNul
  | IsPos of int
  | IsNeg

  (** val succ_double_mask : mask -> mask **)

  let succ_double_mask = function
  | IsNul -> IsPos 1
  | IsPos p -> IsPos ((fun p->1+2*p) p)
  | IsNeg -> IsNeg

  (** val double_mask : mask -> mask **)

  let double_mask = function
  | IsPos p -> IsPos ((fun p->2*p) p)
  | x0 -> x0

  (** val double_pred_mask : int -> mask **)

  let double_pred_mask x =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p -> IsPos ((fun p->2*p) ((fun p->2*p) p)))
      (fun p -> IsPos ((fun p->2*p) (pred_double p)))
      (fun _ -> IsNul)
      x

  (** val sub_mask : int -> int -> mask **)

  let rec sub_mask x y =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> double_mask (sub_mask p q))
        (fun q -> succ_double_mask (sub_mask p q))
        (fun _ -> IsPos ((fun p->2*p) p))
        y)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> succ_double_mask (sub_mask_carry p q))
        (fun q -> double_mask (sub_mask p q))
        (fun _ -> IsPos (pred_double p))
        y)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> IsNeg)
        (fun _ -> IsNeg)
        (fun _ -> IsNul)
        y)
      x

  (** val sub_mask_carry : int -> int -> mask **)

  and sub_mask_carry x y =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> succ_double_mask (sub_mask_carry p q))
        (fun q -> double_mask (sub_mask p q))
        (fun _ -> IsPos (pred_double p))
        y)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> double_mask (sub_mask_carry p q))
        (fun q -> succ_double_mask (sub_mask_carry p q))
        (fun _ -> double_pred_mask p)
        y)
      (fun _ -> IsNeg)
      x

  (** val mul : int -> int -> int **)

  let rec mul = ( * )

  (** val iter : ('a1 -> 'a1) -> 'a1 -> int -> 'a1 **)

  let rec iter f x n0 =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun n' -> f (iter f (iter f x n') n'))
      (fun n' -> iter f (iter f x n') n')
      (fun _ -> f x)
      n0

  (** val div2 : int -> int **)

  let div2 p =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 -> p0)
      (fun p0 -> p0)
      (fun _ -> 1)
      p

  (** val div2_up : int -> int **)

  let div2_up p =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 -> succ p0)
      (fun p0 -> p0)
      (fun _ -> 1)
      p

  (** val size : int -> int **)

  let rec size p =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 -> succ (size p0))
      (fun p0 -> succ (size p0))
      (fun _ -> 1)
      p

  (** val compare_cont : comparison -> int -> int -> comparison **)

  let rec compare_cont = fun c x y -> if x=y then c else if x<y then Lt else Gt

  (** val compare : int -> int -> comparison **)

  let compare = fun x y -> if x=y then Eq else if x<y then Lt else Gt

  (** val eqb : int -> int -> bool **)

  let rec eqb p q =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> eqb p0 q0)
        (fun _ -> false)
        (fun _ -> false)
        q)
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> false)
        (fun q0 -> eqb p0 q0)
        (fun _ -> false)
        q)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> false)
        (fun _ -> false)
        (fun _ -> true)
        q)
      p

  (** val coq_Nsucc_double : int -> int **)

  let coq_Nsucc_double x =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> 1)
      (fun p -> ((fun p->1+2*p) p))
      x

  (** val coq_Ndouble : int -> int **)

  let coq_Ndouble n0 =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> 0)
      (fun p -> ((fun p->2*p) p))
      n0

  (** val coq_lor : int -> int -> int **)

  let rec coq_lor p q =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> (fun p->1+2*p) (coq_lor p0 q0))
        (fun q0 -> (fun p->1+2*p) (coq_lor p0 q0))
        (fun _ -> p)
        q)
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> (fun p->1+2*p) (coq_lor p0 q0))
        (fun q0 -> (fun p->2*p) (coq_lor p0 q0))
        (fun _ -> (fun p->1+2*p) p0)
        q)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> q)
        (fun q0 -> (fun p->1+2*p) q0)
        (fun _ -> q)
        q)
      p

  (** val coq_land : int -> int -> int **)

  let rec coq_land p q =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> coq_Nsucc_double (coq_land p0 q0))
        (fun q0 -> coq_Ndouble (coq_land p0 q0))
        (fun _ -> 1)
        q)
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> coq_Ndouble (coq_land p0 q0))
        (fun q0 -> coq_Ndouble (coq_land p0 q0))
        (fun _ -> 0)
        q)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> 1)
        (fun _ -> 0)
        (fun _ -> 1)
        q)
      p

  (** val ldiff : int -> int -> int **)

  let rec ldiff p q =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> coq_Ndouble (ldiff p0 q0))
        (fun q0 -> coq_Nsucc_double (ldiff p0 q0))
        (fun _ -> ((fun p->2*p) p0))
        q)
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> coq_Ndouble (ldiff p0 q0))
        (fun q0 -> coq_Ndouble (ldiff p0 q0))
        (fun _ -> p)
        q)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> 0)
        (fun _ -> 1)
        (fun _ -> 0)
        q)
      p

  (** val coq_lxor : int -> int -> int **)

  let rec coq_lxor p q =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> coq_Ndouble (coq_lxor p0 q0))
        (fun q0 -> coq_Nsucc_double (coq_lxor p0 q0))
        (fun _ -> ((fun p->2*p) p0))
        q)
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> coq_Nsucc_double (coq_lxor p0 q0))
        (fun q0 -> coq_Ndouble (coq_lxor p0 q0))
        (fun _ -> ((fun p->1+2*p) p0))
        q)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q0 -> ((fun p->2*p) q0))
        (fun q0 -> ((fun p->1+2*p) q0))
        (fun _ -> 0)
        q)
      p

  (** val shiftl_nat : int -> int -> int **)

  let rec shiftl_nat p n0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> p)
      (fun n1 -> (fun p->2*p) (shiftl_nat p n1))
      n0

  (** val shiftr_nat : int -> int -> int **)

  let rec shiftr_nat p n0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> p)
      (fun n1 -> div2 (shiftr_nat p n1))
      n0

  (** val testbit : int -> int -> bool **)

  let rec testbit p n0 =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 ->
      (fun f0 fp n -> if n=0 then f0 () else fp n)
        (fun _ -> true)
        (fun n1 -> testbit p0 (pred_N n1))
        n0)
      (fun p0 ->
      (fun f0 fp n -> if n=0 then f0 () else fp n)
        (fun _ -> false)
        (fun n1 -> testbit p0 (pred_N n1))
        n0)
      (fun _ ->
      (fun f0 fp n -> if n=0 then f0 () else fp n)
        (fun _ -> true)
        (fun _ -> false)
        n0)
      p

  (** val iter_op : ('a1 -> 'a1 -> 'a1) -> int -> 'a1 -> 'a1 **)

  let rec iter_op op p a =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 -> op a (iter_op op p0 (op a a)))
      (fun p0 -> iter_op op p0 (op a a))
      (fun _ -> a)
      p

  (** val to_nat : int -> int **)

  let to_nat x =
    iter_op Coq__1.add x (Stdlib.succ 0)

  (** val of_succ_nat : int -> int **)

  let rec of_succ_nat n0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> 1)
      (fun x -> succ (of_succ_nat x))
      n0

  (** val eq_dec : int -> int -> bool **)

  let rec eq_dec p x0 =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun p1 -> eq_dec p0 p1)
        (fun _ -> false)
        (fun _ -> false)
        x0)
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> false)
        (fun p1 -> eq_dec p0 p1)
        (fun _ -> false)
        x0)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> false)
        (fun _ -> false)
        (fun _ -> true)
        x0)
      p
 end

module N =
 struct
  (** val of_nat : int -> int **)

  let of_nat n0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> 0)
      (fun n' -> (Coq_Pos.of_succ_nat n'))
      n0
 end

module Coq_N =
 struct
  (** val succ_double : int -> int **)

  let succ_double x =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> 1)
      (fun p -> ((fun p->1+2*p) p))
      x

  (** val double : int -> int **)

  let double n0 =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> 0)
      (fun p -> ((fun p->2*p) p))
      n0

  (** val succ_pos : int -> int **)

  let succ_pos n0 =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> 1)
      (fun p -> Coq_Pos.succ p)
      n0

  (** val add : int -> int -> int **)

  let add = (+)

  (** val sub : int -> int -> int **)

  let sub = fun n m -> Stdlib.max 0 (n-m)

  (** val mul : int -> int -> int **)

  let mul = ( * )

  (** val compare : int -> int -> comparison **)

  let compare = fun x y -> if x=y then Eq else if x<y then Lt else Gt

  (** val leb : int -> int -> bool **)

  let leb x y =
    match compare x y with
    | Gt -> false
    | _ -> true

  (** val pos_div_eucl : int -> int -> int * int **)

  let rec pos_div_eucl a b =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun a' ->
      let (q, r) = pos_div_eucl a' b in
      let r' = succ_double r in
      if leb b r' then ((succ_double q), (sub r' b)) else ((double q), r'))
      (fun a' ->
      let (q, r) = pos_div_eucl a' b in
      let r' = double r in
      if leb b r' then ((succ_double q), (sub r' b)) else ((double q), r'))
      (fun _ ->
      (fun f0 fp n -> if n=0 then f0 () else fp n)
        (fun _ -> (0, 1))
        (fun p ->
        (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
          (fun _ -> (0, 1))
          (fun _ -> (0, 1))
          (fun _ -> (1, 0))
          p)
        b)
      a

  (** val coq_lor : int -> int -> int **)

  let coq_lor n0 m0 =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> m0)
      (fun p ->
      (fun f0 fp n -> if n=0 then f0 () else fp n)
        (fun _ -> n0)
        (fun q -> (Coq_Pos.coq_lor p q))
        m0)
      n0

  (** val coq_land : int -> int -> int **)

  let coq_land n0 m0 =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> 0)
      (fun p ->
      (fun f0 fp n -> if n=0 then f0 () else fp n)
        (fun _ -> 0)
        (fun q -> Coq_Pos.coq_land p q)
        m0)
      n0

  (** val ldiff : int -> int -> int **)

  let ldiff n0 m0 =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> 0)
      (fun p ->
      (fun f0 fp n -> if n=0 then f0 () else fp n)
        (fun _ -> n0)
        (fun q -> Coq_Pos.ldiff p q)
        m0)
      n0

  (** val coq_lxor : int -> int -> int **)

  let coq_lxor n0 m0 =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> m0)
      (fun p ->
      (fun f0 fp n -> if n=0 then f0 () else fp n)
        (fun _ -> n0)
        (fun q -> Coq_Pos.coq_lxor p q)
        m0)
      n0

  (** val testbit : int -> int -> bool **)

  let testbit a n0 =
    (fun f0 fp n -> if n=0 then f0 () else fp n)
      (fun _ -> false)
      (fun p -> Coq_Pos.testbit p n0)
      a
 end

module Z =
 struct
  (** val double : int -> int **)

  let double x =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 0)
      (fun p -> ((fun p->2*p) p))
      (fun p -> (~-) ((fun p->2*p) p))
      x

  (** val succ_double : int -> int **)

  let succ_double x =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 1)
      (fun p -> ((fun p->1+2*p) p))
      (fun p -> (~-) (Coq_Pos.pred_double p))
      x

  (** val pred_double : int -> int **)

  let pred_double x =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> (~-) 1)
      (fun p -> (Coq_Pos.pred_double p))
      (fun p -> (~-) ((fun p->1+2*p) p))
      x

  (** val pos_sub : int -> int -> int **)

  let rec pos_sub x y =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> double (pos_sub p q))
        (fun q -> succ_double (pos_sub p q))
        (fun _ -> ((fun p->2*p) p))
        y)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> pred_double (pos_sub p q))
        (fun q -> double (pos_sub p q))
        (fun _ -> (Coq_Pos.pred_double p))
        y)
      (fun _ ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun q -> (~-) ((fun p->2*p) q))
        (fun q -> (~-) (Coq_Pos.pred_double q))
        (fun _ -> 0)
        y)
      x

  (** val add : int -> int -> int **)

  let add = (+)

  (** val opp : int -> int **)

  let opp = (~-)

  (** val pred : int -> int **)

  let pred = Stdlib.pred

  (** val sub : int -> int -> int **)

  let sub = (-)

  (** val mul : int -> int -> int **)

  let mul = ( * )

  (** val pow_pos : int -> int -> int **)

  let pow_pos z0 =
    Coq_Pos.iter (mul z0) 1

  (** val pow : int -> int -> int **)

  let pow x y =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 1)
      (fun p -> pow_pos x p)
      (fun _ -> 0)
      y

  (** val compare : int -> int -> comparison **)

  let compare = fun x y -> if x=y then Eq else if x<y then Lt else Gt

  (** val leb : int -> int -> bool **)

  let leb x y =
    match compare x y with
    | Gt -> false
    | _ -> true

  (** val ltb : int -> int -> bool **)

  let ltb x y =
    match compare x y with
    | Lt -> true
    | _ -> false

  (** val eqb : int -> int -> bool **)

  let eqb x y =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> true)
        (fun _ -> false)
        (fun _ -> false)
        y)
      (fun p ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> false)
        (fun q -> Coq_Pos.eqb p q)
        (fun _ -> false)
        y)
      (fun p ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> false)
        (fun _ -> false)
        (fun q -> Coq_Pos.eqb p q)
        y)
      x

  (** val max : int -> int -> int **)

  let max = Stdlib.max

  (** val min : int -> int -> int **)

  let min = Stdlib.min

  (** val to_nat : int -> int **)

  let to_nat z0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 0)
      (fun p -> Coq_Pos.to_nat p)
      (fun _ -> 0)
      z0

  (** val of_nat : int -> int **)

  let of_nat n0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> 0)
      (fun n1 -> (Coq_Pos.of_succ_nat n1))
      n0

  (** val of_N : int -> int **)

  let of_N = fun p -> p

  (** val to_pos : int -> int **)

  let to_pos z0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 1)
      (fun p -> p)
      (fun _ -> 1)
      z0

  (** val iter : int -> ('a1 -> 'a1) -> 'a1 -> 'a1 **)

  let iter n0 f x =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> x)
      (fun p -> Coq_Pos.iter f x p)
      (fun _ -> x)
      n0

  (** val pos_div_eucl : int -> int -> int * int **)

  let rec pos_div_eucl a b =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun a' ->
      let (q, r) = pos_div_eucl a' b in
      let r' = add (mul ((fun p->2*p) 1) r) 1 in
      if ltb r' b
      then ((mul ((fun p->2*p) 1) q), r')
      else ((add (mul ((fun p->2*p) 1) q) 1), (sub r' b)))
      (fun a' ->
      let (q, r) = pos_div_eucl a' b in
      let r' = mul ((fun p->2*p) 1) r in
      if ltb r' b
      then ((mul ((fun p->2*p) 1) q), r')
      else ((add (mul ((fun p->2*p) 1) q) 1), (sub r' b)))
      (fun _ -> if leb ((fun p->2*p) 1) b then (0, 1) else (1, 0))
      a

  (** val div_eucl : int -> int -> int * int **)

  let div_eucl a b =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> (0, 0))
      (fun a' ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> (0, 0))
        (fun _ -> pos_div_eucl a' b)
        (fun b' ->
        let (q, r) = pos_div_eucl a' b' in
        ((fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
           (fun _ -> ((opp q), 0))
           (fun _ -> ((opp (add q 1)), (add b r)))
           (fun _ -> ((opp (add q 1)), (add b r)))
           r))
        b)
      (fun a' ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> (0, 0))
        (fun _ ->
        let (q, r) = pos_div_eucl a' b in
        ((fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
           (fun _ -> ((opp q), 0))
           (fun _ -> ((opp (add q 1)), (sub b r)))
           (fun _ -> ((opp (add q 1)), (sub b r)))
           r))
        (fun b' -> let (q, r) = pos_div_eucl a' b' in (q, (opp r)))
        b)
      a

  (** val div : int -> int -> int **)

  let div a b =
    let (q, _) = div_eucl a b in q

  (** val modulo : int -> int -> int **)

  let modulo a b =
    let (_, r) = div_eucl a b in r

  (** val quotrem : int -> int -> int * int **)

  let quotrem a b =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> (0, 0))
      (fun a0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> (0, a))
        (fun b0 ->
        let (q, r) = Coq_N.pos_div_eucl a0 b0 in ((of_N q), (of_N r)))
        (fun b0 ->
        let (q, r) = Coq_N.pos_div_eucl a0 b0 in ((opp (of_N q)), (of_N r)))
        b)
      (fun a0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> (0, a))
        (fun b0 ->
        let (q, r) = Coq_N.pos_div_eucl a0 b0 in
        ((opp (of_N q)), (opp (of_N r))))
        (fun b0 ->
        let (q, r) = Coq_N.pos_div_eucl a0 b0 in ((of_N q), (opp (of_N r))))
        b)
      a

  (** val quot : int -> int -> int **)

  let quot a b =
    fst (quotrem a b)

  (** val rem : int -> int -> int **)

  let rem a b =
    snd (quotrem a b)

  (** val even : int -> bool **)

  let even z0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> true)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> false)
        (fun _ -> true)
        (fun _ -> false)
        p)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> false)
        (fun _ -> true)
        (fun _ -> false)
        p)
      z0

  (** val odd : int -> bool **)

  let odd z0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> false)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> true)
        (fun _ -> false)
        (fun _ -> true)
        p)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> true)
        (fun _ -> false)
        (fun _ -> true)
        p)
      z0

  (** val div2 : int -> int **)

  let div2 z0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 0)
      (fun p ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun _ -> (Coq_Pos.div2 p))
        (fun _ -> (Coq_Pos.div2 p))
        (fun _ -> 0)
        p)
      (fun p -> (~-) (Coq_Pos.div2_up p))
      z0

  (** val log2 : int -> int **)

  let log2 z0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 0)
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun p -> (Coq_Pos.size p))
        (fun p -> (Coq_Pos.size p))
        (fun _ -> 0)
        p0)
      (fun _ -> 0)
      z0

  (** val testbit : int -> int -> bool **)

  let testbit a n0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> odd a)
      (fun p ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> false)
        (fun a0 -> Coq_Pos.testbit a0 p)
        (fun a0 -> negb (Coq_N.testbit (Coq_Pos.pred_N a0) p))
        a)
      (fun _ -> false)
      n0

  (** val shiftl : int -> int -> int **)

  let shiftl a n0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> a)
      (fun p -> Coq_Pos.iter (mul ((fun p->2*p) 1)) a p)
      (fun p -> Coq_Pos.iter div2 a p)
      n0

  (** val shiftr : int -> int -> int **)

  let shiftr a n0 =
    shiftl a (opp n0)

  (** val coq_lor : int -> int -> int **)

  let coq_lor a b =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> b)
      (fun a0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> a)
        (fun b0 -> (Coq_Pos.coq_lor a0 b0))
        (fun b0 -> (~-)
        (Coq_N.succ_pos (Coq_N.ldiff (Coq_Pos.pred_N b0) a0)))
        b)
      (fun a0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> a)
        (fun b0 -> (~-)
        (Coq_N.succ_pos (Coq_N.ldiff (Coq_Pos.pred_N a0) b0)))
        (fun b0 -> (~-)
        (Coq_N.succ_pos
          (Coq_N.coq_land (Coq_Pos.pred_N a0) (Coq_Pos.pred_N b0))))
        b)
      a

  (** val coq_land : int -> int -> int **)

  let coq_land a b =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 0)
      (fun a0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> 0)
        (fun b0 -> of_N (Coq_Pos.coq_land a0 b0))
        (fun b0 -> of_N (Coq_N.ldiff a0 (Coq_Pos.pred_N b0)))
        b)
      (fun a0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> 0)
        (fun b0 -> of_N (Coq_N.ldiff b0 (Coq_Pos.pred_N a0)))
        (fun b0 -> (~-)
        (Coq_N.succ_pos
          (Coq_N.coq_lor (Coq_Pos.pred_N a0) (Coq_Pos.pred_N b0))))
        b)
      a

  (** val coq_lxor : int -> int -> int **)

  let coq_lxor a b =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> b)
      (fun a0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> a)
        (fun b0 -> of_N (Coq_Pos.coq_lxor a0 b0))
        (fun b0 -> (~-)
        (Coq_N.succ_pos (Coq_N.coq_lxor a0 (Coq_Pos.pred_N b0))))
        b)
      (fun a0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> a)
        (fun b0 -> (~-)
        (Coq_N.succ_pos (Coq_N.coq_lxor (Coq_Pos.pred_N a0) b0)))
        (fun b0 ->
        of_N (Coq_N.coq_lxor (Coq_Pos.pred_N a0) (Coq_Pos.pred_N b0)))
        b)
      a

  (** val eq_dec : int -> int -> bool **)

  let eq_dec x y =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> true)
        (fun _ -> false)
        (fun _ -> false)
        y)
      (fun x0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> false)
        (fun p0 -> Coq_Pos.eq_dec x0 p0)
        (fun _ -> false)
        y)
      (fun x0 ->
      (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
        (fun _ -> false)
        (fun _ -> false)
        (fun p0 -> Coq_Pos.eq_dec x0 p0)
        y)
      x
 end

(** val z_lt_dec : int -> int -> bool **)

let z_lt_dec x y =
  match Z.compare x y with
  | Lt -> true
  | _ -> false

(** val z_le_dec : int -> int -> bool **)

let z_le_dec x y =
  match Z.compare x y with
  | Gt -> false
  | _ -> true

(** val z_le_gt_dec : int -> int -> bool **)

let z_le_gt_dec =
  z_le_dec

(** val zeq_bool : int -> int -> bool **)

let zeq_bool x y =
  match Z.compare x y with
  | Eq -> true
  | _ -> false

(** val nth_error : 'a1 list -> int -> 'a1 option **)

let rec nth_error l n0 =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> match l with
              | [] -> None
              | x :: _ -> Some x)
    (fun n1 -> match l with
               | [] -> None
               | _ :: l0 -> nth_error l0 n1)
    n0

(** val rev : 'a1 list -> 'a1 list **)

let rec rev = function
| [] -> []
| x :: l' -> app (rev l') (x :: [])

(** val map : ('a1 -> 'a2) -> 'a1 list -> 'a2 list **)

let rec map f = function
| [] -> []
| a :: t0 -> (f a) :: (map f t0)

(** val flat_map : ('a1 -> 'a2 list) -> 'a1 list -> 'a2 list **)

let rec flat_map f = function
| [] -> []
| x :: t0 -> app (f x) (flat_map f t0)

(** val forallb : ('a1 -> bool) -> 'a1 list -> bool **)

let rec forallb f = function
| [] -> true
| a :: l0 -> (&&) (f a) (forallb f l0)

(** val repeat : 'a1 -> int -> 'a1 list **)

let rec repeat x n0 =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> [])
    (fun k -> x :: (repeat x k))
    n0

(** val n_of_digits : bool list -> int **)

let rec n_of_digits = function
| [] -> 0
| b :: l' ->
  Coq_N.add (if b then 1 else 0) (Coq_N.mul ((fun p->2*p) 1) (n_of_digits l'))

(** val n_of_ascii : char -> int **)

let n_of_ascii a =
  (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
    (fun a0 a1 a2 a3 a4 a5 a6 a7 ->
    n_of_digits
      (a0 :: (a1 :: (a2 :: (a3 :: (a4 :: (a5 :: (a6 :: (a7 :: [])))))))))
    a

(** val zdivide_dec : int -> int -> bool **)

let zdivide_dec a b =
  let s = Z.eq_dec a 0 in
  if s then Z.eq_dec b 0 else Z.eq_dec (Z.modulo b a) 0

(** val shift_nat : int -> int -> int **)

let rec shift_nat n0 z0 =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> z0)
    (fun n1 -> (fun p->2*p) (shift_nat n1 z0))
    n0

(** val shift_pos : int -> int -> int **)

let shift_pos n0 z0 =
  Coq_Pos.iter (fun x -> (fun p->2*p) x) z0 n0

(** val two_power_nat : int -> int **)

let two_power_nat n0 =
  (shift_nat n0 1)

(** val two_power_pos : int -> int **)

let two_power_pos x =
  (shift_pos x 1)

(** val two_p : int -> int **)

let two_p x =
  (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
    (fun _ -> 1)
    (fun y -> two_power_pos y)
    (fun _ -> 0)
    x

(** val peq : int -> int -> bool **)

let peq =
  Coq_Pos.eq_dec

(** val zeq : int -> int -> bool **)

let zeq =
  Z.eq_dec

(** val zlt : int -> int -> bool **)

let zlt =
  z_lt_dec

(** val zle : int -> int -> bool **)

let zle =
  z_le_gt_dec

(** val option_map : ('a1 -> 'a2) -> 'a1 option -> 'a2 option **)

let option_map f = function
| Some y -> Some (f y)
| None -> None

(** val proj_sumbool : bool -> bool **)

let proj_sumbool = function
| true -> true
| false -> false

(** val p_mod_two_p : int -> int -> int **)

let rec p_mod_two_p p n0 =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> 0)
    (fun m0 ->
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun q -> Z.succ_double (p_mod_two_p q m0))
      (fun q -> Z.double (p_mod_two_p q m0))
      (fun _ -> 1)
      p)
    n0

(** val zshiftin : bool -> int -> int **)

let zshiftin b x =
  if b then Z.succ_double x else Z.double x

(** val zzero_ext : int -> int -> int **)

let zzero_ext n0 x =
  Z.iter n0 (fun rec0 x0 -> zshiftin (Z.odd x0) (rec0 (Z.div2 x0))) (fun _ ->
    0) x

(** val zsign_ext : int -> int -> int **)

let zsign_ext n0 x =
  Z.iter (Z.pred n0) (fun rec0 x0 -> zshiftin (Z.odd x0) (rec0 (Z.div2 x0)))
    (fun x0 ->
    if (&&) (Z.odd x0) (proj_sumbool (zlt 0 n0)) then (~-) 1 else 0) x

(** val z_one_bits : int -> int -> int -> int list **)

let rec z_one_bits n0 x i =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> [])
    (fun m0 ->
    if Z.odd x
    then i :: (z_one_bits m0 (Z.div2 x) (Z.add i 1))
    else z_one_bits m0 (Z.div2 x) (Z.add i 1))
    n0

(** val p_is_power2 : int -> bool **)

let rec p_is_power2 p =
  (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
    (fun _ -> false)
    (fun q -> p_is_power2 q)
    (fun _ -> true)
    p

(** val z_is_power2 : int -> int option **)

let z_is_power2 x =
  (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
    (fun _ -> None)
    (fun p -> if p_is_power2 p then Some (Z.log2 x) else None)
    (fun _ -> None)
    x

(** val zsize : int -> int **)

let zsize x =
  (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
    (fun _ -> 0)
    (fun p -> (Coq_Pos.size p))
    (fun _ -> 0)
    x

type spec_float =
| S754_zero of bool
| S754_infinity of bool
| S754_nan
| S754_finite of bool * int * int

(** val emin : int -> int -> int **)

let emin prec emax =
  Z.sub (Z.sub ((fun p->1+2*p) 1) emax) prec

(** val fexp : int -> int -> int -> int **)

let fexp prec emax e =
  Z.max (Z.sub e prec) (emin prec emax)

(** val digits2_pos : int -> int **)

let rec digits2_pos n0 =
  (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
    (fun p -> Coq_Pos.succ (digits2_pos p))
    (fun p -> Coq_Pos.succ (digits2_pos p))
    (fun _ -> 1)
    n0

(** val zdigits2 : int -> int **)

let zdigits2 n0 =
  (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
    (fun _ -> n0)
    (fun p -> (digits2_pos p))
    (fun p -> (digits2_pos p))
    n0

(** val iter_pos : ('a1 -> 'a1) -> int -> 'a1 -> 'a1 **)

let rec iter_pos f n0 x =
  (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
    (fun n' -> iter_pos f n' (iter_pos f n' (f x)))
    (fun n' -> iter_pos f n' (iter_pos f n' x))
    (fun _ -> f x)
    n0

type location =
| Loc_Exact
| Loc_Inexact of comparison

type shr_record = { shr_m : int; shr_r : bool; shr_s : bool }

(** val shr_1 : shr_record -> shr_record **)

let shr_1 mrs =
  let { shr_m = m0; shr_r = r; shr_s = s } = mrs in
  let s0 = (||) r s in
  ((fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
     (fun _ -> { shr_m = 0; shr_r = false; shr_s = s0 })
     (fun p0 ->
     (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
       (fun p -> { shr_m = p; shr_r = true; shr_s = s0 })
       (fun p -> { shr_m = p; shr_r = false; shr_s = s0 })
       (fun _ -> { shr_m = 0; shr_r = true; shr_s = s0 })
       p0)
     (fun p0 ->
     (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
       (fun p -> { shr_m = ((~-) p); shr_r = true; shr_s = s0 })
       (fun p -> { shr_m = ((~-) p); shr_r = false; shr_s = s0 })
       (fun _ -> { shr_m = 0; shr_r = true; shr_s = s0 })
       p0)
     m0)

(** val loc_of_shr_record : shr_record -> location **)

let loc_of_shr_record mrs =
  let { shr_m = _; shr_r = shr_r0; shr_s = shr_s0 } = mrs in
  if shr_r0
  then if shr_s0 then Loc_Inexact Gt else Loc_Inexact Eq
  else if shr_s0 then Loc_Inexact Lt else Loc_Exact

(** val shr_record_of_loc : int -> location -> shr_record **)

let shr_record_of_loc m0 = function
| Loc_Exact -> { shr_m = m0; shr_r = false; shr_s = false }
| Loc_Inexact c ->
  (match c with
   | Eq -> { shr_m = m0; shr_r = true; shr_s = false }
   | Lt -> { shr_m = m0; shr_r = false; shr_s = true }
   | Gt -> { shr_m = m0; shr_r = true; shr_s = true })

(** val shr : shr_record -> int -> int -> shr_record * int **)

let shr mrs e n0 =
  (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
    (fun _ -> (mrs, e))
    (fun p -> ((iter_pos shr_1 p mrs), (Z.add e n0)))
    (fun _ -> (mrs, e))
    n0

(** val shr_fexp :
    int -> int -> int -> int -> location -> shr_record * int **)

let shr_fexp prec emax m0 e l =
  shr (shr_record_of_loc m0 l) e
    (Z.sub (fexp prec emax (Z.add (zdigits2 m0) e)) e)

(** val shl_align : int -> int -> int -> int * int **)

let shl_align mx ex ex' =
  (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
    (fun _ -> (mx, ex))
    (fun _ -> (mx, ex))
    (fun d -> ((shift_pos d mx), ex'))
    (Z.sub ex' ex)

(** val sFcompare : spec_float -> spec_float -> comparison option **)

let sFcompare f1 f2 =
  match f1 with
  | S754_zero _ ->
    (match f2 with
     | S754_zero _ -> Some Eq
     | S754_infinity s -> Some (if s then Gt else Lt)
     | S754_nan -> None
     | S754_finite (s, _, _) -> Some (if s then Gt else Lt))
  | S754_infinity s ->
    (match f2 with
     | S754_infinity s0 ->
       Some (if s then if s0 then Eq else Lt else if s0 then Gt else Eq)
     | S754_nan -> None
     | _ -> Some (if s then Lt else Gt))
  | S754_nan -> None
  | S754_finite (s1, m1, e1) ->
    (match f2 with
     | S754_zero _ -> Some (if s1 then Lt else Gt)
     | S754_infinity s -> Some (if s then Gt else Lt)
     | S754_nan -> None
     | S754_finite (s2, m2, e2) ->
       Some
         (if s1
          then if s2
               then (match Z.compare e1 e2 with
                     | Eq -> compOpp (Coq_Pos.compare_cont Eq m1 m2)
                     | Lt -> Gt
                     | Gt -> Lt)
               else Lt
          else if s2
               then Gt
               else (match Z.compare e1 e2 with
                     | Eq -> Coq_Pos.compare_cont Eq m1 m2
                     | x -> x)))

(** val cond_Zopp : bool -> int -> int **)

let cond_Zopp b m0 =
  if b then Z.opp m0 else m0

(** val new_location_even : int -> int -> location **)

let new_location_even nb_steps k =
  if zeq_bool k 0
  then Loc_Exact
  else Loc_Inexact (Z.compare (Z.mul ((fun p->2*p) 1) k) nb_steps)

(** val new_location_odd : int -> int -> location **)

let new_location_odd nb_steps k =
  if zeq_bool k 0
  then Loc_Exact
  else Loc_Inexact
         (match Z.compare (Z.add (Z.mul ((fun p->2*p) 1) k) 1) nb_steps with
          | Eq -> Lt
          | x -> x)

(** val new_location : int -> int -> location **)

let new_location nb_steps =
  if Z.even nb_steps
  then new_location_even nb_steps
  else new_location_odd nb_steps

(** val sFdiv_core_binary :
    int -> int -> int -> int -> int -> int -> (int * int) * location **)

let sFdiv_core_binary prec emax m1 e1 m2 e2 =
  let d1 = zdigits2 m1 in
  let d2 = zdigits2 m2 in
  let e' =
    Z.min (fexp prec emax (Z.sub (Z.add d1 e1) (Z.add d2 e2))) (Z.sub e1 e2)
  in
  let s = Z.sub (Z.sub e1 e2) e' in
  let m' =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> m1)
      (fun _ -> Z.shiftl m1 s)
      (fun _ -> 0)
      s
  in
  let (q, r) = Z.div_eucl m' m2 in ((q, e'), (new_location m2 r))

type radix = int
  (* singleton inductive, whose constructor was Build_radix *)

(** val radix_val : radix -> int **)

let radix_val r =
  r

(** val radix2 : radix **)

let radix2 =
  ((fun p->2*p) 1)

(** val iter_nat : ('a1 -> 'a1) -> int -> 'a1 -> 'a1 **)

let rec iter_nat f n0 x =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> x)
    (fun n' -> iter_nat f n' (f x))
    n0

(** val cond_incr : bool -> int -> int **)

let cond_incr b m0 =
  if b then Z.add m0 1 else m0

(** val round_sign_DN : bool -> location -> bool **)

let round_sign_DN s = function
| Loc_Exact -> false
| Loc_Inexact _ -> s

(** val round_sign_UP : bool -> location -> bool **)

let round_sign_UP s = function
| Loc_Exact -> false
| Loc_Inexact _ -> negb s

(** val round_N : bool -> location -> bool **)

let round_N p = function
| Loc_Exact -> false
| Loc_Inexact c -> (match c with
                    | Eq -> p
                    | Lt -> false
                    | Gt -> true)

type binary_float =
| B754_zero of bool
| B754_infinity of bool
| B754_nan
| B754_finite of bool * int * int

(** val sF2B : int -> int -> spec_float -> binary_float **)

let sF2B _ _ = function
| S754_zero s -> B754_zero s
| S754_infinity s -> B754_infinity s
| S754_nan -> B754_nan
| S754_finite (s, m0, e) -> B754_finite (s, m0, e)

(** val b2SF : int -> int -> binary_float -> spec_float **)

let b2SF _ _ = function
| B754_zero s -> S754_zero s
| B754_infinity s -> S754_infinity s
| B754_nan -> S754_nan
| B754_finite (s, m0, e) -> S754_finite (s, m0, e)

(** val bcompare :
    int -> int -> binary_float -> binary_float -> comparison option **)

let bcompare prec emax f1 f2 =
  sFcompare (b2SF prec emax f1) (b2SF prec emax f2)

type mode =
| Mode_NE
| Mode_ZR
| Mode_DN
| Mode_UP
| Mode_NA

(** val choice_mode : mode -> bool -> int -> location -> int **)

let choice_mode m0 sx mx lx =
  match m0 with
  | Mode_NE -> cond_incr (round_N (negb (Z.even mx)) lx) mx
  | Mode_ZR -> mx
  | Mode_DN -> cond_incr (round_sign_DN sx lx) mx
  | Mode_UP -> cond_incr (round_sign_UP sx lx) mx
  | Mode_NA -> cond_incr (round_N true lx) mx

(** val overflow_to_inf : mode -> bool -> bool **)

let overflow_to_inf m0 s =
  match m0 with
  | Mode_ZR -> false
  | Mode_DN -> s
  | Mode_UP -> negb s
  | _ -> true

(** val binary_overflow : int -> int -> mode -> bool -> spec_float **)

let binary_overflow prec emax m0 s =
  if overflow_to_inf m0 s
  then S754_infinity s
  else S754_finite (s, (Z.to_pos (Z.sub (Z.pow ((fun p->2*p) 1) prec) 1)),
         (Z.sub emax prec))

(** val binary_fit_aux :
    int -> int -> mode -> bool -> int -> int -> spec_float **)

let binary_fit_aux prec emax mode0 sx mx ex =
  if Z.leb ex (Z.sub emax prec)
  then S754_finite (sx, mx, ex)
  else binary_overflow prec emax mode0 sx

(** val binary_round_aux :
    int -> int -> mode -> bool -> int -> int -> location -> spec_float **)

let binary_round_aux prec emax mode0 sx mx ex lx =
  let (mrs', e') = shr_fexp prec emax mx ex lx in
  let (mrs'', e'') =
    shr_fexp prec emax
      (choice_mode mode0 sx mrs'.shr_m (loc_of_shr_record mrs')) e' Loc_Exact
  in
  ((fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
     (fun _ -> S754_zero sx)
     (fun m0 -> binary_fit_aux prec emax mode0 sx m0 e'')
     (fun _ -> S754_nan)
     mrs''.shr_m)

(** val bmult :
    int -> int -> mode -> binary_float -> binary_float -> binary_float **)

let bmult prec emax m0 x y =
  match x with
  | B754_zero sx ->
    (match y with
     | B754_zero sy -> B754_zero (xorb sx sy)
     | B754_finite (sy, _, _) -> B754_zero (xorb sx sy)
     | _ -> B754_nan)
  | B754_infinity sx ->
    (match y with
     | B754_infinity sy -> B754_infinity (xorb sx sy)
     | B754_finite (sy, _, _) -> B754_infinity (xorb sx sy)
     | _ -> B754_nan)
  | B754_nan -> B754_nan
  | B754_finite (sx, mx, ex) ->
    (match y with
     | B754_zero sy -> B754_zero (xorb sx sy)
     | B754_infinity sy -> B754_infinity (xorb sx sy)
     | B754_nan -> B754_nan
     | B754_finite (sy, my, ey) ->
       sF2B prec emax
         (binary_round_aux prec emax m0 (xorb sx sy) (Coq_Pos.mul mx my)
           (Z.add ex ey) Loc_Exact))

(** val shl_align_fexp : int -> int -> int -> int -> int * int **)

let shl_align_fexp prec emax mx ex =
  shl_align mx ex (fexp prec emax (Z.add (digits2_pos mx) ex))

(** val binary_round :
    int -> int -> mode -> bool -> int -> int -> spec_float **)

let binary_round prec emax m0 sx mx ex =
  let (mz, ez) = shl_align_fexp prec emax mx ex in
  binary_round_aux prec emax m0 sx mz ez Loc_Exact

(** val binary_normalize :
    int -> int -> mode -> int -> int -> bool -> binary_float **)

let binary_normalize prec emax mode0 m0 e szero =
  (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
    (fun _ -> B754_zero szero)
    (fun m1 ->
    sF2B prec emax (binary_round prec emax mode0 false m1 e))
    (fun m1 -> sF2B prec emax (binary_round prec emax mode0 true m1 e))
    m0

(** val fplus_naive :
    bool -> int -> int -> bool -> int -> int -> int -> int **)

let fplus_naive sx mx ex sy my ey ez =
  Z.add (cond_Zopp sx (fst (shl_align mx ex ez)))
    (cond_Zopp sy (fst (shl_align my ey ez)))

(** val bplus :
    int -> int -> mode -> binary_float -> binary_float -> binary_float **)

let bplus prec emax m0 x y =
  match x with
  | B754_zero sx ->
    (match y with
     | B754_zero sy ->
       if eqb sx sy
       then x
       else (match m0 with
             | Mode_DN -> B754_zero true
             | _ -> B754_zero false)
     | B754_nan -> B754_nan
     | _ -> y)
  | B754_infinity sx ->
    (match y with
     | B754_infinity sy -> if eqb sx sy then x else B754_nan
     | B754_nan -> B754_nan
     | _ -> x)
  | B754_nan -> B754_nan
  | B754_finite (sx, mx, ex) ->
    (match y with
     | B754_zero _ -> x
     | B754_infinity _ -> y
     | B754_nan -> B754_nan
     | B754_finite (sy, my, ey) ->
       let ez = Z.min ex ey in
       binary_normalize prec emax m0 (fplus_naive sx mx ex sy my ey ez) ez
         (match m0 with
          | Mode_DN -> true
          | _ -> false))

(** val bminus :
    int -> int -> mode -> binary_float -> binary_float -> binary_float **)

let bminus prec emax m0 x y =
  match x with
  | B754_zero sx ->
    (match y with
     | B754_zero sy ->
       if eqb sx (negb sy)
       then x
       else (match m0 with
             | Mode_DN -> B754_zero true
             | _ -> B754_zero false)
     | B754_infinity sy -> B754_infinity (negb sy)
     | B754_nan -> B754_nan
     | B754_finite (sy, my, ey) -> B754_finite ((negb sy), my, ey))
  | B754_infinity sx ->
    (match y with
     | B754_infinity sy -> if eqb sx (negb sy) then x else B754_nan
     | B754_nan -> B754_nan
     | _ -> x)
  | B754_nan -> B754_nan
  | B754_finite (sx, mx, ex) ->
    (match y with
     | B754_zero _ -> x
     | B754_infinity sy -> B754_infinity (negb sy)
     | B754_nan -> B754_nan
     | B754_finite (sy, my, ey) ->
       let ez = Z.min ex ey in
       binary_normalize prec emax m0
         (fplus_naive sx mx ex (negb sy) my ey ez) ez
         (match m0 with
          | Mode_DN -> true
          | _ -> false))

(** val bdiv :
    int -> int -> mode -> binary_float -> binary_float -> binary_float **)

let bdiv prec emax m0 x y =
  match x with
  | B754_zero sx ->
    (match y with
     | B754_infinity sy -> B754_zero (xorb sx sy)
     | B754_finite (sy, _, _) -> B754_zero (xorb sx sy)
     | _ -> B754_nan)
  | B754_infinity sx ->
    (match y with
     | B754_zero sy -> B754_infinity (xorb sx sy)
     | B754_finite (sy, _, _) -> B754_infinity (xorb sx sy)
     | _ -> B754_nan)
  | B754_nan -> B754_nan
  | B754_finite (sx, mx, ex) ->
    (match y with
     | B754_zero sy -> B754_infinity (xorb sx sy)
     | B754_infinity sy -> B754_zero (xorb sx sy)
     | B754_nan -> B754_nan
     | B754_finite (sy, my, ey) ->
       sF2B prec emax
         (let (p, lz) = sFdiv_core_binary prec emax mx ex my ey in
          let (mz, ez) = p in
          binary_round_aux prec emax m0 (xorb sx sy) mz ez lz))

type full_float =
| F754_zero of bool
| F754_infinity of bool
| F754_nan of bool * int
| F754_finite of bool * int * int

type binary_float0 =
| B754_zero0 of bool
| B754_infinity0 of bool
| B754_nan0 of bool * int
| B754_finite0 of bool * int * int

(** val b2BSN : int -> int -> binary_float0 -> binary_float **)

let b2BSN _ _ = function
| B754_zero0 s -> B754_zero s
| B754_infinity0 s -> B754_infinity s
| B754_nan0 (_, _) -> B754_nan
| B754_finite0 (s, m0, e) -> B754_finite (s, m0, e)

(** val fF2B : int -> int -> full_float -> binary_float0 **)

let fF2B _ _ = function
| F754_zero s -> B754_zero0 s
| F754_infinity s -> B754_infinity0 s
| F754_nan (b, pl) -> B754_nan0 (b, pl)
| F754_finite (s, m0, e) -> B754_finite0 (s, m0, e)

(** val bsign : int -> int -> binary_float0 -> bool **)

let bsign _ _ = function
| B754_zero0 s -> s
| B754_infinity0 s -> s
| B754_nan0 (s, _) -> s
| B754_finite0 (s, _, _) -> s

(** val get_nan_pl : int -> int -> binary_float0 -> int **)

let get_nan_pl _ _ = function
| B754_nan0 (_, pl) -> pl
| _ -> 1

(** val build_nan : int -> int -> binary_float0 -> binary_float0 **)

let build_nan prec emax x =
  B754_nan0 ((bsign prec emax x), (get_nan_pl prec emax x))

(** val bSN2B :
    int -> int -> binary_float0 -> binary_float -> binary_float0 **)

let bSN2B prec emax nan = function
| B754_zero s -> B754_zero0 s
| B754_infinity s -> B754_infinity0 s
| B754_nan -> build_nan prec emax nan
| B754_finite (s, m0, e) -> B754_finite0 (s, m0, e)

(** val bSN2B' : int -> int -> binary_float -> binary_float0 **)

let bSN2B' _ _ = function
| B754_zero sx -> B754_zero0 sx
| B754_infinity sx -> B754_infinity0 sx
| B754_nan -> assert false (* absurd case *)
| B754_finite (sx, mx, ex) -> B754_finite0 (sx, mx, ex)

(** val bopp :
    int -> int -> (binary_float0 -> binary_float0) -> binary_float0 ->
    binary_float0 **)

let bopp prec emax opp_nan x = match x with
| B754_zero0 sx -> B754_zero0 (negb sx)
| B754_infinity0 sx -> B754_infinity0 (negb sx)
| B754_nan0 (_, _) -> build_nan prec emax (opp_nan x)
| B754_finite0 (sx, mx, ex) -> B754_finite0 ((negb sx), mx, ex)

(** val babs :
    int -> int -> (binary_float0 -> binary_float0) -> binary_float0 ->
    binary_float0 **)

let babs prec emax abs_nan0 x = match x with
| B754_zero0 _ -> B754_zero0 false
| B754_infinity0 _ -> B754_infinity0 false
| B754_nan0 (_, _) -> build_nan prec emax (abs_nan0 x)
| B754_finite0 (_, mx, ex) -> B754_finite0 (false, mx, ex)

(** val bcompare0 :
    int -> int -> binary_float0 -> binary_float0 -> comparison option **)

let bcompare0 prec emax f1 f2 =
  bcompare prec emax (b2BSN prec emax f1) (b2BSN prec emax f2)

(** val bmult0 :
    int -> int -> (binary_float0 -> binary_float0 -> binary_float0) -> mode
    -> binary_float0 -> binary_float0 -> binary_float0 **)

let bmult0 prec emax mult_nan m0 x y =
  bSN2B prec emax (mult_nan x y)
    (bmult prec emax m0 (b2BSN prec emax x) (b2BSN prec emax y))

(** val binary_normalize0 :
    int -> int -> mode -> int -> int -> bool -> binary_float0 **)

let binary_normalize0 prec emax mode0 m0 e szero =
  bSN2B' prec emax (binary_normalize prec emax mode0 m0 e szero)

(** val bplus0 :
    int -> int -> (binary_float0 -> binary_float0 -> binary_float0) -> mode
    -> binary_float0 -> binary_float0 -> binary_float0 **)

let bplus0 prec emax plus_nan m0 x y =
  bSN2B prec emax (plus_nan x y)
    (bplus prec emax m0 (b2BSN prec emax x) (b2BSN prec emax y))

(** val bminus0 :
    int -> int -> (binary_float0 -> binary_float0 -> binary_float0) -> mode
    -> binary_float0 -> binary_float0 -> binary_float0 **)

let bminus0 prec emax minus_nan m0 x y =
  bSN2B prec emax (minus_nan x y)
    (bminus prec emax m0 (b2BSN prec emax x) (b2BSN prec emax y))

(** val bdiv0 :
    int -> int -> (binary_float0 -> binary_float0 -> binary_float0) -> mode
    -> binary_float0 -> binary_float0 -> binary_float0 **)

let bdiv0 prec emax div_nan m0 x y =
  bSN2B prec emax (div_nan x y)
    (bdiv prec emax m0 (b2BSN prec emax x) (b2BSN prec emax y))

(** val join_bits : int -> int -> bool -> int -> int -> int **)

let join_bits mw ew s m0 e =
  Z.add (Z.shiftl (Z.add (if s then Z.pow ((fun p->2*p) 1) ew else 0) e) mw)
    m0

(** val split_bits : int -> int -> int -> (bool * int) * int **)

let split_bits mw ew x =
  let mm = Z.pow ((fun p->2*p) 1) mw in
  let em = Z.pow ((fun p->2*p) 1) ew in
  (((Z.leb (Z.mul mm em) x), (Z.modulo x mm)), (Z.modulo (Z.div x mm) em))

(** val bits_of_binary_float : int -> int -> binary_float0 -> int **)

let bits_of_binary_float mw ew =
  let prec = Z.add mw 1 in
  let emax = Z.pow ((fun p->2*p) 1) (Z.sub ew 1) in
  (fun x ->
  match x with
  | B754_zero0 sx -> join_bits mw ew sx 0 0
  | B754_infinity0 sx ->
    join_bits mw ew sx 0 (Z.sub (Z.pow ((fun p->2*p) 1) ew) 1)
  | B754_nan0 (sx, plx) ->
    join_bits mw ew sx plx (Z.sub (Z.pow ((fun p->2*p) 1) ew) 1)
  | B754_finite0 (sx, mx, ex) ->
    let m0 = Z.sub mx (Z.pow ((fun p->2*p) 1) mw) in
    if Z.leb 0 m0
    then join_bits mw ew sx m0 (Z.add (Z.sub ex (emin prec emax)) 1)
    else join_bits mw ew sx mx 0)

(** val binary_float_of_bits_aux : int -> int -> int -> full_float **)

let binary_float_of_bits_aux mw ew =
  let prec = Z.add mw 1 in
  let emax = Z.pow ((fun p->2*p) 1) (Z.sub ew 1) in
  (fun x ->
  let (p, ex) = split_bits mw ew x in
  let (sx, mx) = p in
  if zeq_bool ex 0
  then ((fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
          (fun _ -> F754_zero sx)
          (fun px -> F754_finite (sx, px, (emin prec emax)))
          (fun _ -> F754_nan (false, 1))
          mx)
  else if zeq_bool ex (Z.sub (Z.pow ((fun p->2*p) 1) ew) 1)
       then ((fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
               (fun _ -> F754_infinity sx)
               (fun plx -> F754_nan (sx, plx))
               (fun _ -> F754_nan (false, 1))
               mx)
       else ((fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
               (fun _ -> F754_nan (false, 1))
               (fun px -> F754_finite (sx, px,
               (Z.sub (Z.add ex (emin prec emax)) 1)))
               (fun _ -> F754_nan (false,
               1))
               (Z.add mx (Z.pow ((fun p->2*p) 1) mw))))

(** val binary_float_of_bits : int -> int -> int -> binary_float0 **)

let binary_float_of_bits mw ew x =
  let prec = Z.add mw 1 in
  let emax = Z.pow ((fun p->2*p) 1) (Z.sub ew 1) in
  fF2B prec emax (binary_float_of_bits_aux mw ew x)

type binary32 = binary_float0

(** val b32_of_bits : int -> binary32 **)

let b32_of_bits =
  binary_float_of_bits ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->2*p) 1)))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))

(** val bits_of_b32 : binary32 -> int **)

let bits_of_b32 =
  bits_of_binary_float ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->2*p) 1)))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))

type binary64 = binary_float0

(** val b64_of_bits : int -> binary64 **)

let b64_of_bits =
  binary_float_of_bits ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->2*p) ((fun p->1+2*p) 1))))) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->2*p) 1)))

(** val bits_of_b64 : binary64 -> int **)

let bits_of_b64 =
  bits_of_binary_float ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->2*p) ((fun p->1+2*p) 1))))) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->2*p) 1)))

(** val ptr64 : bool **)

let ptr64 =
  false

(** val big_endian : bool **)

let big_endian = false

(** val default_nan_64 : bool * int **)

let default_nan_64 =
  (false,
    (let rec f n0 =
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> 1)
         (fun n1 -> (fun p->2*p) (f n1))
         n0
     in f (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ
          0)))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val default_nan_32 : bool * int **)

let default_nan_32 =
  (false,
    (let rec f n0 =
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> 1)
         (fun n1 -> (fun p->2*p) (f n1))
         n0
     in f (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ 0))))))))))))))))))))))))

(** val choose_nan :
    (int -> bool) -> (bool * int) -> (bool * int) list -> bool * int **)

let choose_nan is_signaling default l0 =
  let rec choose_snan = function
  | [] -> (match l0 with
           | [] -> default
           | n0 :: _ -> n0)
  | n0 :: l2 ->
    let (_, p) = n0 in if is_signaling p then n0 else choose_snan l2
  in choose_snan l0

(** val choose_nan_64 : (bool * int) list -> bool * int **)

let choose_nan_64 =
  choose_nan (fun p ->
    negb
      (Coq_Pos.testbit p ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->1+2*p) 1))))))) default_nan_64

(** val choose_nan_32 : (bool * int) list -> bool * int **)

let choose_nan_32 =
  choose_nan (fun p ->
    negb
      (Coq_Pos.testbit p ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        ((fun p->2*p) 1)))))) default_nan_32

(** val float_of_single_preserves_sNaN : bool **)

let float_of_single_preserves_sNaN =
  false

(** val float_conversion_default_nan : bool **)

let float_conversion_default_nan =
  false

type comparison0 =
| Ceq
| Cne
| Clt
| Cle
| Cgt
| Cge

module type WORDSIZE =
 sig
  val wordsize : int
 end

module Make =
 functor (WS:WORDSIZE) ->
 struct
  (** val wordsize : int **)

  let wordsize =
    WS.wordsize

  (** val zwordsize : int **)

  let zwordsize =
    Z.of_nat wordsize

  (** val modulus : int **)

  let modulus =
    two_power_nat wordsize

  (** val half_modulus : int **)

  let half_modulus =
    Z.div modulus ((fun p->2*p) 1)

  (** val max_unsigned : int **)

  let max_unsigned =
    Z.sub modulus 1

  (** val max_signed : int **)

  let max_signed =
    Z.sub half_modulus 1

  (** val min_signed : int **)

  let min_signed =
    Z.opp half_modulus

  (** val intval : int -> int **)

  let intval i =
    i

  (** val coq_Z_mod_modulus : int -> int **)

  let coq_Z_mod_modulus x =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 0)
      (fun p -> p_mod_two_p p wordsize)
      (fun p ->
      let r = p_mod_two_p p wordsize in if zeq r 0 then 0 else Z.sub modulus r)
      x

  (** val unsigned : int -> int **)

  let unsigned =
    intval

  (** val signed : int -> int **)

  let signed n0 =
    let x = unsigned n0 in if zlt x half_modulus then x else Z.sub x modulus

  (** val repr : int -> int **)

  let repr =
    coq_Z_mod_modulus

  (** val zero : int **)

  let zero =
    repr 0

  (** val one : int **)

  let one =
    repr 1

  (** val mone : int **)

  let mone =
    repr ((~-) 1)

  (** val iwordsize : int **)

  let iwordsize =
    repr zwordsize

  (** val eq_dec : int -> int -> bool **)

  let eq_dec =
    zeq

  (** val eq : int -> int -> bool **)

  let eq x y =
    if zeq (unsigned x) (unsigned y) then true else false

  (** val lt : int -> int -> bool **)

  let lt x y =
    if zlt (signed x) (signed y) then true else false

  (** val ltu : int -> int -> bool **)

  let ltu x y =
    if zlt (unsigned x) (unsigned y) then true else false

  (** val neg : int -> int **)

  let neg x =
    repr (Z.opp (unsigned x))

  (** val add : int -> int -> int **)

  let add x y =
    repr (Z.add (unsigned x) (unsigned y))

  (** val sub : int -> int -> int **)

  let sub x y =
    repr (Z.sub (unsigned x) (unsigned y))

  (** val mul : int -> int -> int **)

  let mul x y =
    repr (Z.mul (unsigned x) (unsigned y))

  (** val divs : int -> int -> int **)

  let divs x y =
    repr (Z.quot (signed x) (signed y))

  (** val mods : int -> int -> int **)

  let mods x y =
    repr (Z.rem (signed x) (signed y))

  (** val divu : int -> int -> int **)

  let divu x y =
    repr (Z.div (unsigned x) (unsigned y))

  (** val modu : int -> int -> int **)

  let modu x y =
    repr (Z.modulo (unsigned x) (unsigned y))

  (** val coq_and : int -> int -> int **)

  let coq_and x y =
    repr (Z.coq_land (unsigned x) (unsigned y))

  (** val coq_or : int -> int -> int **)

  let coq_or x y =
    repr (Z.coq_lor (unsigned x) (unsigned y))

  (** val xor : int -> int -> int **)

  let xor x y =
    repr (Z.coq_lxor (unsigned x) (unsigned y))

  (** val not : int -> int **)

  let not x =
    xor x mone

  (** val shl : int -> int -> int **)

  let shl x y =
    repr (Z.shiftl (unsigned x) (unsigned y))

  (** val shru : int -> int -> int **)

  let shru x y =
    repr (Z.shiftr (unsigned x) (unsigned y))

  (** val shr : int -> int -> int **)

  let shr x y =
    repr (Z.shiftr (signed x) (unsigned y))

  (** val rol : int -> int -> int **)

  let rol x y =
    let n0 = Z.modulo (unsigned y) zwordsize in
    repr
      (Z.coq_lor (Z.shiftl (unsigned x) n0)
        (Z.shiftr (unsigned x) (Z.sub zwordsize n0)))

  (** val ror : int -> int -> int **)

  let ror x y =
    let n0 = Z.modulo (unsigned y) zwordsize in
    repr
      (Z.coq_lor (Z.shiftr (unsigned x) n0)
        (Z.shiftl (unsigned x) (Z.sub zwordsize n0)))

  (** val rolm : int -> int -> int -> int **)

  let rolm x a m0 =
    coq_and (rol x a) m0

  (** val shrx : int -> int -> int **)

  let shrx x y =
    divs x (shl one y)

  (** val mulhu : int -> int -> int **)

  let mulhu x y =
    repr (Z.div (Z.mul (unsigned x) (unsigned y)) modulus)

  (** val mulhs : int -> int -> int **)

  let mulhs x y =
    repr (Z.div (Z.mul (signed x) (signed y)) modulus)

  (** val negative : int -> int **)

  let negative x =
    if lt x zero then one else zero

  (** val add_carry : int -> int -> int -> int **)

  let add_carry x y cin =
    if zlt (Z.add (Z.add (unsigned x) (unsigned y)) (unsigned cin)) modulus
    then zero
    else one

  (** val add_overflow : int -> int -> int -> int **)

  let add_overflow x y cin =
    let s = Z.add (Z.add (signed x) (signed y)) (signed cin) in
    if (&&) (proj_sumbool (zle min_signed s))
         (proj_sumbool (zle s max_signed))
    then zero
    else one

  (** val sub_borrow : int -> int -> int -> int **)

  let sub_borrow x y bin =
    if zlt (Z.sub (Z.sub (unsigned x) (unsigned y)) (unsigned bin)) 0
    then one
    else zero

  (** val sub_overflow : int -> int -> int -> int **)

  let sub_overflow x y bin =
    let s = Z.sub (Z.sub (signed x) (signed y)) (signed bin) in
    if (&&) (proj_sumbool (zle min_signed s))
         (proj_sumbool (zle s max_signed))
    then zero
    else one

  (** val shr_carry : int -> int -> int **)

  let shr_carry x y =
    if (&&) (lt x zero) (negb (eq (coq_and x (sub (shl one y) one)) zero))
    then one
    else zero

  (** val zero_ext : int -> int -> int **)

  let zero_ext n0 x =
    repr (zzero_ext n0 (unsigned x))

  (** val sign_ext : int -> int -> int **)

  let sign_ext n0 x =
    repr (zsign_ext n0 (unsigned x))

  (** val one_bits : int -> int list **)

  let one_bits x =
    map repr (z_one_bits wordsize (unsigned x) 0)

  (** val is_power2 : int -> int option **)

  let is_power2 x =
    match z_is_power2 (unsigned x) with
    | Some i -> Some (repr i)
    | None -> None

  (** val cmp : comparison0 -> int -> int -> bool **)

  let cmp c x y =
    match c with
    | Ceq -> eq x y
    | Cne -> negb (eq x y)
    | Clt -> lt x y
    | Cle -> negb (lt y x)
    | Cgt -> lt y x
    | Cge -> negb (lt x y)

  (** val cmpu : comparison0 -> int -> int -> bool **)

  let cmpu c x y =
    match c with
    | Ceq -> eq x y
    | Cne -> negb (eq x y)
    | Clt -> ltu x y
    | Cle -> negb (ltu y x)
    | Cgt -> ltu y x
    | Cge -> negb (ltu x y)

  (** val notbool : int -> int **)

  let notbool x =
    if eq x zero then one else zero

  (** val divmodu2 : int -> int -> int -> (int * int) option **)

  let divmodu2 nhi nlo d =
    if eq_dec d zero
    then None
    else let (q, r) =
           Z.div_eucl (Z.add (Z.mul (unsigned nhi) modulus) (unsigned nlo))
             (unsigned d)
         in
         if zle q max_unsigned then Some ((repr q), (repr r)) else None

  (** val divmods2 : int -> int -> int -> (int * int) option **)

  let divmods2 nhi nlo d =
    if eq_dec d zero
    then None
    else let (q, r) =
           Z.quotrem (Z.add (Z.mul (signed nhi) modulus) (unsigned nlo))
             (signed d)
         in
         if (&&) (proj_sumbool (zle min_signed q))
              (proj_sumbool (zle q max_signed))
         then Some ((repr q), (repr r))
         else None

  (** val testbit : int -> int -> bool **)

  let testbit x i =
    Z.testbit (unsigned x) i

  (** val int_of_one_bits : int list -> int **)

  let rec int_of_one_bits = function
  | [] -> zero
  | a :: b -> add (shl one a) (int_of_one_bits b)

  (** val no_overlap : int -> int -> int -> int -> bool **)

  let no_overlap ofs1 sz1 ofs2 sz2 =
    let x1 = unsigned ofs1 in
    let x2 = unsigned ofs2 in
    (&&)
      ((&&) (proj_sumbool (zlt (Z.add x1 sz1) modulus))
        (proj_sumbool (zlt (Z.add x2 sz2) modulus)))
      ((||) (proj_sumbool (zle (Z.add x1 sz1) x2))
        (proj_sumbool (zle (Z.add x2 sz2) x1)))

  (** val size : int -> int **)

  let size x =
    zsize (unsigned x)

  (** val unsigned_bitfield_extract : int -> int -> int -> int **)

  let unsigned_bitfield_extract pos width n0 =
    zero_ext width (shru n0 (repr pos))

  (** val signed_bitfield_extract : int -> int -> int -> int **)

  let signed_bitfield_extract pos width n0 =
    sign_ext width (shru n0 (repr pos))

  (** val bitfield_insert : int -> int -> int -> int -> int **)

  let bitfield_insert pos width n0 p =
    let mask0 = shl (repr (Z.sub (two_p width) 1)) (repr pos) in
    coq_or (shl (zero_ext width p) (repr pos)) (coq_and n0 (not mask0))
 end

module Wordsize_32 =
 struct
  (** val wordsize : int **)

  let wordsize =
    Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))))
 end

module Int = Make(Wordsize_32)

module Wordsize_8 =
 struct
  (** val wordsize : int **)

  let wordsize =
    Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))
 end

module Byte = Make(Wordsize_8)

module Wordsize_64 =
 struct
  (** val wordsize : int **)

  let wordsize =
    Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 end

module Int64 =
 struct
  (** val wordsize : int **)

  let wordsize =
    Wordsize_64.wordsize

  (** val zwordsize : int **)

  let zwordsize =
    Z.of_nat wordsize

  (** val modulus : int **)

  let modulus =
    two_power_nat wordsize

  (** val half_modulus : int **)

  let half_modulus =
    Z.div modulus ((fun p->2*p) 1)

  (** val intval : int -> int **)

  let intval = function
  | intval0 -> intval0

  (** val coq_Z_mod_modulus : int -> int **)

  let coq_Z_mod_modulus x =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 0)
      (fun p -> p_mod_two_p p wordsize)
      (fun p ->
      let r = p_mod_two_p p wordsize in if zeq r 0 then 0 else Z.sub modulus r)
      x

  (** val unsigned : int -> int **)

  let unsigned =
    intval

  (** val signed : int -> int **)

  let signed n0 =
    let x = unsigned n0 in if zlt x half_modulus then x else Z.sub x modulus

  (** val repr : int -> int **)

  let repr x =
    (coq_Z_mod_modulus x)

  (** val zero : int **)

  let zero =
    repr 0

  (** val eq_dec : int -> int -> bool **)

  let eq_dec x y =
    let intval0 = x in let intval1 = y in zeq intval0 intval1

  (** val eq : int -> int -> bool **)

  let eq x y =
    if zeq (unsigned x) (unsigned y) then true else false

  (** val lt : int -> int -> bool **)

  let lt x y =
    if zlt (signed x) (signed y) then true else false

  (** val ltu : int -> int -> bool **)

  let ltu x y =
    if zlt (unsigned x) (unsigned y) then true else false

  (** val neg : int -> int **)

  let neg x =
    repr (Z.opp (unsigned x))

  (** val add : int -> int -> int **)

  let add x y =
    repr (Z.add (unsigned x) (unsigned y))

  (** val sub : int -> int -> int **)

  let sub x y =
    repr (Z.sub (unsigned x) (unsigned y))

  (** val mul : int -> int -> int **)

  let mul x y =
    repr (Z.mul (unsigned x) (unsigned y))

  (** val divu : int -> int -> int **)

  let divu x y =
    repr (Z.div (unsigned x) (unsigned y))

  (** val modu : int -> int -> int **)

  let modu x y =
    repr (Z.modulo (unsigned x) (unsigned y))

  (** val coq_and : int -> int -> int **)

  let coq_and x y =
    repr (Z.coq_land (unsigned x) (unsigned y))

  (** val coq_or : int -> int -> int **)

  let coq_or x y =
    repr (Z.coq_lor (unsigned x) (unsigned y))

  (** val xor : int -> int -> int **)

  let xor x y =
    repr (Z.coq_lxor (unsigned x) (unsigned y))

  (** val shl : int -> int -> int **)

  let shl x y =
    repr (Z.shiftl (unsigned x) (unsigned y))

  (** val shru : int -> int -> int **)

  let shru x y =
    repr (Z.shiftr (unsigned x) (unsigned y))

  (** val iwordsize' : int **)

  let iwordsize' =
    Int.repr zwordsize

  (** val shl' : int -> int -> int **)

  let shl' x y =
    repr (Z.shiftl (unsigned x) (Int.unsigned y))

  (** val shru' : int -> int -> int **)

  let shru' x y =
    repr (Z.shiftr (unsigned x) (Int.unsigned y))

  (** val shr' : int -> int -> int **)

  let shr' x y =
    repr (Z.shiftr (signed x) (Int.unsigned y))
 end

module Wordsize_Ptrofs =
 struct
  (** val wordsize : int **)

  let wordsize =
    if ptr64
    then Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    else Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ 0)))))))))))))))))))))))))))))))
 end

module Ptrofs =
 struct
  (** val wordsize : int **)

  let wordsize =
    Wordsize_Ptrofs.wordsize

  (** val modulus : int **)

  let modulus =
    two_power_nat wordsize

  (** val intval : int -> int **)

  let intval = function
  | intval0 -> intval0

  (** val coq_Z_mod_modulus : int -> int **)

  let coq_Z_mod_modulus x =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 0)
      (fun p -> p_mod_two_p p wordsize)
      (fun p ->
      let r = p_mod_two_p p wordsize in if zeq r 0 then 0 else Z.sub modulus r)
      x

  (** val unsigned : int -> int **)

  let unsigned =
    intval

  (** val repr : int -> int **)

  let repr x =
    (coq_Z_mod_modulus x)

  (** val zero : int **)

  let zero =
    repr 0

  (** val one : int **)

  let one =
    repr 1

  (** val eq_dec : int -> int -> bool **)

  let eq_dec x y =
    let intval0 = x in let intval1 = y in zeq intval0 intval1

  (** val eq : int -> int -> bool **)

  let eq x y =
    if zeq (unsigned x) (unsigned y) then true else false

  (** val ltu : int -> int -> bool **)

  let ltu x y =
    if zlt (unsigned x) (unsigned y) then true else false

  (** val add : int -> int -> int **)

  let add x y =
    repr (Z.add (unsigned x) (unsigned y))

  (** val sub : int -> int -> int **)

  let sub x y =
    repr (Z.sub (unsigned x) (unsigned y))

  (** val mul : int -> int -> int **)

  let mul x y =
    repr (Z.mul (unsigned x) (unsigned y))

  (** val cmpu : comparison0 -> int -> int -> bool **)

  let cmpu c x y =
    match c with
    | Ceq -> eq x y
    | Cne -> negb (eq x y)
    | Clt -> ltu x y
    | Cle -> negb (ltu y x)
    | Cgt -> ltu y x
    | Cge -> negb (ltu x y)

  (** val to_int : int -> int **)

  let to_int x =
    Int.repr (unsigned x)

  (** val to_int64 : int -> int **)

  let to_int64 x =
    Int64.repr (unsigned x)

  (** val of_int : int -> int **)

  let of_int x =
    repr (Int.unsigned x)

  (** val of_ints : int -> int **)

  let of_ints x =
    repr (Int.signed x)

  (** val of_int64 : int -> int **)

  let of_int64 x =
    repr (Int64.unsigned x)
 end

module PTree =
 struct
  type 'a tree' =
  | Node001 of 'a tree'
  | Node010 of 'a
  | Node011 of 'a * 'a tree'
  | Node100 of 'a tree'
  | Node101 of 'a tree' * 'a tree'
  | Node110 of 'a tree' * 'a
  | Node111 of 'a tree' * 'a * 'a tree'

  type 'a tree =
  | Empty
  | Nodes of 'a tree'

  type 'a t = 'a tree

  (** val empty : 'a1 t **)

  let empty =
    Empty

  (** val get' : int -> 'a1 tree' -> 'a1 option **)

  let rec get' p m0 =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun q ->
      match m0 with
      | Node001 m' -> get' q m'
      | Node011 (_, m') -> get' q m'
      | Node101 (_, m') -> get' q m'
      | Node111 (_, _, m') -> get' q m'
      | _ -> None)
      (fun q ->
      match m0 with
      | Node100 m' -> get' q m'
      | Node101 (m', _) -> get' q m'
      | Node110 (m', _) -> get' q m'
      | Node111 (m', _, _) -> get' q m'
      | _ -> None)
      (fun _ ->
      match m0 with
      | Node010 x -> Some x
      | Node011 (x, _) -> Some x
      | Node110 (_, x) -> Some x
      | Node111 (_, x, _) -> Some x
      | _ -> None)
      p

  (** val get : int -> 'a1 tree -> 'a1 option **)

  let get p = function
  | Empty -> None
  | Nodes m' -> get' p m'

  (** val set0 : int -> 'a1 -> 'a1 tree' **)

  let rec set0 p x =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun q -> Node001 (set0 q x))
      (fun q -> Node100 (set0 q x))
      (fun _ -> Node010 x)
      p

  (** val set' : int -> 'a1 -> 'a1 tree' -> 'a1 tree' **)

  let rec set' p x m0 =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun q ->
      match m0 with
      | Node001 r -> Node001 (set' q x r)
      | Node010 y -> Node011 (y, (set0 q x))
      | Node011 (y, r) -> Node011 (y, (set' q x r))
      | Node100 l -> Node101 (l, (set0 q x))
      | Node101 (l, r) -> Node101 (l, (set' q x r))
      | Node110 (l, y) -> Node111 (l, y, (set0 q x))
      | Node111 (l, y, r) -> Node111 (l, y, (set' q x r)))
      (fun q ->
      match m0 with
      | Node001 r -> Node101 ((set0 q x), r)
      | Node010 y -> Node110 ((set0 q x), y)
      | Node011 (y, r) -> Node111 ((set0 q x), y, r)
      | Node100 l -> Node100 (set' q x l)
      | Node101 (l, r) -> Node101 ((set' q x l), r)
      | Node110 (l, y) -> Node110 ((set' q x l), y)
      | Node111 (l, y, r) -> Node111 ((set' q x l), y, r))
      (fun _ ->
      match m0 with
      | Node001 r -> Node011 (x, r)
      | Node010 _ -> Node010 x
      | Node011 (_, r) -> Node011 (x, r)
      | Node100 l -> Node110 (l, x)
      | Node101 (l, r) -> Node111 (l, x, r)
      | Node110 (l, _) -> Node110 (l, x)
      | Node111 (l, _, r) -> Node111 (l, x, r))
      p

  (** val set : int -> 'a1 -> 'a1 tree -> 'a1 tree **)

  let set p x = function
  | Empty -> Nodes (set0 p x)
  | Nodes m' -> Nodes (set' p x m')

  (** val map1' : ('a1 -> 'a2) -> 'a1 tree' -> 'a2 tree' **)

  let rec map1' f = function
  | Node001 r -> Node001 (map1' f r)
  | Node010 x -> Node010 (f x)
  | Node011 (x, r) -> Node011 ((f x), (map1' f r))
  | Node100 l -> Node100 (map1' f l)
  | Node101 (l, r) -> Node101 ((map1' f l), (map1' f r))
  | Node110 (l, x) -> Node110 ((map1' f l), (f x))
  | Node111 (l, x, r) -> Node111 ((map1' f l), (f x), (map1' f r))

  (** val map1 : ('a1 -> 'a2) -> 'a1 t -> 'a2 t **)

  let map1 f = function
  | Empty -> Empty
  | Nodes m1 -> Nodes (map1' f m1)
 end

module PMap =
 struct
  type 'a t = 'a * 'a PTree.t

  (** val init : 'a1 -> 'a1 * 'a1 PTree.t **)

  let init x =
    (x, PTree.empty)

  (** val get : int -> 'a1 t -> 'a1 **)

  let get i m0 =
    match PTree.get i (snd m0) with
    | Some x -> x
    | None -> fst m0

  (** val set : int -> 'a1 -> 'a1 t -> 'a1 * 'a1 PTree.tree **)

  let set i x m0 =
    ((fst m0), (PTree.set i x (snd m0)))

  (** val map : ('a1 -> 'a2) -> 'a1 t -> 'a2 t **)

  let map f m0 =
    ((f (fst m0)), (PTree.map1 f (snd m0)))
 end

module type INDEXED_TYPE =
 sig
  type t

  val index : t -> int

  val eq : t -> t -> bool
 end

module IMap =
 functor (X:INDEXED_TYPE) ->
 struct
  type elt = X.t

  (** val elt_eq : X.t -> X.t -> bool **)

  let elt_eq =
    X.eq

  type 'x t = 'x PMap.t

  (** val init : 'a1 -> 'a1 * 'a1 PTree.t **)

  let init =
    PMap.init

  (** val get : X.t -> 'a1 t -> 'a1 **)

  let get i m0 =
    PMap.get (X.index i) m0

  (** val set : X.t -> 'a1 -> 'a1 t -> 'a1 * 'a1 PTree.tree **)

  let set i v m0 =
    PMap.set (X.index i) v m0

  (** val map : ('a1 -> 'a2) -> 'a1 t -> 'a2 t **)

  let map =
    PMap.map
 end

module ZIndexed =
 struct
  type t = int

  (** val index : int -> int **)

  let index z0 =
    (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
      (fun _ -> 1)
      (fun p -> (fun p->2*p) p)
      (fun p -> (fun p->1+2*p) p)
      z0

  (** val eq : int -> int -> bool **)

  let eq =
    zeq
 end

module ZMap = IMap(ZIndexed)

module type EQUALITY_TYPE =
 sig
  type t

  val eq : t -> t -> bool
 end

module EMap =
 functor (X:EQUALITY_TYPE) ->
 struct
  type elt = X.t

  (** val elt_eq : X.t -> X.t -> bool **)

  let elt_eq =
    X.eq

  type 'a t = X.t -> 'a

  (** val init : 'a1 -> X.t -> 'a1 **)

  let init v _ =
    v

  (** val get : X.t -> 'a1 t -> 'a1 **)

  let get x m0 =
    m0 x

  (** val set : X.t -> 'a1 -> 'a1 t -> X.t -> 'a1 **)

  let set x v m0 y =
    if X.eq y x then v else m0 y

  (** val map : ('a1 -> 'a2) -> 'a1 t -> X.t -> 'a2 **)

  let map f m0 x =
    f (m0 x)
 end

(** val beq_dec : int -> int -> binary_float0 -> binary_float0 -> bool **)

let beq_dec _ _ f1 f2 =
  match f1 with
  | B754_zero0 s1 ->
    (match f2 with
     | B754_zero0 s2 ->
       if s1 then if s2 then true else false else if s2 then false else true
     | _ -> false)
  | B754_infinity0 s1 ->
    (match f2 with
     | B754_infinity0 s2 ->
       if s1 then if s2 then true else false else if s2 then false else true
     | _ -> false)
  | B754_nan0 (s1, p1) ->
    (match f2 with
     | B754_nan0 (s2, p2) ->
       if s1
       then if s2 then Coq_Pos.eq_dec p1 p2 else false
       else if s2 then false else Coq_Pos.eq_dec p1 p2
     | _ -> false)
  | B754_finite0 (s1, m1, e1) ->
    (match f2 with
     | B754_finite0 (s2, m2, e2) ->
       if s1
       then if s2
            then let s = Coq_Pos.eq_dec m1 m2 in
                 if s then Z.eq_dec e1 e2 else false
            else false
       else if s2
            then false
            else let s = Coq_Pos.eq_dec m1 m2 in
                 if s then Z.eq_dec e1 e2 else false
     | _ -> false)

(** val bofZ : int -> int -> int -> binary_float0 **)

let bofZ prec emax n0 =
  binary_normalize0 prec emax Mode_NE n0 0 false

(** val zofB : int -> int -> binary_float0 -> int option **)

let zofB _ _ = function
| B754_zero0 _ -> Some 0
| B754_finite0 (s, m0, e0) ->
  ((fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
     (fun _ -> Some (cond_Zopp s m0))
     (fun e -> Some
     (Z.mul (cond_Zopp s m0) (Z.pow_pos (radix_val radix2) e)))
     (fun e -> Some
     (cond_Zopp s (Z.div m0 (Z.pow_pos (radix_val radix2) e))))
     e0)
| _ -> None

(** val zofB_range :
    int -> int -> binary_float0 -> int -> int -> int option **)

let zofB_range prec emax f zmin zmax =
  match zofB prec emax f with
  | Some z0 -> if (&&) (Z.leb zmin z0) (Z.leb z0 zmax) then Some z0 else None
  | None -> None

(** val bconv :
    int -> int -> int -> int -> (binary_float0 -> binary_float0) -> mode ->
    binary_float0 -> binary_float0 **)

let bconv _ _ prec2 emax2 conv_nan md f = match f with
| B754_nan0 (_, _) -> build_nan prec2 emax2 (conv_nan f)
| B754_finite0 (s, m0, e) ->
  binary_normalize0 prec2 emax2 md (cond_Zopp s m0) e s
| x -> x

type float = binary64

type float32 = binary32

(** val cmp_of_comparison : comparison0 -> comparison option -> bool **)

let cmp_of_comparison c x =
  match c with
  | Ceq ->
    (match x with
     | Some c0 -> (match c0 with
                   | Eq -> true
                   | _ -> false)
     | None -> false)
  | Cne ->
    (match x with
     | Some c0 -> (match c0 with
                   | Eq -> false
                   | _ -> true)
     | None -> true)
  | Clt ->
    (match x with
     | Some c0 -> (match c0 with
                   | Lt -> true
                   | _ -> false)
     | None -> false)
  | Cle ->
    (match x with
     | Some c0 -> (match c0 with
                   | Gt -> false
                   | _ -> true)
     | None -> false)
  | Cgt ->
    (match x with
     | Some c0 -> (match c0 with
                   | Gt -> true
                   | _ -> false)
     | None -> false)
  | Cge ->
    (match x with
     | Some c0 -> (match c0 with
                   | Lt -> false
                   | _ -> true)
     | None -> false)

(** val quiet_nan_64_payload : int -> int **)

let quiet_nan_64_payload p =
  Z.to_pos
    (p_mod_two_p
      (Coq_Pos.coq_lor p
        (iter_nat (fun x -> (fun p->2*p) x) (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ
          0))))))))))))))))))))))))))))))))))))))))))))))))))) 1))
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val quiet_nan_64 : (bool * int) -> float **)

let quiet_nan_64 = function
| (s, p) -> B754_nan0 (s, (quiet_nan_64_payload p))

(** val default_nan_0 : float **)

let default_nan_0 =
  quiet_nan_64 default_nan_64

(** val quiet_nan_32_payload : int -> int **)

let quiet_nan_32_payload p =
  Z.to_pos
    (p_mod_two_p
      (Coq_Pos.coq_lor p
        (iter_nat (fun x -> (fun p->2*p) x) (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
          0)))))))))))))))))))))) 1)) (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ 0))))))))))))))))))))))))

(** val quiet_nan_32 : (bool * int) -> float32 **)

let quiet_nan_32 = function
| (s, p) -> B754_nan0 (s, (quiet_nan_32_payload p))

(** val default_nan_1 : float32 **)

let default_nan_1 =
  quiet_nan_32 default_nan_32

module Float =
 struct
  (** val expand_nan_payload : int -> int **)

  let expand_nan_payload p =
    Coq_Pos.shiftl_nat p (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0)))))))))))))))))))))))))))))

  (** val expand_nan : bool -> int -> binary_float0 **)

  let expand_nan s p =
    B754_nan0 (s, (expand_nan_payload p))

  (** val of_single_nan : float32 -> float **)

  let of_single_nan = function
  | B754_nan0 (s, p) ->
    if float_conversion_default_nan
    then default_nan_0
    else if float_of_single_preserves_sNaN
         then expand_nan s p
         else quiet_nan_64 (s, (expand_nan_payload p))
  | _ -> default_nan_0

  (** val reduce_nan_payload : int -> int **)

  let reduce_nan_payload p =
    Coq_Pos.shiftr_nat (quiet_nan_64_payload p) (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))

  (** val to_single_nan : float -> float32 **)

  let to_single_nan = function
  | B754_nan0 (s, p) ->
    if float_conversion_default_nan
    then default_nan_1
    else quiet_nan_32 (s, (reduce_nan_payload p))
  | _ -> default_nan_1

  (** val neg_nan : float -> float **)

  let neg_nan = function
  | B754_nan0 (s, p) -> B754_nan0 ((negb s), p)
  | _ -> default_nan_0

  (** val abs_nan : float -> float **)

  let abs_nan = function
  | B754_nan0 (_, p) -> B754_nan0 (false, p)
  | _ -> default_nan_0

  (** val cons_pl : float -> (bool * int) list -> (bool * int) list **)

  let cons_pl x l =
    match x with
    | B754_nan0 (s, p) -> (s, p) :: l
    | _ -> l

  (** val binop_nan : float -> float -> float **)

  let binop_nan x y =
    quiet_nan_64 (choose_nan_64 (cons_pl x (cons_pl y [])))

  (** val zero : float **)

  let zero =
    B754_zero0 false

  (** val eq_dec : float -> float -> bool **)

  let eq_dec =
    beq_dec ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))))))

  (** val neg : float -> float **)

  let neg =
    bopp ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) neg_nan

  (** val abs : float -> float **)

  let abs =
    babs ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) abs_nan

  (** val add : float -> float -> float **)

  let add =
    bplus0 ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) binop_nan Mode_NE

  (** val sub : float -> float -> float **)

  let sub =
    bminus0 ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) binop_nan Mode_NE

  (** val mul : float -> float -> float **)

  let mul =
    bmult0 ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) binop_nan Mode_NE

  (** val div : float -> float -> float **)

  let div =
    bdiv0 ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) binop_nan Mode_NE

  (** val compare : float -> float -> comparison option **)

  let compare f1 f2 =
    bcompare0 ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) f1 f2

  (** val cmp : comparison0 -> float -> float -> bool **)

  let cmp c f1 f2 =
    cmp_of_comparison c (compare f1 f2)

  (** val of_single : float32 -> float **)

  let of_single =
    bconv ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))))))
      of_single_nan Mode_NE

  (** val to_single : float -> float32 **)

  let to_single =
    bconv ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) 1)))) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      1))))))) to_single_nan Mode_NE

  (** val to_int : float -> int option **)

  let to_int f =
    option_map Int.repr
      (zofB_range ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
        ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->2*p) 1)))))))))) f Int.min_signed
        Int.max_signed)

  (** val to_intu : float -> int option **)

  let to_intu f =
    option_map Int.repr
      (zofB_range ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
        ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->2*p) 1)))))))))) f 0 Int.max_unsigned)

  (** val of_int : int -> float **)

  let of_int n0 =
    bofZ ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) (Int.signed n0)

  (** val of_intu : int -> float **)

  let of_intu n0 =
    bofZ ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))))) (Int.unsigned n0)

  (** val to_bits : float -> int **)

  let to_bits f =
    Int64.repr (bits_of_b64 f)

  (** val of_bits : int -> float **)

  let of_bits b =
    b64_of_bits (Int64.unsigned b)
 end

module Float32 =
 struct
  (** val neg_nan : float32 -> float32 **)

  let neg_nan = function
  | B754_nan0 (s, p) -> B754_nan0 ((negb s), p)
  | _ -> default_nan_1

  (** val abs_nan : float32 -> float32 **)

  let abs_nan = function
  | B754_nan0 (_, p) -> B754_nan0 (false, p)
  | _ -> default_nan_1

  (** val cons_pl : float32 -> (bool * int) list -> (bool * int) list **)

  let cons_pl x l =
    match x with
    | B754_nan0 (s, p) -> (s, p) :: l
    | _ -> l

  (** val binop_nan : float32 -> float32 -> float32 **)

  let binop_nan x y =
    quiet_nan_32 (choose_nan_32 (cons_pl x (cons_pl y [])))

  (** val zero : float32 **)

  let zero =
    B754_zero0 false

  (** val eq_dec : float32 -> float32 -> bool **)

  let eq_dec =
    beq_dec ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1)))))))

  (** val neg : float32 -> float32 **)

  let neg =
    bopp ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) neg_nan

  (** val abs : float32 -> float32 **)

  let abs =
    babs ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) abs_nan

  (** val add : float32 -> float32 -> float32 **)

  let add =
    bplus0 ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) binop_nan Mode_NE

  (** val sub : float32 -> float32 -> float32 **)

  let sub =
    bminus0 ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) binop_nan Mode_NE

  (** val mul : float32 -> float32 -> float32 **)

  let mul =
    bmult0 ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) binop_nan Mode_NE

  (** val div : float32 -> float32 -> float32 **)

  let div =
    bdiv0 ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) binop_nan Mode_NE

  (** val compare : float32 -> float32 -> comparison option **)

  let compare f1 f2 =
    bcompare0 ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) f1 f2

  (** val cmp : comparison0 -> float32 -> float32 -> bool **)

  let cmp c f1 f2 =
    cmp_of_comparison c (compare f1 f2)

  (** val to_int : float32 -> int option **)

  let to_int f =
    option_map Int.repr
      (zofB_range ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
        1)))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))) f Int.min_signed
        Int.max_signed)

  (** val to_intu : float32 -> int option **)

  let to_intu f =
    option_map Int.repr
      (zofB_range ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
        1)))) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))) f 0
        Int.max_unsigned)

  (** val of_int : int -> float32 **)

  let of_int n0 =
    bofZ ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) (Int.signed n0)

  (** val of_intu : int -> float32 **)

  let of_intu n0 =
    bofZ ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))) (Int.unsigned n0)

  (** val to_bits : float32 -> int **)

  let to_bits f =
    Int.repr (bits_of_b32 f)

  (** val of_bits : int -> float32 **)

  let of_bits b =
    b32_of_bits (Int.unsigned b)
 end

type typ =
| Tint
| Tfloat
| Tlong
| Tsingle
| Tany32
| Tany64

type rettype =
| Tret of typ
| Tint8signed
| Tint8unsigned
| Tint16signed
| Tint16unsigned
| Tvoid

type calling_convention = { cc_vararg : int option; cc_unproto : bool;
                            cc_structret : bool }

(** val cc_default : calling_convention **)

let cc_default =
  { cc_vararg = None; cc_unproto = false; cc_structret = false }

type signature = { sig_args : typ list; sig_res : rettype;
                   sig_cc : calling_convention }

type memory_chunk =
| Mint8signed
| Mint8unsigned
| Mint16signed
| Mint16unsigned
| Mint32
| Mint64
| Mfloat32
| Mfloat64
| Many32
| Many64

type block = int

(** val eq_block : int -> int -> bool **)

let eq_block =
  peq

type val0 =
| Vundef
| Vint of int
| Vlong of int
| Vfloat of float
| Vsingle of float32
| Vptr of block * int

(** val vzero : val0 **)

let vzero =
  Vint Int.zero

(** val vtrue : val0 **)

let vtrue =
  Vint Int.one

(** val vfalse : val0 **)

let vfalse =
  Vint Int.zero

(** val vnullptr : val0 **)

let vnullptr =
  if ptr64 then Vlong Int64.zero else Vint Int.zero

module Val =
 struct
  (** val eq : val0 -> val0 -> bool **)

  let eq x y =
    match x with
    | Vundef -> (match y with
                 | Vundef -> true
                 | _ -> false)
    | Vint x0 -> (match y with
                  | Vint i0 -> Int.eq_dec x0 i0
                  | _ -> false)
    | Vlong x0 -> (match y with
                   | Vlong i0 -> Int64.eq_dec x0 i0
                   | _ -> false)
    | Vfloat x0 -> (match y with
                    | Vfloat f0 -> Float.eq_dec x0 f0
                    | _ -> false)
    | Vsingle x0 ->
      (match y with
       | Vsingle f0 -> Float32.eq_dec x0 f0
       | _ -> false)
    | Vptr (x0, x1) ->
      (match y with
       | Vptr (b0, i0) ->
         if eq_block x0 b0 then Ptrofs.eq_dec x1 i0 else false
       | _ -> false)

  (** val has_type_dec : val0 -> typ -> bool **)

  let has_type_dec v t0 =
    match v with
    | Vundef -> true
    | Vint _ ->
      (match t0 with
       | Tint -> true
       | Tany32 -> true
       | Tany64 -> true
       | _ -> false)
    | Vlong _ -> (match t0 with
                  | Tlong -> true
                  | Tany64 -> true
                  | _ -> false)
    | Vfloat _ -> (match t0 with
                   | Tfloat -> true
                   | Tany64 -> true
                   | _ -> false)
    | Vsingle _ ->
      (match t0 with
       | Tint -> false
       | Tfloat -> false
       | Tlong -> false
       | _ -> true)
    | Vptr (_, _) ->
      (match t0 with
       | Tint -> bool_dec ptr64 false
       | Tlong -> bool_dec ptr64 true
       | Tany32 -> bool_dec ptr64 false
       | Tany64 -> true
       | _ -> false)

  (** val neg : val0 -> val0 **)

  let neg = function
  | Vint n0 -> Vint (Int.neg n0)
  | _ -> Vundef

  (** val negf : val0 -> val0 **)

  let negf = function
  | Vfloat f -> Vfloat (Float.neg f)
  | _ -> Vundef

  (** val absf : val0 -> val0 **)

  let absf = function
  | Vfloat f -> Vfloat (Float.abs f)
  | _ -> Vundef

  (** val negfs : val0 -> val0 **)

  let negfs = function
  | Vsingle f -> Vsingle (Float32.neg f)
  | _ -> Vundef

  (** val absfs : val0 -> val0 **)

  let absfs = function
  | Vsingle f -> Vsingle (Float32.abs f)
  | _ -> Vundef

  (** val intoffloat : val0 -> val0 option **)

  let intoffloat = function
  | Vfloat f -> option_map (fun x -> Vint x) (Float.to_int f)
  | _ -> None

  (** val intuoffloat : val0 -> val0 option **)

  let intuoffloat = function
  | Vfloat f -> option_map (fun x -> Vint x) (Float.to_intu f)
  | _ -> None

  (** val floatofint : val0 -> val0 option **)

  let floatofint = function
  | Vint n0 -> Some (Vfloat (Float.of_int n0))
  | _ -> None

  (** val floatofintu : val0 -> val0 option **)

  let floatofintu = function
  | Vint n0 -> Some (Vfloat (Float.of_intu n0))
  | _ -> None

  (** val intofsingle : val0 -> val0 option **)

  let intofsingle = function
  | Vsingle f -> option_map (fun x -> Vint x) (Float32.to_int f)
  | _ -> None

  (** val intuofsingle : val0 -> val0 option **)

  let intuofsingle = function
  | Vsingle f -> option_map (fun x -> Vint x) (Float32.to_intu f)
  | _ -> None

  (** val singleofint : val0 -> val0 option **)

  let singleofint = function
  | Vint n0 -> Some (Vsingle (Float32.of_int n0))
  | _ -> None

  (** val singleofintu : val0 -> val0 option **)

  let singleofintu = function
  | Vint n0 -> Some (Vsingle (Float32.of_intu n0))
  | _ -> None

  (** val notint : val0 -> val0 **)

  let notint = function
  | Vint n0 -> Vint (Int.not n0)
  | _ -> Vundef

  (** val of_bool : bool -> val0 **)

  let of_bool = function
  | true -> vtrue
  | false -> vfalse

  (** val sign_ext : int -> val0 -> val0 **)

  let sign_ext nbits = function
  | Vint n0 -> Vint (Int.sign_ext nbits n0)
  | _ -> Vundef

  (** val singleoffloat : val0 -> val0 **)

  let singleoffloat = function
  | Vfloat f -> Vsingle (Float.to_single f)
  | _ -> Vundef

  (** val floatofsingle : val0 -> val0 **)

  let floatofsingle = function
  | Vsingle f -> Vfloat (Float.of_single f)
  | _ -> Vundef

  (** val add : val0 -> val0 -> val0 **)

  let add v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 -> Vint (Int.add n1 n2)
       | Vptr (b2, ofs2) ->
         if ptr64
         then Vundef
         else Vptr (b2, (Ptrofs.add ofs2 (Ptrofs.of_int n1)))
       | _ -> Vundef)
    | Vptr (b1, ofs1) ->
      (match v2 with
       | Vint n2 ->
         if ptr64
         then Vundef
         else Vptr (b1, (Ptrofs.add ofs1 (Ptrofs.of_int n2)))
       | _ -> Vundef)
    | _ -> Vundef

  (** val sub : val0 -> val0 -> val0 **)

  let sub v1 v2 =
    match v1 with
    | Vint n1 -> (match v2 with
                  | Vint n2 -> Vint (Int.sub n1 n2)
                  | _ -> Vundef)
    | Vptr (b1, ofs1) ->
      (match v2 with
       | Vint n2 ->
         if ptr64
         then Vundef
         else Vptr (b1, (Ptrofs.sub ofs1 (Ptrofs.of_int n2)))
       | Vptr (b2, ofs2) ->
         if ptr64
         then Vundef
         else if eq_block b1 b2
              then Vint (Ptrofs.to_int (Ptrofs.sub ofs1 ofs2))
              else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val mul : val0 -> val0 -> val0 **)

  let mul v1 v2 =
    match v1 with
    | Vint n1 -> (match v2 with
                  | Vint n2 -> Vint (Int.mul n1 n2)
                  | _ -> Vundef)
    | _ -> Vundef

  (** val mulhs : val0 -> val0 -> val0 **)

  let mulhs v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 -> Vint (Int.mulhs n1 n2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val mulhu : val0 -> val0 -> val0 **)

  let mulhu v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 -> Vint (Int.mulhu n1 n2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val divs : val0 -> val0 -> val0 option **)

  let divs v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 ->
         if (||) (Int.eq n2 Int.zero)
              ((&&) (Int.eq n1 (Int.repr Int.min_signed))
                (Int.eq n2 Int.mone))
         then None
         else Some (Vint (Int.divs n1 n2))
       | _ -> None)
    | _ -> None

  (** val divu : val0 -> val0 -> val0 option **)

  let divu v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 ->
         if Int.eq n2 Int.zero then None else Some (Vint (Int.divu n1 n2))
       | _ -> None)
    | _ -> None

  (** val modu : val0 -> val0 -> val0 option **)

  let modu v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 ->
         if Int.eq n2 Int.zero then None else Some (Vint (Int.modu n1 n2))
       | _ -> None)
    | _ -> None

  (** val sub_overflow : val0 -> val0 -> val0 **)

  let sub_overflow v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 -> Vint (Int.sub_overflow n1 n2 Int.zero)
       | _ -> Vundef)
    | _ -> Vundef

  (** val negative : val0 -> val0 **)

  let negative = function
  | Vint n0 -> Vint (Int.negative n0)
  | _ -> Vundef

  (** val coq_and : val0 -> val0 -> val0 **)

  let coq_and v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 -> Vint (Int.coq_and n1 n2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val coq_or : val0 -> val0 -> val0 **)

  let coq_or v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 -> Vint (Int.coq_or n1 n2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val xor : val0 -> val0 -> val0 **)

  let xor v1 v2 =
    match v1 with
    | Vint n1 -> (match v2 with
                  | Vint n2 -> Vint (Int.xor n1 n2)
                  | _ -> Vundef)
    | _ -> Vundef

  (** val shl : val0 -> val0 -> val0 **)

  let shl v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 ->
         if Int.ltu n2 Int.iwordsize then Vint (Int.shl n1 n2) else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val shr : val0 -> val0 -> val0 **)

  let shr v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 ->
         if Int.ltu n2 Int.iwordsize then Vint (Int.shr n1 n2) else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val shru : val0 -> val0 -> val0 **)

  let shru v1 v2 =
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 ->
         if Int.ltu n2 Int.iwordsize then Vint (Int.shru n1 n2) else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val ror : val0 -> val0 -> val0 **)

  let ror v1 v2 =
    match v1 with
    | Vint n1 -> (match v2 with
                  | Vint n2 -> Vint (Int.ror n1 n2)
                  | _ -> Vundef)
    | _ -> Vundef

  (** val addf : val0 -> val0 -> val0 **)

  let addf v1 v2 =
    match v1 with
    | Vfloat f1 ->
      (match v2 with
       | Vfloat f2 -> Vfloat (Float.add f1 f2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val subf : val0 -> val0 -> val0 **)

  let subf v1 v2 =
    match v1 with
    | Vfloat f1 ->
      (match v2 with
       | Vfloat f2 -> Vfloat (Float.sub f1 f2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val mulf : val0 -> val0 -> val0 **)

  let mulf v1 v2 =
    match v1 with
    | Vfloat f1 ->
      (match v2 with
       | Vfloat f2 -> Vfloat (Float.mul f1 f2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val divf : val0 -> val0 -> val0 **)

  let divf v1 v2 =
    match v1 with
    | Vfloat f1 ->
      (match v2 with
       | Vfloat f2 -> Vfloat (Float.div f1 f2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val addfs : val0 -> val0 -> val0 **)

  let addfs v1 v2 =
    match v1 with
    | Vsingle f1 ->
      (match v2 with
       | Vsingle f2 -> Vsingle (Float32.add f1 f2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val subfs : val0 -> val0 -> val0 **)

  let subfs v1 v2 =
    match v1 with
    | Vsingle f1 ->
      (match v2 with
       | Vsingle f2 -> Vsingle (Float32.sub f1 f2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val mulfs : val0 -> val0 -> val0 **)

  let mulfs v1 v2 =
    match v1 with
    | Vsingle f1 ->
      (match v2 with
       | Vsingle f2 -> Vsingle (Float32.mul f1 f2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val divfs : val0 -> val0 -> val0 **)

  let divfs v1 v2 =
    match v1 with
    | Vsingle f1 ->
      (match v2 with
       | Vsingle f2 -> Vsingle (Float32.div f1 f2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val negl : val0 -> val0 **)

  let negl = function
  | Vlong n0 -> Vlong (Int64.neg n0)
  | _ -> Vundef

  (** val longofint : val0 -> val0 **)

  let longofint = function
  | Vint n0 -> Vlong (Int64.repr (Int.signed n0))
  | _ -> Vundef

  (** val longofintu : val0 -> val0 **)

  let longofintu = function
  | Vint n0 -> Vlong (Int64.repr (Int.unsigned n0))
  | _ -> Vundef

  (** val addl : val0 -> val0 -> val0 **)

  let addl v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vlong n2 -> Vlong (Int64.add n1 n2)
       | Vptr (b2, ofs2) ->
         if ptr64
         then Vptr (b2, (Ptrofs.add ofs2 (Ptrofs.of_int64 n1)))
         else Vundef
       | _ -> Vundef)
    | Vptr (b1, ofs1) ->
      (match v2 with
       | Vlong n2 ->
         if ptr64
         then Vptr (b1, (Ptrofs.add ofs1 (Ptrofs.of_int64 n2)))
         else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val subl : val0 -> val0 -> val0 **)

  let subl v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vlong n2 -> Vlong (Int64.sub n1 n2)
       | _ -> Vundef)
    | Vptr (b1, ofs1) ->
      (match v2 with
       | Vlong n2 ->
         if ptr64
         then Vptr (b1, (Ptrofs.sub ofs1 (Ptrofs.of_int64 n2)))
         else Vundef
       | Vptr (b2, ofs2) ->
         if negb ptr64
         then Vundef
         else if eq_block b1 b2
              then Vlong (Ptrofs.to_int64 (Ptrofs.sub ofs1 ofs2))
              else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val mull : val0 -> val0 -> val0 **)

  let mull v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vlong n2 -> Vlong (Int64.mul n1 n2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val divlu : val0 -> val0 -> val0 option **)

  let divlu v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vlong n2 ->
         if Int64.eq n2 Int64.zero
         then None
         else Some (Vlong (Int64.divu n1 n2))
       | _ -> None)
    | _ -> None

  (** val modlu : val0 -> val0 -> val0 option **)

  let modlu v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vlong n2 ->
         if Int64.eq n2 Int64.zero
         then None
         else Some (Vlong (Int64.modu n1 n2))
       | _ -> None)
    | _ -> None

  (** val andl : val0 -> val0 -> val0 **)

  let andl v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vlong n2 -> Vlong (Int64.coq_and n1 n2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val orl : val0 -> val0 -> val0 **)

  let orl v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vlong n2 -> Vlong (Int64.coq_or n1 n2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val xorl : val0 -> val0 -> val0 **)

  let xorl v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vlong n2 -> Vlong (Int64.xor n1 n2)
       | _ -> Vundef)
    | _ -> Vundef

  (** val shll : val0 -> val0 -> val0 **)

  let shll v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vint n2 ->
         if Int.ltu n2 Int64.iwordsize'
         then Vlong (Int64.shl' n1 n2)
         else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val shrl : val0 -> val0 -> val0 **)

  let shrl v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vint n2 ->
         if Int.ltu n2 Int64.iwordsize'
         then Vlong (Int64.shr' n1 n2)
         else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val shrlu : val0 -> val0 -> val0 **)

  let shrlu v1 v2 =
    match v1 with
    | Vlong n1 ->
      (match v2 with
       | Vint n2 ->
         if Int.ltu n2 Int64.iwordsize'
         then Vlong (Int64.shru' n1 n2)
         else Vundef
       | _ -> Vundef)
    | _ -> Vundef

  (** val cmp_different_blocks : comparison0 -> bool option **)

  let cmp_different_blocks = function
  | Ceq -> Some false
  | Cne -> Some true
  | _ -> None

  (** val cmpu_bool :
      (block -> int -> bool) -> comparison0 -> val0 -> val0 -> bool option **)

  let cmpu_bool valid_ptr =
    let weak_valid_ptr = fun b ofs ->
      (||) (valid_ptr b ofs) (valid_ptr b (Z.sub ofs 1))
    in
    (fun c v1 v2 ->
    match v1 with
    | Vint n1 ->
      (match v2 with
       | Vint n2 -> Some (Int.cmpu c n1 n2)
       | Vptr (b2, ofs2) ->
         if ptr64
         then None
         else if (&&) (Int.eq n1 Int.zero)
                   (weak_valid_ptr b2 (Ptrofs.unsigned ofs2))
              then cmp_different_blocks c
              else None
       | _ -> None)
    | Vptr (b1, ofs1) ->
      (match v2 with
       | Vint n2 ->
         if ptr64
         then None
         else if (&&) (Int.eq n2 Int.zero)
                   (weak_valid_ptr b1 (Ptrofs.unsigned ofs1))
              then cmp_different_blocks c
              else None
       | Vptr (b2, ofs2) ->
         if ptr64
         then None
         else if eq_block b1 b2
              then if (&&) (weak_valid_ptr b1 (Ptrofs.unsigned ofs1))
                        (weak_valid_ptr b2 (Ptrofs.unsigned ofs2))
                   then Some (Ptrofs.cmpu c ofs1 ofs2)
                   else None
              else if (&&) (valid_ptr b1 (Ptrofs.unsigned ofs1))
                        (valid_ptr b2 (Ptrofs.unsigned ofs2))
                   then cmp_different_blocks c
                   else None
       | _ -> None)
    | _ -> None)

  (** val of_optbool : bool option -> val0 **)

  let of_optbool = function
  | Some b -> if b then vtrue else vfalse
  | None -> Vundef

  (** val cmpu :
      (block -> int -> bool) -> comparison0 -> val0 -> val0 -> val0 **)

  let cmpu valid_ptr c v1 v2 =
    of_optbool (cmpu_bool valid_ptr c v1 v2)

  (** val offset_ptr : val0 -> int -> val0 **)

  let offset_ptr v delta =
    match v with
    | Vptr (b, ofs) -> Vptr (b, (Ptrofs.add ofs delta))
    | _ -> Vundef

  (** val load_result : memory_chunk -> val0 -> val0 **)

  let load_result chunk v =
    match chunk with
    | Mint8signed ->
      (match v with
       | Vint n0 ->
         Vint (Int.sign_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))) n0)
       | _ -> Vundef)
    | Mint8unsigned ->
      (match v with
       | Vint n0 ->
         Vint (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))) n0)
       | _ -> Vundef)
    | Mint16signed ->
      (match v with
       | Vint n0 ->
         Vint
           (Int.sign_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
             ((fun p->2*p) 1)))) n0)
       | _ -> Vundef)
    | Mint16unsigned ->
      (match v with
       | Vint n0 ->
         Vint
           (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
             ((fun p->2*p) 1)))) n0)
       | _ -> Vundef)
    | Mint32 ->
      (match v with
       | Vint n0 -> Vint n0
       | Vptr (b, ofs) -> if ptr64 then Vundef else Vptr (b, ofs)
       | _ -> Vundef)
    | Mint64 ->
      (match v with
       | Vlong n0 -> Vlong n0
       | Vptr (b, ofs) -> if ptr64 then Vptr (b, ofs) else Vundef
       | _ -> Vundef)
    | Mfloat32 -> (match v with
                   | Vsingle f -> Vsingle f
                   | _ -> Vundef)
    | Mfloat64 -> (match v with
                   | Vfloat f -> Vfloat f
                   | _ -> Vundef)
    | Many32 ->
      (match v with
       | Vint _ -> v
       | Vsingle _ -> v
       | Vptr (_, _) -> if ptr64 then Vundef else v
       | _ -> Vundef)
    | Many64 -> v
 end

(** val size_chunk : memory_chunk -> int **)

let size_chunk = function
| Mint8signed -> 1
| Mint8unsigned -> 1
| Mint16signed -> ((fun p->2*p) 1)
| Mint16unsigned -> ((fun p->2*p) 1)
| Mint32 -> ((fun p->2*p) ((fun p->2*p) 1))
| Mfloat32 -> ((fun p->2*p) ((fun p->2*p) 1))
| Many32 -> ((fun p->2*p) ((fun p->2*p) 1))
| _ -> ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))

(** val size_chunk_nat : memory_chunk -> int **)

let size_chunk_nat chunk =
  Z.to_nat (size_chunk chunk)

(** val align_chunk : memory_chunk -> int **)

let align_chunk = function
| Mint8signed -> 1
| Mint8unsigned -> 1
| Mint16signed -> ((fun p->2*p) 1)
| Mint16unsigned -> ((fun p->2*p) 1)
| Mint64 -> ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))
| _ -> ((fun p->2*p) ((fun p->2*p) 1))

type quantity =
| Q32
| Q64

(** val quantity_eq : quantity -> quantity -> bool **)

let quantity_eq q1 q2 =
  match q1 with
  | Q32 -> (match q2 with
            | Q32 -> true
            | Q64 -> false)
  | Q64 -> (match q2 with
            | Q32 -> false
            | Q64 -> true)

(** val size_quantity_nat : quantity -> int **)

let size_quantity_nat = function
| Q32 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ 0)))
| Q64 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    0)))))))

type memval =
| Undef
| Byte of int
| Fragment of val0 * quantity * int

(** val bytes_of_int : int -> int -> int list **)

let rec bytes_of_int n0 x =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> [])
    (fun m0 ->
    (Byte.repr x) :: (bytes_of_int m0
                       (Z.div x ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                         ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                         ((fun p->2*p) ((fun p->2*p) 1)))))))))))
    n0

(** val int_of_bytes : int list -> int **)

let rec int_of_bytes = function
| [] -> 0
| b :: l' ->
  Z.add (Byte.unsigned b)
    (Z.mul (int_of_bytes l') ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      1)))))))))

(** val rev_if_be : int list -> int list **)

let rev_if_be l =
  if big_endian then rev l else l

(** val encode_int : int -> int -> int list **)

let encode_int sz x =
  rev_if_be (bytes_of_int sz x)

(** val decode_int : int list -> int **)

let decode_int b =
  int_of_bytes (rev_if_be b)

(** val inj_bytes : int list -> memval list **)

let inj_bytes bl =
  map (fun x -> Byte x) bl

(** val proj_bytes : memval list -> int list option **)

let rec proj_bytes = function
| [] -> Some []
| m0 :: vl' ->
  (match m0 with
   | Byte b ->
     (match proj_bytes vl' with
      | Some bl -> Some (b :: bl)
      | None -> None)
   | _ -> None)

(** val inj_value_rec : int -> val0 -> quantity -> memval list **)

let rec inj_value_rec n0 v q =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> [])
    (fun m0 -> (Fragment (v, q, m0)) :: (inj_value_rec m0 v q))
    n0

(** val inj_value : quantity -> val0 -> memval list **)

let inj_value q v =
  inj_value_rec (size_quantity_nat q) v q

(** val check_value : int -> val0 -> quantity -> memval list -> bool **)

let rec check_value n0 v q vl =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> match vl with
              | [] -> true
              | _ :: _ -> false)
    (fun m0 ->
    match vl with
    | [] -> false
    | m1 :: vl' ->
      (match m1 with
       | Fragment (v', q', m') ->
         (&&)
           ((&&)
             ((&&) (proj_sumbool (Val.eq v v'))
               (proj_sumbool (quantity_eq q q'))) ((=) m0 m'))
           (check_value m0 v q vl')
       | _ -> false))
    n0

(** val proj_value : quantity -> memval list -> val0 **)

let proj_value q vl = match vl with
| [] -> Vundef
| m0 :: _ ->
  (match m0 with
   | Fragment (v, _, _) ->
     if check_value (size_quantity_nat q) v q vl then v else Vundef
   | _ -> Vundef)

(** val encode_val : memory_chunk -> val0 -> memval list **)

let encode_val chunk v = match v with
| Vundef ->
  (match chunk with
   | Many32 -> inj_value Q32 v
   | Many64 -> inj_value Q64 v
   | _ -> repeat Undef (size_chunk_nat chunk))
| Vint n0 ->
  (match chunk with
   | Mint8signed ->
     inj_bytes (encode_int (Stdlib.succ 0) (Int.unsigned n0))
   | Mint8unsigned ->
     inj_bytes (encode_int (Stdlib.succ 0) (Int.unsigned n0))
   | Mint16signed ->
     inj_bytes
       (encode_int (Stdlib.succ (Stdlib.succ 0)) (Int.unsigned n0))
   | Mint16unsigned ->
     inj_bytes
       (encode_int (Stdlib.succ (Stdlib.succ 0)) (Int.unsigned n0))
   | Mint32 ->
     inj_bytes
       (encode_int (Stdlib.succ (Stdlib.succ (Stdlib.succ
         (Stdlib.succ 0)))) (Int.unsigned n0))
   | Many32 -> inj_value Q32 v
   | Many64 -> inj_value Q64 v
   | _ -> repeat Undef (size_chunk_nat chunk))
| Vlong n0 ->
  (match chunk with
   | Mint64 ->
     inj_bytes
       (encode_int (Stdlib.succ (Stdlib.succ (Stdlib.succ
         (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
         (Stdlib.succ 0)))))))) (Int64.unsigned n0))
   | Many32 -> inj_value Q32 v
   | Many64 -> inj_value Q64 v
   | _ -> repeat Undef (size_chunk_nat chunk))
| Vfloat n0 ->
  (match chunk with
   | Mfloat64 ->
     inj_bytes
       (encode_int (Stdlib.succ (Stdlib.succ (Stdlib.succ
         (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
         (Stdlib.succ 0)))))))) (Int64.unsigned (Float.to_bits n0)))
   | Many32 -> inj_value Q32 v
   | Many64 -> inj_value Q64 v
   | _ -> repeat Undef (size_chunk_nat chunk))
| Vsingle n0 ->
  (match chunk with
   | Mfloat32 ->
     inj_bytes
       (encode_int (Stdlib.succ (Stdlib.succ (Stdlib.succ
         (Stdlib.succ 0)))) (Int.unsigned (Float32.to_bits n0)))
   | Many32 -> inj_value Q32 v
   | Many64 -> inj_value Q64 v
   | _ -> repeat Undef (size_chunk_nat chunk))
| Vptr (_, _) ->
  (match chunk with
   | Mint32 ->
     if ptr64
     then repeat Undef (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ 0))))
     else inj_value Q32 v
   | Mint64 ->
     if ptr64
     then inj_value Q64 v
     else repeat Undef (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ 0))))))))
   | Many32 -> inj_value Q32 v
   | Many64 -> inj_value Q64 v
   | _ -> repeat Undef (size_chunk_nat chunk))

(** val decode_val : memory_chunk -> memval list -> val0 **)

let decode_val chunk vl =
  match proj_bytes vl with
  | Some bl ->
    (match chunk with
     | Mint8signed ->
       Vint
         (Int.sign_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))
           (Int.repr (decode_int bl)))
     | Mint8unsigned ->
       Vint
         (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))
           (Int.repr (decode_int bl)))
     | Mint16signed ->
       Vint
         (Int.sign_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
           ((fun p->2*p) 1)))) (Int.repr (decode_int bl)))
     | Mint16unsigned ->
       Vint
         (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
           ((fun p->2*p) 1)))) (Int.repr (decode_int bl)))
     | Mint32 -> Vint (Int.repr (decode_int bl))
     | Mint64 -> Vlong (Int64.repr (decode_int bl))
     | Mfloat32 -> Vsingle (Float32.of_bits (Int.repr (decode_int bl)))
     | Mfloat64 -> Vfloat (Float.of_bits (Int64.repr (decode_int bl)))
     | _ -> Vundef)
  | None ->
    (match chunk with
     | Mint32 ->
       if ptr64 then Vundef else Val.load_result chunk (proj_value Q32 vl)
     | Mint64 ->
       if ptr64 then Val.load_result chunk (proj_value Q64 vl) else Vundef
     | Many32 -> Val.load_result chunk (proj_value Q32 vl)
     | Many64 -> Val.load_result chunk (proj_value Q64 vl)
     | _ -> Vundef)

type permission =
| Freeable
| Writable
| Readable
| Nonempty

type perm_kind =
| Max
| Cur

module Mem =
 struct
  type mem' = { mem_contents : memval ZMap.t PMap.t;
                mem_access : (int -> perm_kind -> permission option) PMap.t;
                nextblock : block }

  (** val mem_contents : mem' -> memval ZMap.t PMap.t **)

  let mem_contents m0 =
    m0.mem_contents

  (** val mem_access :
      mem' -> (int -> perm_kind -> permission option) PMap.t **)

  let mem_access m0 =
    m0.mem_access

  (** val nextblock : mem' -> block **)

  let nextblock m0 =
    m0.nextblock

  type mem = mem'

  (** val perm_order_dec : permission -> permission -> bool **)

  let perm_order_dec p1 p2 =
    match p1 with
    | Freeable -> true
    | Writable -> (match p2 with
                   | Freeable -> false
                   | _ -> true)
    | Readable ->
      (match p2 with
       | Freeable -> false
       | Writable -> false
       | _ -> true)
    | Nonempty -> (match p2 with
                   | Nonempty -> true
                   | _ -> false)

  (** val perm_order'_dec : permission option -> permission -> bool **)

  let perm_order'_dec op p =
    match op with
    | Some p0 -> perm_order_dec p0 p
    | None -> false

  (** val perm_dec :
      mem -> block -> int -> perm_kind -> permission -> bool **)

  let perm_dec m0 b ofs k p =
    perm_order'_dec (PMap.get b m0.mem_access ofs k) p

  (** val range_perm_dec :
      mem -> block -> int -> int -> perm_kind -> permission -> bool **)

  let rec range_perm_dec m0 b lo hi k p =
    let s = zlt lo hi in
    if s
    then let s0 = perm_dec m0 b lo k p in
         if s0
         then let y = Z.add lo 1 in range_perm_dec m0 b y hi k p
         else false
    else true

  (** val valid_access_dec :
      mem -> memory_chunk -> block -> int -> permission -> bool **)

  let valid_access_dec m0 chunk b ofs p =
    let s = range_perm_dec m0 b ofs (Z.add ofs (size_chunk chunk)) Cur p in
    if s then zdivide_dec (align_chunk chunk) ofs else false

  (** val valid_pointer : mem -> block -> int -> bool **)

  let valid_pointer m0 b ofs =
    proj_sumbool (perm_dec m0 b ofs Cur Nonempty)

  (** val empty : mem **)

  let empty =
    { mem_contents = (PMap.init (ZMap.init Undef)); mem_access =
      (PMap.init (fun _ _ -> None)); nextblock = 1 }

  (** val alloc : mem -> int -> int -> mem' * block **)

  let alloc m0 lo hi =
    ({ mem_contents =
      (PMap.set m0.nextblock (ZMap.init Undef) m0.mem_contents); mem_access =
      (PMap.set m0.nextblock (fun ofs _ ->
        if (&&) (proj_sumbool (zle lo ofs)) (proj_sumbool (zlt ofs hi))
        then Some Freeable
        else None) m0.mem_access); nextblock = (Coq_Pos.succ m0.nextblock) },
      m0.nextblock)

  (** val getN : int -> int -> memval ZMap.t -> memval list **)

  let rec getN n0 p c =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> [])
      (fun n' -> (ZMap.get p c) :: (getN n' (Z.add p 1) c))
      n0

  (** val load : memory_chunk -> mem -> block -> int -> val0 option **)

  let load chunk m0 b ofs =
    if valid_access_dec m0 chunk b ofs Readable
    then Some
           (decode_val chunk
             (getN (size_chunk_nat chunk) ofs (PMap.get b m0.mem_contents)))
    else None

  (** val loadv : memory_chunk -> mem -> val0 -> val0 option **)

  let loadv chunk m0 = function
  | Vptr (b, ofs) -> load chunk m0 b (Ptrofs.unsigned ofs)
  | _ -> None

  (** val setN : memval list -> int -> memval ZMap.t -> memval ZMap.t **)

  let rec setN vl p c =
    match vl with
    | [] -> c
    | v :: vl' -> setN vl' (Z.add p 1) (ZMap.set p v c)

  (** val store :
      memory_chunk -> mem -> block -> int -> val0 -> mem option **)

  let store chunk m0 b ofs v =
    if valid_access_dec m0 chunk b ofs Writable
    then Some { mem_contents =
           (PMap.set b
             (setN (encode_val chunk v) ofs (PMap.get b m0.mem_contents))
             m0.mem_contents); mem_access = m0.mem_access; nextblock =
           m0.nextblock }
    else None

  (** val storev : memory_chunk -> mem -> val0 -> val0 -> mem option **)

  let storev chunk m0 addr v =
    match addr with
    | Vptr (b, ofs) -> store chunk m0 b (Ptrofs.unsigned ofs) v
    | _ -> None

  (** val storebytes : mem -> block -> int -> memval list -> mem option **)

  let storebytes m0 b ofs bytes =
    if range_perm_dec m0 b ofs (Z.add ofs (Z.of_nat (length bytes))) Cur
         Writable
    then Some { mem_contents =
           (PMap.set b (setN bytes ofs (PMap.get b m0.mem_contents))
             m0.mem_contents); mem_access = m0.mem_access; nextblock =
           m0.nextblock }
    else None
 end

type mreg =
| R0
| R1
| R2
| R3
| R4
| R5
| R6
| R7
| R8
| R9
| R10
| R11
| R12
| F0
| F1
| F2
| F3
| F4
| F5
| F6
| F7
| F8
| F9
| F10
| F11
| F12
| F13
| F14
| F15

type ireg =
| IR0
| IR1
| IR2
| IR3
| IR4
| IR5
| IR6
| IR7
| IR8
| IR9
| IR10
| IR11
| IR12
| IR13
| IR14

type freg =
| FR0
| FR1
| FR2
| FR3
| FR4
| FR5
| FR6
| FR7
| FR8
| FR9
| FR10
| FR11
| FR12
| FR13
| FR14
| FR15

(** val ireg_eq : ireg -> ireg -> bool **)

let ireg_eq x y =
  match x with
  | IR0 -> (match y with
            | IR0 -> true
            | _ -> false)
  | IR1 -> (match y with
            | IR1 -> true
            | _ -> false)
  | IR2 -> (match y with
            | IR2 -> true
            | _ -> false)
  | IR3 -> (match y with
            | IR3 -> true
            | _ -> false)
  | IR4 -> (match y with
            | IR4 -> true
            | _ -> false)
  | IR5 -> (match y with
            | IR5 -> true
            | _ -> false)
  | IR6 -> (match y with
            | IR6 -> true
            | _ -> false)
  | IR7 -> (match y with
            | IR7 -> true
            | _ -> false)
  | IR8 -> (match y with
            | IR8 -> true
            | _ -> false)
  | IR9 -> (match y with
            | IR9 -> true
            | _ -> false)
  | IR10 -> (match y with
             | IR10 -> true
             | _ -> false)
  | IR11 -> (match y with
             | IR11 -> true
             | _ -> false)
  | IR12 -> (match y with
             | IR12 -> true
             | _ -> false)
  | IR13 -> (match y with
             | IR13 -> true
             | _ -> false)
  | IR14 -> (match y with
             | IR14 -> true
             | _ -> false)

(** val freg_eq : freg -> freg -> bool **)

let freg_eq x y =
  match x with
  | FR0 -> (match y with
            | FR0 -> true
            | _ -> false)
  | FR1 -> (match y with
            | FR1 -> true
            | _ -> false)
  | FR2 -> (match y with
            | FR2 -> true
            | _ -> false)
  | FR3 -> (match y with
            | FR3 -> true
            | _ -> false)
  | FR4 -> (match y with
            | FR4 -> true
            | _ -> false)
  | FR5 -> (match y with
            | FR5 -> true
            | _ -> false)
  | FR6 -> (match y with
            | FR6 -> true
            | _ -> false)
  | FR7 -> (match y with
            | FR7 -> true
            | _ -> false)
  | FR8 -> (match y with
            | FR8 -> true
            | _ -> false)
  | FR9 -> (match y with
            | FR9 -> true
            | _ -> false)
  | FR10 -> (match y with
             | FR10 -> true
             | _ -> false)
  | FR11 -> (match y with
             | FR11 -> true
             | _ -> false)
  | FR12 -> (match y with
             | FR12 -> true
             | _ -> false)
  | FR13 -> (match y with
             | FR13 -> true
             | _ -> false)
  | FR14 -> (match y with
             | FR14 -> true
             | _ -> false)
  | FR15 -> (match y with
             | FR15 -> true
             | _ -> false)

type crbit =
| CN
| CZ
| CC
| CV

(** val crbit_eq : crbit -> crbit -> bool **)

let crbit_eq x y =
  match x with
  | CN -> (match y with
           | CN -> true
           | _ -> false)
  | CZ -> (match y with
           | CZ -> true
           | _ -> false)
  | CC -> (match y with
           | CC -> true
           | _ -> false)
  | CV -> (match y with
           | CV -> true
           | _ -> false)

type preg =
| IR of ireg
| FR of freg
| CR of crbit
| PC

(** val preg_eq : preg -> preg -> bool **)

let preg_eq x y =
  match x with
  | IR x0 -> (match y with
              | IR i0 -> ireg_eq x0 i0
              | _ -> false)
  | FR x0 -> (match y with
              | FR f0 -> freg_eq x0 f0
              | _ -> false)
  | CR x0 -> (match y with
              | CR c0 -> crbit_eq x0 c0
              | _ -> false)
  | PC -> (match y with
           | PC -> true
           | _ -> false)

module PregEq =
 struct
  type t = preg

  (** val eq : preg -> preg -> bool **)

  let eq =
    preg_eq
 end

module Pregmap = EMap(PregEq)

type shift_op =
| SOimm of int
| SOreg of ireg
| SOlsl of ireg * int
| SOlsr of ireg * int
| SOasr of ireg * int
| SOror of ireg * int

type testcond =
| TCeq
| TCne
| TChs
| TClo
| TCmi
| TCpl
| TChi
| TCls
| TCge
| TClt
| TCgt
| TCle

(** val preg_of : mreg -> preg **)

let preg_of = function
| R0 -> IR IR0
| R1 -> IR IR1
| R2 -> IR IR2
| R3 -> IR IR3
| R4 -> IR IR4
| R5 -> IR IR5
| R6 -> IR IR6
| R7 -> IR IR7
| R8 -> IR IR8
| R9 -> IR IR9
| R10 -> IR IR10
| R11 -> IR IR11
| R12 -> IR IR12
| F0 -> FR FR0
| F1 -> FR FR1
| F2 -> FR FR2
| F3 -> FR FR3
| F4 -> FR FR4
| F5 -> FR FR5
| F6 -> FR FR6
| F7 -> FR FR7
| F8 -> FR FR8
| F9 -> FR FR9
| F10 -> FR FR10
| F11 -> FR FR11
| F12 -> FR FR12
| F13 -> FR FR13
| F14 -> FR FR14
| F15 -> FR FR15

type instruction =
| Padd of ireg * ireg * shift_op
| Pand of ireg * ireg * shift_op
| Pasr of ireg * ireg * ireg
| Pb of int
| Pbc of testcond * int
| Pbreg of ireg
| Pblreg of ireg
| Pbic of ireg * ireg * shift_op
| Pcmp of ireg * shift_op
| Pcmn of ireg * shift_op
| Peor of ireg * ireg * shift_op
| Pldr of ireg * ireg * shift_op
| Pldr_a of ireg * ireg * shift_op
| Pldrb of ireg * ireg * shift_op
| Pldrh of ireg * ireg * shift_op
| Pldrsb of ireg * ireg * shift_op
| Pldrsh of ireg * ireg * shift_op
| Plsl of ireg * ireg * ireg
| Plsr of ireg * ireg * ireg
| Pmla of ireg * ireg * ireg * ireg
| Pmov of ireg * shift_op
| Pmovw of ireg * int
| Pmovt of ireg * int
| Pmul of ireg * ireg * ireg
| Pmvn of ireg * shift_op
| Porr of ireg * ireg * shift_op
| Prsb of ireg * ireg * shift_op
| Psbfx of ireg * ireg * int * int
| Pstr of ireg * ireg * shift_op
| Pstr_a of ireg * ireg * shift_op
| Pstrb of ireg * ireg * shift_op
| Pstrh of ireg * ireg * shift_op
| Psdiv
| Psmull of ireg * ireg * ireg * ireg
| Psub of ireg * ireg * shift_op
| Pudiv
| Pumull of ireg * ireg * ireg * ireg
| Pfcpyd of freg * freg
| Pfabsd of freg * freg
| Pfnegd of freg * freg
| Pfaddd of freg * freg * freg
| Pfdivd of freg * freg * freg
| Pfmuld of freg * freg * freg
| Pfsubd of freg * freg * freg
| Pflid of freg * float
| Pfcmpd of freg * freg
| Pfcmpzd of freg
| Pfsitod of freg * ireg
| Pfuitod of freg * ireg
| Pftosizd of ireg * freg
| Pftouizd of ireg * freg
| Pfabss of freg * freg
| Pfnegs of freg * freg
| Pfadds of freg * freg * freg
| Pfdivs of freg * freg * freg
| Pfmuls of freg * freg * freg
| Pfsubs of freg * freg * freg
| Pflis of freg * float32
| Pfcmps of freg * freg
| Pfcmpzs of freg
| Pfsitos of freg * ireg
| Pfuitos of freg * ireg
| Pftosizs of ireg * freg
| Pftouizs of ireg * freg
| Pfcvtsd of freg * freg
| Pfcvtds of freg * freg
| Pfldd of freg * ireg * int
| Pfldd_a of freg * ireg * int
| Pflds of freg * ireg * int
| Pfstd of freg * ireg * int
| Pfstd_a of freg * ireg * int
| Pfsts of freg * ireg * int

let string_of_memory_chunk mc =
  match mc with
  | Mint32          -> "32"
  | Mint16unsigned  -> "16"
  | Mint8unsigned   -> "8"
  | Mint64          -> "64"
  | _               -> "error"

let string_of_val0 v =
  match v with
  | Vundef -> "undefied value"
  | Vint x0 -> "Int32: " ^ (string_of_int x0)
  | Vlong x0 -> "Int64: " ^ (string_of_int x0)
  | Vptr (b, ofs) -> (string_of_int b) ^ "," ^ (string_of_int ofs)
  | _ -> "unexpected cases"

let print_val0 v = print_endline (string_of_val0 v)

let string_of_val0_hex v =
  match v with
  | Vundef -> "undefied value"
  | Vint x0 -> "Int32: " ^ (Printf.sprintf "0x%02x" x0)
  | Vlong x0 -> "Int64: " ^ (Printf.sprintf "0x%02x" x0)
  | Vptr (b, ofs) -> (Printf.sprintf "0x%02x" b) ^ "," ^ (Printf.sprintf "0x%02x" ofs)
  | _ -> "unexpected cases"

let string_of_ireg ir =
  match ir with
  | IR0 -> "IR0 "
  | IR1 -> "IR1 "
  | IR2 -> "IR2 "
  | IR3 -> "IR3 "
  | IR4 -> "IR4 "
  | IR5 -> "IR5 "
  | IR6 -> "IR6 "
  | IR7 -> "IR7 "
  | IR8 -> "IR8 "
  | IR9 -> "IR9 "
  | IR10 -> "IR10 "
  | IR11 -> "FP "
  | IR12 -> "IP "
  | IR13 -> "SP "
  | IR14 -> "RA "

let string_of_shift_op sop =
  match sop with
  | SOimm i  -> string_of_int i
  | SOreg ir -> string_of_ireg ir
  | _ -> "shift_op not yet"

let string_of_arm_instruction ins =
  match ins with
  | Padd (dst, src, sop) -> "Padd " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_shift_op sop)
  | Pand (dst, src, sop) -> "Pand " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_shift_op sop)
  | Pasr (dst, src, r) -> "Pasr " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_ireg r)
  | Pb ofs -> "Pb " ^ (string_of_int ofs)
  | Pbreg r -> "Pbreg " ^ (string_of_ireg r)
  | Pcmp (r, sop) -> "Pcmp " ^ (string_of_ireg r) ^ (string_of_shift_op sop)
  | Peor (dst, src, sop) -> "Peor " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_shift_op sop)
  | Pldr (dst, src, sop) -> "Pldr " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_shift_op sop)
  | Plsl (dst, src, r) -> "Plsl " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_ireg r)
  | Plsr (dst, src, r) -> "Plsr " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_ireg r)
  | Pmov (r, sop) -> "Pmov " ^ (string_of_ireg r) ^ (string_of_shift_op sop)
  | Pmovw (r, i) -> "Pmovw " ^ (string_of_ireg r) ^ (string_of_int i)
  | Pmovt (r, i) -> "Pmovt " ^ (string_of_ireg r) ^ (string_of_int i)
  | Pmul (dst, src, r) -> "Pmul " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_ireg r)
  | Porr (dst, src, sop) -> "Porr " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_shift_op sop)
  | Prsb (dst, src, sop) -> "Prsb " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_shift_op sop)    
  | Pstr (dst, src, sop) -> "Pstr " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_shift_op sop)  
  | Psub (dst, src, sop) -> "Psub " ^ (string_of_ireg dst) ^ (string_of_ireg src) ^ (string_of_shift_op sop)
  | Pudiv -> "Pudiv R0 R0 R1 "
  | _ -> "instruction: not yet"

(** val int_callee_save_regs : mreg list **)

let int_callee_save_regs =
  R4 :: (R5 :: (R6 :: (R7 :: (R8 :: (R9 :: (R10 :: (R11 :: [])))))))

(** val float_callee_save_regs : mreg list **)

let float_callee_save_regs =
  F8 :: (F9 :: (F10 :: (F11 :: (F12 :: (F13 :: (F14 :: (F15 :: [])))))))

(** val int_param_regs : mreg list **)

let int_param_regs =
  R0 :: (R1 :: (R2 :: (R3 :: [])))

(** val ireg_eqb : ireg -> ireg -> bool **)

let ireg_eqb r0 r1 =
  match r0 with
  | IR0 -> (match r1 with
            | IR0 -> true
            | _ -> false)
  | IR1 -> (match r1 with
            | IR1 -> true
            | _ -> false)
  | IR2 -> (match r1 with
            | IR2 -> true
            | _ -> false)
  | IR3 -> (match r1 with
            | IR3 -> true
            | _ -> false)
  | IR4 -> (match r1 with
            | IR4 -> true
            | _ -> false)
  | IR5 -> (match r1 with
            | IR5 -> true
            | _ -> false)
  | IR6 -> (match r1 with
            | IR6 -> true
            | _ -> false)
  | IR7 -> (match r1 with
            | IR7 -> true
            | _ -> false)
  | IR8 -> (match r1 with
            | IR8 -> true
            | _ -> false)
  | IR9 -> (match r1 with
            | IR9 -> true
            | _ -> false)
  | IR10 -> (match r1 with
             | IR10 -> true
             | _ -> false)
  | IR11 -> (match r1 with
             | IR11 -> true
             | _ -> false)
  | IR12 -> (match r1 with
             | IR12 -> true
             | _ -> false)
  | IR13 -> (match r1 with
             | IR13 -> true
             | _ -> false)
  | IR14 -> (match r1 with
             | IR14 -> true
             | _ -> false)

(** val encode_arm32 : int -> int -> int -> int **)

let encode_arm32 v ins from =
  Int.coq_or (Int.shl v (Int.repr (Z.of_nat from))) ins

(** val decode_arm32 : int -> int -> int -> int **)

let decode_arm32 ins from size0 =
  Int.shru
    (Int.coq_and ins (Int.repr (Z.sub (two_p (Z.of_nat (add from size0))) 1)))
    (Int.repr (Z.of_nat from))

(** val int2ireg : int -> ireg option **)

let int2ireg r =
  if Int.eq r (Int.repr 0)
  then Some IR0
  else if Int.eq r (Int.repr 1)
       then Some IR1
       else if Int.eq r (Int.repr ((fun p->2*p) 1))
            then Some IR2
            else if Int.eq r (Int.repr ((fun p->1+2*p) 1))
                 then Some IR3
                 else if Int.eq r (Int.repr ((fun p->2*p) ((fun p->2*p) 1)))
                      then Some IR4
                      else if Int.eq r
                                (Int.repr ((fun p->1+2*p) ((fun p->2*p) 1)))
                           then Some IR5
                           else if Int.eq r
                                     (Int.repr ((fun p->2*p) ((fun p->1+2*p)
                                       1)))
                                then Some IR6
                                else if Int.eq r
                                          (Int.repr ((fun p->1+2*p)
                                            ((fun p->1+2*p) 1)))
                                     then Some IR7
                                     else if Int.eq r
                                               (Int.repr ((fun p->2*p)
                                                 ((fun p->2*p) ((fun p->2*p)
                                                 1))))
                                          then Some IR8
                                          else if Int.eq r
                                                    (Int.repr ((fun p->1+2*p)
                                                      ((fun p->2*p)
                                                      ((fun p->2*p) 1))))
                                               then Some IR9
                                               else if Int.eq r
                                                         (Int.repr
                                                           ((fun p->2*p)
                                                           ((fun p->1+2*p)
                                                           ((fun p->2*p) 1))))
                                                    then Some IR10
                                                    else if Int.eq r
                                                              (Int.repr
                                                                ((fun p->1+2*p)
                                                                ((fun p->1+2*p)
                                                                ((fun p->2*p)
                                                                1))))
                                                         then Some IR11
                                                         else if Int.eq r
                                                                   (Int.repr
                                                                    ((fun p->2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    1))))
                                                              then Some IR12
                                                              else if 
                                                                    Int.eq r
                                                                    (Int.repr
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    1))))
                                                                   then 
                                                                    Some IR13
                                                                   else 
                                                                    if 
                                                                    Int.eq r
                                                                    (Int.repr
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->1+2*p)
                                                                    1))))
                                                                    then 
                                                                    Some IR14
                                                                    else None

(** val is_thumb2 : int -> bool **)

let is_thumb2 ins =
  let op =
    decode_arm32 ins (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))) (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0)))))
  in
  if Int.eq op
       (Int.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
         ((fun p->1+2*p) 1)))))
  then true
  else if Int.eq op
            (Int.repr ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
              ((fun p->1+2*p) 1)))))
       then true
       else Int.eq op
              (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                ((fun p->1+2*p) 1)))))

(** val decode_thumb : int -> instruction option **)

let decode_thumb ins =
  let op15_10 =
    decode_arm32 ins (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))))
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))
  in
  if Int.eq op15_10
       (Int.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
         1)))))
  then let op =
         decode_arm32 ins (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ 0)))))))) (Stdlib.succ
           (Stdlib.succ 0))
       in
       let rm =
         int2ireg
           (decode_arm32 ins (Stdlib.succ (Stdlib.succ
             (Stdlib.succ 0))) (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ 0)))))
       in
       let rn =
         decode_arm32 ins 0 (Stdlib.succ (Stdlib.succ
           (Stdlib.succ 0)))
       in
       let n0 =
         decode_arm32 ins (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ 0))))))) (Stdlib.succ 0)
       in
       let rd =
         int2ireg
           (encode_arm32 n0 rn (Stdlib.succ (Stdlib.succ
             (Stdlib.succ 0))))
       in
       (match rd with
        | Some rd0 ->
          (match rm with
           | Some rm0 ->
             if Int.eq op Int.zero
             then Some (Padd (rd0, rd0, (SOreg rm0)))
             else if Int.eq op Int.one
                  then Some (Pcmp (rd0, (SOreg rm0)))
                  else if Int.eq op (Int.repr ((fun p->2*p) 1))
                       then Some (Pmov (rd0, (SOreg rm0)))
                       else if (&&) (Int.eq op (Int.repr ((fun p->1+2*p) 1)))
                                 (ireg_eqb rd0 IR0)
                            then Some (Pbreg rm0)
                            else None
           | None -> None)
        | None -> None)
  else let op15_12 =
         decode_arm32 ins (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))))))
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ 0))))
       in
       if Int.eq op15_12
            (Int.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) 1))))
       then let imm8 =
              decode_arm32 ins 0 (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
            in
            if (&&)
                 (Int.cmp Cle
                   (Int.repr ((~-) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                     ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                     1))))))))) imm8)
                 (Int.cmp Cle imm8
                   (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                     ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1))))))))
            then Some (Pb (Ptrofs.of_ints imm8))
            else None
       else None

(** val thumb_constant_range_imm12 : int -> int -> int -> bool **)

let thumb_constant_range_imm12 i imm3 imm8 =
  (&&) ((&&) (Int.eq i Int.zero) (Int.eq imm3 Int.zero))
    ((&&) (Int.cmp Cle Int.zero imm8)
      (Int.cmp Cle imm8
        (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          1))))))))))

(** val decode_thumb2 : int -> int -> instruction option **)

let decode_thumb2 ins_lo ins_hi =
  let lo_op15_11 =
    decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))) (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0)))))
  in
  if Int.eq lo_op15_11
       (Int.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
         ((fun p->1+2*p) 1)))))
  then let lo_op10_9 =
         decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ 0))))))))) (Stdlib.succ (Stdlib.succ 0))
       in
       let op =
         decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ 0)))))
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ 0))))
       in
       let lo_opS =
         decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ 0)))) (Stdlib.succ 0)
       in
       let rn =
         int2ireg
           (decode_arm32 ins_lo 0 (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ 0)))))
       in
       let hi_op15_12 =
         decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ 0)))))))))))) (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ 0))))
       in
       let rd =
         int2ireg
           (decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
             (Stdlib.succ (Stdlib.succ (Stdlib.succ
             (Stdlib.succ 0)))))
       in
       let hi_op7_4 =
         decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ 0)))) (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))
       in
       let rm =
         int2ireg
           (decode_arm32 ins_hi 0 (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ 0)))))
       in
       if (&&) ((&&) (Int.eq lo_op10_9 Int.one) (Int.eq lo_opS Int.zero))
            ((&&) (Int.eq hi_op15_12 Int.zero) (Int.eq hi_op7_4 Int.zero))
       then (match rn with
             | Some rn0 ->
               (match rd with
                | Some rd0 ->
                  (match rm with
                   | Some rm0 ->
                     if Int.eq op Int.zero
                     then Some (Pand (rd0, rn0, (SOreg rm0)))
                     else if Int.eq op (Int.repr ((fun p->2*p) 1))
                          then Some (Porr (rd0, rn0, (SOreg rm0)))
                          else if Int.eq op
                                    (Int.repr ((fun p->2*p) ((fun p->2*p) 1)))
                               then Some (Peor (rd0, rn0, (SOreg rm0)))
                               else if Int.eq op
                                         (Int.repr ((fun p->1+2*p)
                                           ((fun p->2*p) ((fun p->1+2*p) 1))))
                                    then Some (Psub (rd0, rn0, (SOreg rm0)))
                                    else if Int.eq op
                                              (Int.repr ((fun p->2*p)
                                                ((fun p->1+2*p)
                                                ((fun p->1+2*p) 1))))
                                         then Some (Prsb (rd0, rn0, (SOreg
                                                rm0)))
                                         else None
                   | None -> None)
                | None -> None)
             | None -> None)
       else None
  else if Int.eq lo_op15_11
            (Int.repr ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
              ((fun p->1+2*p) 1)))))
       then let i =
              decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ 0))))))))))
                (Stdlib.succ 0)
            in
            let lo_op9 =
              decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ 0))))))))) (Stdlib.succ 0)
            in
            let op =
              decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ 0)))))
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ 0))))
            in
            let lo_opS =
              decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ 0)))) (Stdlib.succ 0)
            in
            let imm4 =
              decode_arm32 ins_lo 0 (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ 0))))
            in
            let rn = int2ireg imm4 in
            let hi_op15 =
              decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ 0))))))))))))))) (Stdlib.succ 0)
            in
            let imm3 =
              decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ 0)))))))))))) (Stdlib.succ
                (Stdlib.succ (Stdlib.succ 0)))
            in
            let rd =
              int2ireg
                (decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
                  (Stdlib.succ (Stdlib.succ (Stdlib.succ
                  (Stdlib.succ (Stdlib.succ (Stdlib.succ
                  0)))))))) (Stdlib.succ (Stdlib.succ
                  (Stdlib.succ (Stdlib.succ 0)))))
            in
            let imm8 =
              decode_arm32 ins_hi 0 (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
            in
            let imm12 =
              encode_arm32 i
                (encode_arm32 imm3 imm8 (Stdlib.succ (Stdlib.succ
                  (Stdlib.succ (Stdlib.succ (Stdlib.succ
                  (Stdlib.succ (Stdlib.succ (Stdlib.succ
                  0))))))))) (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                0)))))))))))
            in
            let imm16 =
              encode_arm32 imm4 imm12 (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ (Stdlib.succ (Stdlib.succ
                (Stdlib.succ 0))))))))))))
            in
            if Int.eq hi_op15 Int.zero
            then if (&&)
                      (Int.eq op
                        (Int.repr ((fun p->1+2*p) ((fun p->2*p)
                          ((fun p->1+2*p) 1)))))
                      ((&&) (Int.eq lo_op9 Int.zero) (Int.eq lo_opS Int.one))
                 then (match rn with
                       | Some rn0 ->
                         (match rd with
                          | Some _ -> None
                          | None ->
                            if thumb_constant_range_imm12 i imm3 imm8
                            then Some (Pcmp (rn0, (SOimm imm12)))
                            else None)
                       | None -> None)
                 else (match rd with
                       | Some rd0 ->
                         if (&&) (Int.eq lo_op9 Int.one)
                              (Int.eq lo_opS Int.zero)
                         then if Int.eq op (Int.repr ((fun p->2*p) 1))
                              then if (&&) (Int.cmp Cle Int.zero imm16)
                                        (Int.cmp Cle imm16
                                          (Int.repr ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            1)))))))))))))))))
                                   then Some (Pmovw (rd0, imm16))
                                   else None
                              else if Int.eq op
                                        (Int.repr ((fun p->2*p)
                                          ((fun p->1+2*p) 1)))
                                   then if (&&) (Int.cmp Cle Int.zero imm16)
                                             (Int.cmp Cle imm16
                                               (Int.repr ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 ((fun p->1+2*p)
                                                 1)))))))))))))))))
                                        then Some (Pmovt (rd0, imm16))
                                        else None
                                   else None
                         else if (&&) (Int.eq lo_op9 Int.zero)
                                   (Int.eq lo_opS Int.zero)
                              then if thumb_constant_range_imm12 i imm3 imm8
                                   then (match rn with
                                         | Some rn0 ->
                                           if Int.eq op Int.zero
                                           then Some (Pand (rd0, rn0, (SOimm
                                                  imm12)))
                                           else if Int.eq op
                                                     (Int.repr ((fun p->2*p)
                                                       1))
                                                then Some (Porr (rd0, rn0,
                                                       (SOimm imm12)))
                                                else if Int.eq op
                                                          (Int.repr
                                                            ((fun p->2*p)
                                                            ((fun p->2*p) 1)))
                                                     then Some (Peor (rd0,
                                                            rn0, (SOimm
                                                            imm12)))
                                                     else if Int.eq op
                                                               (Int.repr
                                                                 ((fun p->2*p)
                                                                 ((fun p->2*p)
                                                                 ((fun p->2*p)
                                                                 1))))
                                                          then Some (Padd
                                                                 (rd0, rn0,
                                                                 (SOimm
                                                                 imm12)))
                                                          else if Int.eq op
                                                                    (Int.repr
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    1))))
                                                               then Some
                                                                    (Psub
                                                                    (rd0,
                                                                    rn0,
                                                                    (SOimm
                                                                    imm12)))
                                                               else if 
                                                                    Int.eq op
                                                                    (Int.repr
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->1+2*p)
                                                                    1))))
                                                                    then 
                                                                    Some
                                                                    (Prsb
                                                                    (rd0,
                                                                    rn0,
                                                                    (SOimm
                                                                    imm12)))
                                                                    else None
                                         | None -> None)
                                   else None
                              else None
                       | None -> None)
            else None
       else if Int.eq lo_op15_11
                 (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                   ((fun p->1+2*p) 1)))))
            then let lo_op10_9 =
                   decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ 0))))))))) (Stdlib.succ
                     (Stdlib.succ 0))
                 in
                 let op =
                   decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     0))))) (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ 0))))
                 in
                 let lo_opS =
                   decode_arm32 ins_lo (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ 0)))) (Stdlib.succ
                     0)
                 in
                 let rn =
                   int2ireg
                     (decode_arm32 ins_lo 0 (Stdlib.succ (Stdlib.succ
                       (Stdlib.succ (Stdlib.succ 0)))))
                 in
                 let hi_op15_12 =
                   decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ 0)))))))))))) (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))
                 in
                 let rt = int2ireg hi_op15_12 in
                 let imm12 =
                   decode_arm32 ins_hi 0 (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ 0))))))))))))
                 in
                 let rd =
                   int2ireg
                     (decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
                       (Stdlib.succ (Stdlib.succ (Stdlib.succ
                       (Stdlib.succ (Stdlib.succ (Stdlib.succ
                       0)))))))) (Stdlib.succ (Stdlib.succ
                       (Stdlib.succ (Stdlib.succ 0)))))
                 in
                 let hi_op7_4 =
                   decode_arm32 ins_hi (Stdlib.succ (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ 0)))) (Stdlib.succ
                     (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))
                 in
                 let rm =
                   int2ireg
                     (decode_arm32 ins_hi 0 (Stdlib.succ (Stdlib.succ
                       (Stdlib.succ (Stdlib.succ 0)))))
                 in
                 if Int.eq lo_op10_9 Int.zero
                 then if Int.eq op (Int.repr ((fun p->2*p) 1))
                      then (match rn with
                            | Some rn0 ->
                              (match rt with
                               | Some rt0 ->
                                 (match rm with
                                  | Some rm0 ->
                                    (match rd with
                                     | Some rd0 ->
                                       if (&&) (ireg_eqb rd0 IR0)
                                            (Int.eq hi_op7_4 Int.zero)
                                       then if Int.eq lo_opS Int.zero
                                            then Some (Pstr (rt0, rn0, (SOreg
                                                   rm0)))
                                            else if Int.eq lo_opS Int.one
                                                 then Some (Pldr (rt0, rn0,
                                                        (SOreg rm0)))
                                                 else None
                                       else None
                                     | None -> None)
                                  | None -> None)
                               | None -> None)
                            | None -> None)
                      else if Int.eq op
                                (Int.repr ((fun p->2*p) ((fun p->1+2*p) 1)))
                           then if (&&) (Int.cmp Cle Int.zero imm12)
                                     (Int.cmp Cle imm12
                                       (Int.repr ((fun p->1+2*p)
                                         ((fun p->1+2*p) ((fun p->1+2*p)
                                         ((fun p->1+2*p) ((fun p->1+2*p)
                                         ((fun p->1+2*p) ((fun p->1+2*p)
                                         ((fun p->1+2*p) ((fun p->1+2*p)
                                         ((fun p->1+2*p) ((fun p->1+2*p)
                                         1)))))))))))))
                                then (match rn with
                                      | Some rn0 ->
                                        (match rt with
                                         | Some rt0 ->
                                           if Int.eq lo_opS Int.zero
                                           then Some (Pstr (rt0, rn0, (SOimm
                                                  imm12)))
                                           else if Int.eq lo_opS Int.one
                                                then Some (Pldr (rt0, rn0,
                                                       (SOimm imm12)))
                                                else None
                                         | None -> None)
                                      | None -> None)
                                else None
                           else None
                 else if Int.eq lo_op10_9 Int.one
                      then (match rn with
                            | Some rn0 ->
                              (match rm with
                               | Some rm0 ->
                                 (match rd with
                                  | Some rd0 ->
                                    if Int.eq hi_op15_12
                                         (Int.repr ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           1))))
                                    then if Int.eq hi_op7_4 Int.zero
                                         then if Int.eq lo_opS Int.zero
                                              then if Int.eq op Int.zero
                                                   then Some (Plsl (rd0, rn0,
                                                          rm0))
                                                   else if Int.eq op Int.one
                                                        then Some (Plsr (rd0,
                                                               rn0, rm0))
                                                        else if Int.eq op
                                                                  (Int.repr
                                                                    ((fun p->2*p)
                                                                    1))
                                                             then Some (Pasr
                                                                    (rd0,
                                                                    rn0, rm0))
                                                             else if 
                                                                    Int.eq op
                                                                    (Int.repr
                                                                    ((fun p->2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->2*p)
                                                                    1))))
                                                                  then 
                                                                    Some
                                                                    (Pmul
                                                                    (rd0,
                                                                    rn0, rm0))
                                                                  else None
                                              else None
                                         else if Int.eq hi_op7_4
                                                   (Int.repr ((fun p->1+2*p)
                                                     ((fun p->1+2*p)
                                                     ((fun p->1+2*p) 1))))
                                              then if (&&)
                                                        ((&&)
                                                          (Int.eq op
                                                            (Int.repr
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              1)))))
                                                          (Int.eq lo_opS
                                                            Int.one))
                                                        ((&&)
                                                          (ireg_eqb rd0 IR0)
                                                          ((&&)
                                                            (ireg_eqb rm0 IR0)
                                                            (ireg_eqb rn0 IR1)))
                                                   then Some Pudiv
                                                   else None
                                              else None
                                    else None
                                  | None -> None)
                               | None -> None)
                            | None -> None)
                      else None
            else None

(** val find_instr : val0 -> Mem.mem -> (instruction * bool) option **)

let find_instr v m0 =
  match Mem.loadv Mint16unsigned m0 v with
  | Some v0 ->
    (match v0 with
     | Vint op ->
       if is_thumb2 op
       then (match Mem.loadv Mint16unsigned m0
                     (Val.add v (Vint (Int.repr ((fun p->2*p) 1)))) with
             | Some v1 ->
               (match v1 with
                | Vint i ->
                  option_map (fun x -> (x, true)) (decode_thumb2 op i)
                | _ -> None)
             | None -> None)
       else option_map (fun x -> (x, false)) (decode_thumb op)
     | _ -> None)
  | None -> None

(** val isize : int **)

let isize =
  Ptrofs.repr ((fun p->2*p) 1)

(** val wsize : int **)

let wsize =
  Ptrofs.repr ((fun p->2*p) ((fun p->2*p) 1))

type sreg =
| Sreg of preg
| Ssp

type sval =
| Sval of sreg * int
| Rval of sreg

type aval =
| Cval of val0
| Aval of sval

(** val typ_of_preg : preg -> typ **)

let typ_of_preg = function
| FR _ -> Tany64
| _ -> Tany32

(** val typ_of_sreg : sreg -> typ **)

let typ_of_sreg = function
| Sreg r -> typ_of_preg r
| Ssp -> Tany32

(** val typ_of_sval : sval -> typ **)

let typ_of_sval = function
| Sval (_, _) -> Tany32
| Rval p -> typ_of_sreg p

type aregset = aval Pregmap.t

type rchunk =
| Cany32
| Cint32

type amemval =
| Cmemval of memval
| Amemval of sval * rchunk * int

(** val sreg_eq : sreg -> sreg -> bool **)

let sreg_eq r r' =
  match r with
  | Sreg r1 ->
    (match r' with
     | Sreg r2 -> proj_sumbool (preg_eq r1 r2)
     | Ssp -> false)
  | Ssp -> (match r' with
            | Sreg _ -> false
            | Ssp -> true)

(** val sval_eq : sval -> sval -> bool **)

let sval_eq sv sv' =
  match sv with
  | Sval (b, o) ->
    (match sv' with
     | Sval (b', o') -> (&&) (sreg_eq b b') (Ptrofs.eq o o')
     | Rval _ -> false)
  | Rval r -> (match sv' with
               | Sval (_, _) -> false
               | Rval r' -> sreg_eq r r')

(** val aval_eq : aval -> aval -> bool **)

let aval_eq v1 v2 =
  match v1 with
  | Cval v3 ->
    (match v2 with
     | Cval v4 -> proj_sumbool (Val.eq v3 v4)
     | Aval _ -> false)
  | Aval v3 -> (match v2 with
                | Cval _ -> false
                | Aval v4 -> sval_eq v3 v4)

(** val find_instr0 : aval -> Mem.mem -> (instruction * bool) option **)

let find_instr0 v m0 =
  match v with
  | Cval v0 -> find_instr v0 m0
  | Aval _ -> None

(** val encode_sval_fragments : rchunk -> sval -> amemval list **)

let encode_sval_fragments rc r =
  (Amemval (r, rc, (Stdlib.succ (Stdlib.succ (Stdlib.succ
    0))))) :: ((Amemval (r, rc, (Stdlib.succ (Stdlib.succ
    0)))) :: ((Amemval (r, rc, (Stdlib.succ 0))) :: ((Amemval (r, rc,
    0)) :: [])))

(** val rchunk_of_chunk : memory_chunk -> rchunk option **)

let rchunk_of_chunk = function
| Mint32 -> Some Cint32
| Many32 -> Some Cany32
| _ -> None

(** val encode_sval : memory_chunk -> sval -> amemval list option **)

let encode_sval chunk r =
  match typ_of_sval r with
  | Tany32 ->
    (match rchunk_of_chunk chunk with
     | Some rc -> Some (encode_sval_fragments rc r)
     | None -> None)
  | _ -> None

(** val encode_aval : memory_chunk -> aval -> amemval list option **)

let encode_aval chunk = function
| Cval v0 -> Some (map (fun x -> Cmemval x) (encode_val chunk v0))
| Aval r -> encode_sval chunk r

(** val setN0 : amemval list -> int -> amemval ZMap.t -> amemval ZMap.t **)

let rec setN0 vl p c =
  match vl with
  | [] -> c
  | v :: vl' -> setN0 vl' (Z.add p 1) (ZMap.set p v c)

(** val getN0 : int -> int -> amemval ZMap.t -> amemval list **)

let rec getN0 n0 p c =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> [])
    (fun n' -> (ZMap.get p c) :: (getN0 n' (Z.add p 1) c))
    n0

(** val astack_store :
    memory_chunk -> Mem.mem -> amemval ZMap.t -> block -> int -> aval ->
    amemval ZMap.t option **)

let astack_store chunk m0 mb b ofs v =
  if Mem.valid_access_dec m0 chunk b ofs Writable
  then (match encode_aval chunk v with
        | Some ec -> Some (setN0 ec ofs mb)
        | None -> None)
  else None

type amemSplit =
| SplitErr
| SplitNIL
| SplitC of memval list
| SplitA of ((sval * rchunk) * int) list

(** val cons_amemval : amemval -> amemSplit -> amemSplit **)

let cons_amemval m0 = function
| SplitErr -> SplitErr
| SplitNIL ->
  (match m0 with
   | Cmemval x -> SplitC (x :: [])
   | Amemval (s0, rc, o) -> SplitA (((s0, rc), o) :: []))
| SplitC l ->
  (match m0 with
   | Cmemval x -> SplitC (x :: l)
   | Amemval (_, _, _) -> SplitErr)
| SplitA l ->
  (match m0 with
   | Cmemval _ -> SplitErr
   | Amemval (s0, rc, o) -> SplitA (((s0, rc), o) :: l))

(** val rchunk_eq : rchunk -> rchunk -> bool **)

let rchunk_eq x y =
  match x with
  | Cany32 -> (match y with
               | Cany32 -> true
               | Cint32 -> false)
  | Cint32 -> (match y with
               | Cany32 -> false
               | Cint32 -> true)

(** val split_amemval : amemval list -> amemSplit **)

let rec split_amemval = function
| [] -> SplitNIL
| e :: l0 -> cons_amemval e (split_amemval l0)

(** val check_value0 :
    int -> sval -> rchunk -> ((sval * rchunk) * int) list -> bool **)

let rec check_value0 n0 v rc vl =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> match vl with
              | [] -> true
              | _ :: _ -> false)
    (fun m0 ->
    match vl with
    | [] -> false
    | p :: vl' ->
      let (p0, idx) = p in
      let (v', rc') = p0 in
      (&&)
        ((&&) ((&&) (sval_eq v v') (proj_sumbool (rchunk_eq rc rc')))
          ((=) m0 idx)) (check_value0 m0 v rc vl'))
    n0

(** val proj_value0 :
    memory_chunk -> ((sval * rchunk) * int) list -> aval option **)

let proj_value0 chunk vl =
  match rchunk_of_chunk chunk with
  | Some rc0 ->
    (match vl with
     | [] -> None
     | p :: _ ->
       let (p0, _) = p in
       let (v, rc) = p0 in
       if (&&) (proj_sumbool (rchunk_eq rc0 rc))
            (check_value0 (Stdlib.succ (Stdlib.succ (Stdlib.succ
              (Stdlib.succ 0)))) v rc vl)
       then Some (Aval v)
       else None)
  | None -> None

(** val decode_val0 : memory_chunk -> amemval list -> aval option **)

let decode_val0 chunk vl =
  match split_amemval vl with
  | SplitC l -> Some (Cval (decode_val chunk l))
  | SplitA l -> proj_value0 chunk l
  | _ -> None

(** val astack_load :
    memory_chunk -> Mem.mem -> amemval ZMap.t -> block -> int -> aval option **)

let astack_load chunk m0 mb b ofs =
  if Mem.valid_access_dec m0 chunk b ofs Readable
  then decode_val0 chunk (getN0 (size_chunk_nat chunk) ofs mb)
  else None

type astack = amemval ZMap.t

type aoutcome =
| ANext of aregset * astack * block * Mem.mem
| AStuck

(** val alift1 : (val0 -> val0) -> aval -> aval **)

let alift1 f = function
| Cval v0 -> Cval (f v0)
| Aval _ -> Cval Vundef

(** val ashl : aval -> int -> aval **)

let ashl v i =
  alift1 (fun v0 -> Val.shl v0 (Vint i)) v

(** val ashru : aval -> int -> aval **)

let ashru v i =
  alift1 (fun v0 -> Val.shru v0 (Vint i)) v

(** val ashr : aval -> int -> aval **)

let ashr v i =
  alift1 (fun v0 -> Val.shr v0 (Vint i)) v

(** val aror : aval -> int -> aval **)

let aror v i =
  alift1 (fun v0 -> Val.ror v0 (Vint i)) v

(** val aeval_shift_op : shift_op -> aregset -> aval **)

let aeval_shift_op so rs =
  match so with
  | SOimm n0 -> Cval (Vint n0)
  | SOreg r -> rs (IR r)
  | SOlsl (r, n0) -> ashl (rs (IR r)) n0
  | SOlsr (r, n0) -> ashru (rs (IR r)) n0
  | SOasr (r, n0) -> ashr (rs (IR r)) n0
  | SOror (r, n0) -> aror (rs (IR r)) n0

(** val aadd : aval -> aval -> aval option **)


let string_of_preg pr =
  match pr with
  | IR ir -> string_of_ireg ir
  | PC -> "PC"
  | _ -> "preg: not yet"

let string_of_sreg sr =
  match sr with
  | Sreg pr -> string_of_preg pr
  | Ssp -> "New SP"

let string_of_reg_val a =
  match a with
  | Cval v -> string_of_val0 v
  | Aval s ->
    match s with
    | Sval (sr, i) -> ("SVal " ^ (string_of_sreg sr) ^ ", " ^ (string_of_int i))
    | Rval sr -> ("RVal " ^ (string_of_sreg sr))
    
let print_aregset rs =
  let _ = print_endline "****************arm32 regs***************" in
  let _ = print_endline ("R0=  " ^ (string_of_reg_val (rs (IR IR0)))) in
  let _ = print_endline ("R1=  " ^ (string_of_reg_val (rs (IR IR1)))) in
  let _ = print_endline ("R2=  " ^ (string_of_reg_val (rs (IR IR2)))) in
  let _ = print_endline ("R3=  " ^ (string_of_reg_val (rs (IR IR3)))) in
  let _ = print_endline ("R4=  " ^ (string_of_reg_val (rs (IR IR4)))) in
  let _ = print_endline ("R5=  " ^ (string_of_reg_val (rs (IR IR5)))) in
  let _ = print_endline ("R6=  " ^ (string_of_reg_val (rs (IR IR6)))) in
  let _ = print_endline ("R7=  " ^ (string_of_reg_val (rs (IR IR7)))) in
  let _ = print_endline ("R8=  " ^ (string_of_reg_val (rs (IR IR8)))) in
  let _ = print_endline ("R9=  " ^ (string_of_reg_val (rs (IR IR9)))) in
  let _ = print_endline ("R10= " ^ (string_of_reg_val (rs (IR IR10)))) in
  let _ = print_endline ("FP=  " ^ (string_of_reg_val (rs (IR IR11)))) in
  let _ = print_endline ("IP=  " ^ (string_of_reg_val (rs (IR IR12)))) in
  let _ = print_endline ("SP=  " ^ (string_of_reg_val (rs (IR IR13)))) in
  let _ = print_endline ("LR=  " ^ (string_of_reg_val (rs (IR IR14)))) in
  let _ = print_endline ("PC=  " ^ (string_of_reg_val (rs PC))) in
    print_endline "****************arm32 regs***************\n\n"

let aadd v1 v2 =
  match v1 with
  | Cval v3 ->
    (match v3 with
     | Vint i ->
       (match v2 with
        | Cval v4 -> Some (Cval (Val.add v3 v4))
        | Aval v ->
          (match v with
           | Sval (r, o) ->
             Some (Aval (Sval (r, (Ptrofs.add o (Ptrofs.of_int i)))))
           | Rval _ -> None))
     | _ ->
       (match v2 with
        | Cval v4 -> Some (Cval (Val.add v3 v4))
        | Aval _ -> None))
  | Aval v ->
    (match v with
     | Sval (r, o) ->
       (match v2 with
        | Cval v0 ->
          (match v0 with
           | Vint i ->
             Some (Aval (Sval (r, (Ptrofs.add o (Ptrofs.of_int i)))))
           | _ -> None)
        | Aval _ -> None)
     | Rval _ -> None)

(** val alift2 : (val0 -> val0 -> val0) -> aval -> aval -> aval **)

let alift2 f v1 v2 =
  match v1 with
  | Cval v3 ->
    (match v2 with
     | Cval v4 -> Cval (f v3 v4)
     | Aval _ -> Cval Vundef)
  | Aval _ -> Cval Vundef

(** val aoffset_ptr : aval -> int -> aval **)

let aoffset_ptr v ofs =
  match v with
  | Cval v0 -> Cval (Val.offset_ptr v0 ofs)
  | Aval v0 ->
    (match v0 with
     | Sval (r, o) -> Aval (Sval (r, (Ptrofs.add o ofs)))
     | Rval _ -> Cval Vundef)

(** val agoto_label :
    int -> aregset -> block -> astack -> Mem.mem -> aoutcome **)

let agoto_label lbl rs b stk m0 =
  ANext
    ((Pregmap.set PC
       (aoffset_ptr (rs PC) (Ptrofs.add (Ptrofs.mul lbl isize) wsize)) rs),
    stk, b, m0)

(** val size_of_bool : bool -> int **)

let size_of_bool = function
| true -> wsize
| false -> isize

(** val anextinstr : bool -> aregset -> PregEq.t -> aval **)

let anextinstr is_32bits rs =
  Pregmap.set PC (aoffset_ptr (rs PC) (size_of_bool is_32bits)) rs

(** val incrinstr : aregset -> PregEq.t -> aval **)

let incrinstr rs =
  Pregmap.set PC (aoffset_ptr (rs PC) Ptrofs.one) rs

(** val aundef_flags : aregset -> aregset **)

let aundef_flags rs r = match r with
| CR _ -> Cval Vundef
| _ -> rs r

(** val anextinstr_nf : bool -> aregset -> PregEq.t -> aval **)

let anextinstr_nf is_wide rs =
  anextinstr is_wide (aundef_flags rs)

(** val acompare_int :
    aregset -> aval -> aval -> Mem.mem -> PregEq.t -> aval **)

let acompare_int rs v1 v2 m0 =
  Pregmap.set (CR CV) (alift2 Val.sub_overflow v1 v2)
    (Pregmap.set (CR CC) (alift2 (Val.cmpu (Mem.valid_pointer m0) Cge) v1 v2)
      (Pregmap.set (CR CZ)
        (alift2 (Val.cmpu (Mem.valid_pointer m0) Ceq) v1 v2)
        (Pregmap.set (CR CN) (alift1 Val.negative (alift2 Val.sub v1 v2)) rs)))

(** val get_offset : sval -> int **)

let get_offset = function
| Sval (_, ofs) -> ofs
| Rval _ -> Ptrofs.zero

(** val get_register : sval -> sreg **)

let get_register = function
| Sval (r, _) -> r
| Rval r -> r

(** val get_stack_offset : sval -> int option **)

let get_stack_offset v =
  if sreg_eq Ssp (get_register v) then Some (get_offset v) else None

(** val aexec_load :
    bool -> memory_chunk -> aval option -> preg -> aregset -> astack -> block
    -> Mem.mem -> aoutcome **)

let aexec_load is_32bits chunk addr r rs stk b m0 =
  match addr with
  | Some a ->
    (match a with
     | Cval addr' ->
       (match Mem.loadv chunk m0 addr' with
        | Some v ->
          ANext ((anextinstr is_32bits (Pregmap.set r (Cval v) rs)), stk, b,
            m0)
        | None -> AStuck)
     | Aval sv ->
       (match get_stack_offset sv with
        | Some o ->
          (match astack_load chunk m0 stk b (Ptrofs.unsigned o) with
           | Some v ->
             ANext ((anextinstr is_32bits (Pregmap.set r v rs)), stk, b, m0)
           | None -> AStuck)
        | None -> AStuck))
  | None -> AStuck

(** val is_stack_pointer : block -> aval -> int option **)

let is_stack_pointer stkb = function
| Cval a ->
  (match a with
   | Vptr (b, o) -> if eq_block b stkb then Some o else None
   | _ -> None)
| Aval sv -> get_stack_offset sv

(** val aexec_store' :
    memory_chunk -> aval option -> preg -> aregset -> astack -> block ->
    Mem.mem -> aoutcome **)

let aexec_store' chunk addr r rs stk b m0 =
  match addr with
  | Some av ->
    (match is_stack_pointer b av with
     | Some o ->
       (match astack_store chunk m0 stk b (Ptrofs.unsigned o) (rs r) with
        | Some stk' -> ANext (rs, stk', b, m0)
        | None -> AStuck)
     | None ->
       (match av with
        | Cval addr' ->
          (match rs r with
           | Cval v ->
             (match Mem.storev chunk m0 addr' v with
              | Some m' -> ANext (rs, stk, b, m')
              | None -> AStuck)
           | Aval _ -> AStuck)
        | Aval _ -> AStuck))
  | None -> AStuck

(** val aexec_store :
    bool -> memory_chunk -> aval option -> preg -> aregset -> astack -> block
    -> Mem.mem -> aoutcome **)

let aexec_store is_32bits chunk addr r rs stk b m0 =
  match aexec_store' chunk addr r rs stk b m0 with
  | ANext (rs', stk', stkb, m') ->
    ANext ((anextinstr is_32bits rs'), stk', stkb, m')
  | AStuck -> AStuck

(** val adivs : aval -> aval -> aval option **)

let adivs v1 v2 =
  match v1 with
  | Cval v3 ->
    (match v2 with
     | Cval v4 ->
       (match Val.divs v3 v4 with
        | Some v -> Some (Cval v)
        | None -> None)
     | Aval _ -> None)
  | Aval _ -> None

(** val adivu : aval -> aval -> aval option **)

let adivu v1 v2 =
  match v1 with
  | Cval v3 ->
    (match v2 with
     | Cval v4 ->
       (match Val.divu v3 v4 with
        | Some v -> Some (Cval v)
        | None -> None)
     | Aval _ -> None)
  | Aval _ -> None

(** val update_regset : (preg * aval) list -> aregset -> aregset **)

let rec update_regset vl rs =
  match vl with
  | [] -> rs
  | p :: vl0 -> let (r, v) = p in Pregmap.set r v (update_regset vl0 rs)

(** val init_regset : (preg * val0) list -> aregset -> aregset **)

let init_regset vl rs =
  update_regset (map (fun pat -> let (r, v) = pat in (r, (Cval v))) vl) rs

(** val acompare_float_update : aval -> aval -> (preg * aval) list **)

let acompare_float_update v1 v2 =
  match v1 with
  | Cval v ->
    (match v with
     | Vfloat f1 ->
       (match v2 with
        | Cval v0 ->
          (match v0 with
           | Vfloat f2 ->
             ((CR CV), (Cval
               (Val.of_bool
                 (negb
                   ((||) ((||) (Float.cmp Ceq f1 f2) (Float.cmp Clt f1 f2))
                     (Float.cmp Cgt f1 f2)))))) :: (((CR CC), (Cval
               (Val.of_bool (negb (Float.cmp Clt f1 f2))))) :: (((CR CZ),
               (Cval (Val.of_bool (Float.cmp Ceq f1 f2)))) :: (((CR CN),
               (Cval (Val.of_bool (Float.cmp Clt f1 f2)))) :: [])))
           | _ ->
             ((CR CV), (Cval Vundef)) :: (((CR CC), (Cval Vundef)) :: (((CR
               CZ), (Cval Vundef)) :: (((CR CN), (Cval Vundef)) :: []))))
        | Aval _ ->
          ((CR CV), (Cval Vundef)) :: (((CR CC), (Cval Vundef)) :: (((CR CZ),
            (Cval Vundef)) :: (((CR CN), (Cval Vundef)) :: []))))
     | _ ->
       ((CR CV), (Cval Vundef)) :: (((CR CC), (Cval Vundef)) :: (((CR CZ),
         (Cval Vundef)) :: (((CR CN), (Cval Vundef)) :: []))))
  | Aval _ ->
    ((CR CV), (Cval Vundef)) :: (((CR CC), (Cval Vundef)) :: (((CR CZ), (Cval
      Vundef)) :: (((CR CN), (Cval Vundef)) :: [])))

(** val acompare_float : aregset -> aval -> aval -> aregset **)

let acompare_float rs v1 v2 =
  update_regset (acompare_float_update v1 v2) rs

(** val acompare_float32_update : aval -> aval -> (preg * aval) list **)

let acompare_float32_update v1 v2 =
  match v1 with
  | Cval v ->
    (match v with
     | Vsingle f1 ->
       (match v2 with
        | Cval v0 ->
          (match v0 with
           | Vsingle f2 ->
             ((CR CV), (Cval
               (Val.of_bool
                 (negb
                   ((||)
                     ((||) (Float32.cmp Ceq f1 f2) (Float32.cmp Clt f1 f2))
                     (Float32.cmp Cgt f1 f2)))))) :: (((CR CC), (Cval
               (Val.of_bool (negb (Float32.cmp Clt f1 f2))))) :: (((CR CZ),
               (Cval (Val.of_bool (Float32.cmp Ceq f1 f2)))) :: (((CR CN),
               (Cval (Val.of_bool (Float32.cmp Clt f1 f2)))) :: [])))
           | _ ->
             ((CR CV), (Cval Vundef)) :: (((CR CC), (Cval Vundef)) :: (((CR
               CZ), (Cval Vundef)) :: (((CR CN), (Cval Vundef)) :: []))))
        | Aval _ ->
          ((CR CV), (Cval Vundef)) :: (((CR CC), (Cval Vundef)) :: (((CR CZ),
            (Cval Vundef)) :: (((CR CN), (Cval Vundef)) :: []))))
     | _ ->
       ((CR CV), (Cval Vundef)) :: (((CR CC), (Cval Vundef)) :: (((CR CZ),
         (Cval Vundef)) :: (((CR CN), (Cval Vundef)) :: []))))
  | Aval _ ->
    ((CR CV), (Cval Vundef)) :: (((CR CC), (Cval Vundef)) :: (((CR CZ), (Cval
      Vundef)) :: (((CR CN), (Cval Vundef)) :: [])))

(** val acompare_float32 : aregset -> aval -> aval -> aregset **)

let acompare_float32 rs v1 v2 =
  update_regset (acompare_float32_update v1 v2) rs

(** val amaketotal : aval option -> aval **)

let amaketotal = function
| Some v -> v
| None -> Cval Vundef

(** val alifto1 : (val0 -> val0 option) -> aval -> aval option **)

let alifto1 f = function
| Cval v0 -> option_map (fun x -> Cval x) (f v0)
| Aval _ -> None

(** val eval_unary_cond : (int -> bool) -> aregset -> preg -> bool option **)

let eval_unary_cond f rs r =
  match rs r with
  | Cval v -> (match v with
               | Vint n0 -> Some (f n0)
               | _ -> None)
  | Aval _ -> None

(** val eval_binary_cond :
    (int -> int -> bool) -> aregset -> preg -> preg -> bool option **)

let eval_binary_cond f rs r1 r2 =
  match rs r1 with
  | Cval v ->
    (match v with
     | Vint c ->
       (match rs r2 with
        | Cval v0 -> (match v0 with
                      | Vint z0 -> Some (f c z0)
                      | _ -> None)
        | Aval _ -> None)
     | _ -> None)
  | Aval _ -> None

(** val eval_ternary_cond :
    (int -> int -> int -> bool) -> aregset -> preg -> preg -> preg -> bool
    option **)

let eval_ternary_cond f rs r1 r2 r3 =
  match rs r1 with
  | Cval v ->
    (match v with
     | Vint c -> eval_binary_cond (f c) rs r2 r3
     | _ -> None)
  | Aval _ -> None

(** val aeval_testcond : testcond -> aregset -> bool option **)

let aeval_testcond c rs =
  match c with
  | TCeq -> eval_unary_cond (Int.eq Int.one) rs (CR CZ)
  | TCne -> eval_unary_cond (Int.eq Int.zero) rs (CR CZ)
  | TChs -> eval_unary_cond (Int.eq Int.one) rs (CR CC)
  | TClo -> eval_unary_cond (Int.eq Int.zero) rs (CR CC)
  | TCmi -> eval_unary_cond (Int.eq Int.one) rs (CR CN)
  | TCpl -> eval_unary_cond (Int.eq Int.zero) rs (CR CN)
  | TChi ->
    eval_binary_cond (fun c0 z0 ->
      (&&) (Int.eq c0 Int.one) (Int.eq z0 Int.zero)) rs (CR CC) (CR CZ)
  | TCls ->
    eval_binary_cond (fun c0 z0 ->
      (||) (Int.eq c0 Int.zero) (Int.eq z0 Int.one)) rs (CR CC) (CR CZ)
  | TCge ->
    eval_binary_cond (fun o s -> Int.eq (Int.xor o s) Int.zero) rs (CR CV)
      (CR CN)
  | TClt ->
    eval_binary_cond (fun o s -> Int.eq (Int.xor o s) Int.one) rs (CR CV) (CR
      CN)
  | TCgt ->
    eval_ternary_cond (fun o s z0 ->
      (&&) (Int.eq (Int.xor o s) Int.zero) (Int.eq z0 Int.zero)) rs (CR CV)
      (CR CN) (CR CZ)
  | TCle ->
    eval_ternary_cond (fun o s z0 ->
      (||) (Int.eq (Int.xor o s) Int.one) (Int.eq z0 Int.one)) rs (CR CV) (CR
      CN) (CR CZ)

(** val aexec_instr :
    bool -> instruction -> aregset -> astack -> block -> Mem.mem -> aoutcome **)

let aexec_instr is_32bits i rs astk b m0 =
  match i with
  | Padd (r1, r2, so) ->
    (match aadd (rs (IR r2)) (aeval_shift_op so rs) with
     | Some v ->
       ANext ((anextinstr_nf is_32bits (Pregmap.set (IR r1) v rs)), astk, b,
         m0)
     | None -> AStuck)
  | Pand (r1, r2, so) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1)
           (alift2 Val.coq_and (rs (IR r2)) (aeval_shift_op so rs)) rs)),
      astk, b, m0)
  | Pasr (r1, r2, r3) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1) (alift2 Val.shr (rs (IR r2)) (rs (IR r3))) rs)),
      astk, b, m0)
  | Pb lbl -> agoto_label lbl rs b astk m0
  | Pbc (cond0, lbl) ->
    (match aeval_testcond cond0 rs with
     | Some b0 ->
       if b0
       then agoto_label lbl rs b astk m0
       else ANext ((anextinstr is_32bits rs), astk, b, m0)
     | None -> AStuck)
  | Pbreg r -> ANext ((Pregmap.set PC (rs (IR r)) rs), astk, b, m0)
  | Pblreg r ->
    ANext
      ((Pregmap.set PC (rs (IR r))
         (Pregmap.set (IR IR14)
           (aoffset_ptr (rs PC) (size_of_bool is_32bits)) rs)), astk, b, m0)
  | Pbic (r1, r2, so) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1)
           (alift2 Val.coq_and (rs (IR r2))
             (alift1 Val.notint (aeval_shift_op so rs))) rs)), astk, b, m0)
  | Pcmp (r1, so) ->
    ANext
      ((anextinstr is_32bits
         (acompare_int rs (rs (IR r1)) (aeval_shift_op so rs) m0)), astk, b,
      m0)
  | Pcmn (r1, so) ->
    ANext
      ((anextinstr is_32bits
         (acompare_int rs (rs (IR r1))
           (alift1 Val.neg (aeval_shift_op so rs)) m0)), astk, b, m0)
  | Peor (r1, r2, so) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1)
           (alift2 Val.xor (rs (IR r2)) (aeval_shift_op so rs)) rs)), astk,
      b, m0)
  | Pldr (r1, r2, sa) ->
    aexec_load is_32bits Mint32 (aadd (rs (IR r2)) (aeval_shift_op sa rs))
      (IR r1) rs astk b m0
  | Pldr_a (r1, r2, sa) ->
    aexec_load is_32bits Many32 (aadd (rs (IR r2)) (aeval_shift_op sa rs))
      (IR r1) rs astk b m0
  | Pldrb (r1, r2, sa) ->
    aexec_load is_32bits Mint8unsigned
      (aadd (rs (IR r2)) (aeval_shift_op sa rs)) (IR r1) rs astk b m0
  | Pldrh (r1, r2, sa) ->
    aexec_load is_32bits Mint16unsigned
      (aadd (rs (IR r2)) (aeval_shift_op sa rs)) (IR r1) rs astk b m0
  | Pldrsb (r1, r2, sa) ->
    aexec_load is_32bits Mint8signed
      (aadd (rs (IR r2)) (aeval_shift_op sa rs)) (IR r1) rs astk b m0
  | Pldrsh (r1, r2, sa) ->
    aexec_load is_32bits Mint16signed
      (aadd (rs (IR r2)) (aeval_shift_op sa rs)) (IR r1) rs astk b m0
  | Plsl (r1, r2, r3) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1) (alift2 Val.shl (rs (IR r2)) (rs (IR r3))) rs)),
      astk, b, m0)
  | Plsr (r1, r2, r3) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1) (alift2 Val.shru (rs (IR r2)) (rs (IR r3))) rs)),
      astk, b, m0)
  | Pmla (r1, r2, r3, r4) ->
    (match aadd (alift2 Val.mul (rs (IR r2)) (rs (IR r3))) (rs (IR r4)) with
     | Some v ->
       ANext ((anextinstr is_32bits (Pregmap.set (IR r1) v rs)), astk, b, m0)
     | None -> AStuck)
  | Pmov (r1, so) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1) (aeval_shift_op so rs) rs)), astk, b, m0)
  | Pmovw (r, n0) ->
    ANext ((anextinstr is_32bits (Pregmap.set (IR r) (Cval (Vint n0)) rs)),
      astk, b, m0)
  | Pmovt (r, n0) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR r)
           (alift2 Val.coq_or
             (alift2 Val.coq_and (rs (IR r)) (Cval (Vint
               (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                 ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                 ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                 ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                 ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                 1))))))))))))))))))) (Cval (Vint
             (Int.shl n0
               (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                 ((fun p->2*p) 1))))))))) rs)), astk, b, m0)
  | Pmul (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR r1) (alift2 Val.mul (rs (IR r2)) (rs (IR r3))) rs)),
      astk, b, m0)
  | Pmvn (r1, so) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1) (alift1 Val.notint (aeval_shift_op so rs)) rs)),
      astk, b, m0)
  | Porr (r1, r2, so) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1)
           (alift2 Val.coq_or (rs (IR r2)) (aeval_shift_op so rs)) rs)),
      astk, b, m0)
  | Prsb (r1, r2, so) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1)
           (alift2 Val.sub (aeval_shift_op so rs) (rs (IR r2))) rs)), astk,
      b, m0)
  | Psbfx (r1, r2, lsb, sz) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR r1)
           (alift1 (Val.sign_ext (Int.unsigned sz))
             (alift2 Val.shru (rs (IR r2)) (Cval (Vint lsb)))) rs)), astk, b,
      m0)
  | Pstr (r1, r2, sa) ->
    aexec_store is_32bits Mint32 (aadd (rs (IR r2)) (aeval_shift_op sa rs))
      (IR r1) rs astk b m0
  | Pstr_a (r1, r2, sa) ->
    aexec_store is_32bits Many32 (aadd (rs (IR r2)) (aeval_shift_op sa rs))
      (IR r1) rs astk b m0
  | Pstrb (r1, r2, sa) ->
    aexec_store is_32bits Mint8unsigned
      (aadd (rs (IR r2)) (aeval_shift_op sa rs)) (IR r1) rs astk b m0
  | Pstrh (r1, r2, sa) ->
    aexec_store is_32bits Mint16unsigned
      (aadd (rs (IR r2)) (aeval_shift_op sa rs)) (IR r1) rs astk b m0
  | Psdiv ->
    (match adivs (rs (IR IR0)) (rs (IR IR1)) with
     | Some v ->
       ANext
         ((anextinstr is_32bits
            (Pregmap.set (IR IR12) (Cval Vundef)
              (Pregmap.set (IR IR3) (Cval Vundef)
                (Pregmap.set (IR IR2) (Cval Vundef)
                  (Pregmap.set (IR IR1) (Cval Vundef)
                    (Pregmap.set (IR IR0) v rs)))))), astk, b, m0)
     | None -> AStuck)
  | Psmull (rdl, rdh, r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR rdh) (alift2 Val.mulhs (rs (IR r1)) (rs (IR r2)))
           (Pregmap.set (IR rdl) (alift2 Val.mul (rs (IR r1)) (rs (IR r2)))
             rs))), astk, b, m0)
  | Psub (r1, r2, so) ->
    ANext
      ((anextinstr_nf is_32bits
         (Pregmap.set (IR r1)
           (alift2 Val.sub (rs (IR r2)) (aeval_shift_op so rs)) rs)), astk,
      b, m0)
  | Pudiv ->
    (match adivu (rs (IR IR0)) (rs (IR IR1)) with
     | Some v ->
       ANext
         ((anextinstr is_32bits
            (Pregmap.set (IR IR12) (Cval Vundef)
              (Pregmap.set (IR IR3) (Cval Vundef)
                (Pregmap.set (IR IR2) (Cval Vundef)
                  (Pregmap.set (IR IR1) (Cval Vundef)
                    (Pregmap.set (IR IR0) v rs)))))), astk, b, m0)
     | None -> AStuck)
  | Pumull (rdl, rdh, r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR rdh) (alift2 Val.mulhu (rs (IR r1)) (rs (IR r2)))
           (Pregmap.set (IR rdl) (alift2 Val.mul (rs (IR r1)) (rs (IR r2)))
             rs))), astk, b, m0)
  | Pfcpyd (r1, r2) ->
    ANext ((anextinstr is_32bits (Pregmap.set (FR r1) (rs (FR r2)) rs)),
      astk, b, m0)
  | Pfabsd (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift1 Val.absf (rs (FR r2))) rs)), astk, b,
      m0)
  | Pfnegd (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift1 Val.negf (rs (FR r2))) rs)), astk, b,
      m0)
  | Pfaddd (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift2 Val.addf (rs (FR r2)) (rs (FR r3))) rs)),
      astk, b, m0)
  | Pfdivd (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift2 Val.divf (rs (FR r2)) (rs (FR r3))) rs)),
      astk, b, m0)
  | Pfmuld (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift2 Val.mulf (rs (FR r2)) (rs (FR r3))) rs)),
      astk, b, m0)
  | Pfsubd (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift2 Val.subf (rs (FR r2)) (rs (FR r3))) rs)),
      astk, b, m0)
  | Pflid (r1, f) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (Cval (Vfloat f))
           (Pregmap.set (IR IR14) (Cval Vundef) rs))), astk, b, m0)
  | Pfcmpd (r1, r2) ->
    ANext
      ((anextinstr is_32bits (acompare_float rs (rs (FR r1)) (rs (FR r2)))),
      astk, b, m0)
  | Pfcmpzd r1 ->
    ANext
      ((anextinstr is_32bits
         (acompare_float rs (rs (FR r1)) (Cval (Vfloat Float.zero)))), astk,
      b, m0)
  | Pfsitod (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1)
           (amaketotal (alifto1 Val.floatofint (rs (IR r2)))) rs)), astk, b,
      m0)
  | Pfuitod (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1)
           (amaketotal (alifto1 Val.floatofintu (rs (IR r2)))) rs)), astk, b,
      m0)
  | Pftosizd (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR r1)
           (amaketotal (alifto1 Val.intoffloat (rs (FR r2))))
           (Pregmap.set (FR FR6) (Cval Vundef) rs))), astk, b, m0)
  | Pftouizd (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR r1)
           (amaketotal (alifto1 Val.intuoffloat (rs (FR r2))))
           (Pregmap.set (FR FR6) (Cval Vundef) rs))), astk, b, m0)
  | Pfabss (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift1 Val.absfs (rs (FR r2))) rs)), astk, b,
      m0)
  | Pfnegs (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift1 Val.negfs (rs (FR r2))) rs)), astk, b,
      m0)
  | Pfadds (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift2 Val.addfs (rs (FR r2)) (rs (FR r3))) rs)),
      astk, b, m0)
  | Pfdivs (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift2 Val.divfs (rs (FR r2)) (rs (FR r3))) rs)),
      astk, b, m0)
  | Pfmuls (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift2 Val.mulfs (rs (FR r2)) (rs (FR r3))) rs)),
      astk, b, m0)
  | Pfsubs (r1, r2, r3) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift2 Val.subfs (rs (FR r2)) (rs (FR r3))) rs)),
      astk, b, m0)
  | Pflis (r1, f) ->
    ANext
      ((anextinstr is_32bits (Pregmap.set (FR r1) (Cval (Vsingle f)) rs)),
      astk, b, m0)
  | Pfcmps (r1, r2) ->
    ANext
      ((anextinstr is_32bits (acompare_float32 rs (rs (FR r1)) (rs (FR r2)))),
      astk, b, m0)
  | Pfcmpzs r1 ->
    ANext
      ((anextinstr is_32bits
         (acompare_float32 rs (rs (FR r1)) (Cval (Vsingle Float32.zero)))),
      astk, b, m0)
  | Pfsitos (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1)
           (amaketotal (alifto1 Val.singleofint (rs (IR r2)))) rs)), astk, b,
      m0)
  | Pfuitos (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1)
           (amaketotal (alifto1 Val.singleofintu (rs (IR r2)))) rs)), astk,
      b, m0)
  | Pftosizs (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR r1)
           (amaketotal (alifto1 Val.intofsingle (rs (FR r2))))
           (Pregmap.set (FR FR6) (Cval Vundef) rs))), astk, b, m0)
  | Pftouizs (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (IR r1)
           (amaketotal (alifto1 Val.intuofsingle (rs (FR r2))))
           (Pregmap.set (FR FR6) (Cval Vundef) rs))), astk, b, m0)
  | Pfcvtsd (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift1 Val.singleoffloat (rs (FR r2))) rs)),
      astk, b, m0)
  | Pfcvtds (r1, r2) ->
    ANext
      ((anextinstr is_32bits
         (Pregmap.set (FR r1) (alift1 Val.floatofsingle (rs (FR r2))) rs)),
      astk, b, m0)
  | Pfldd (r1, r2, n0) ->
    aexec_load is_32bits Mfloat64 (aadd (rs (IR r2)) (Cval (Vint n0))) (FR
      r1) rs astk b m0
  | Pfldd_a (r1, r2, n0) ->
    aexec_load is_32bits Many64 (aadd (rs (IR r2)) (Cval (Vint n0))) (FR r1)
      rs astk b m0
  | Pflds (r1, r2, n0) ->
    aexec_load is_32bits Mfloat32 (aadd (rs (IR r2)) (Cval (Vint n0))) (FR
      r1) rs astk b m0
  | Pfstd (r1, r2, n0) ->
    aexec_store is_32bits Mfloat64 (aadd (rs (IR r2)) (Cval (Vint n0))) (FR
      r1) rs astk b m0
  | Pfstd_a (r1, r2, n0) ->
    aexec_store is_32bits Many64 (aadd (rs (IR r2)) (Cval (Vint n0))) (FR r1)
      rs astk b m0
  | Pfsts (r1, r2, n0) ->
    aexec_store is_32bits Mfloat32 (aadd (rs (IR r2)) (Cval (Vint n0))) (FR
      r1) rs astk b m0

(** val alloc_arguments :
    val0 list -> typ list -> mreg list -> (preg * val0) list option **)

let rec alloc_arguments lv lt0 lr =
  match lv with
  | [] -> (match lt0 with
           | [] -> Some []
           | _ :: _ -> None)
  | v1 :: lv1 ->
    (match lt0 with
     | [] -> None
     | t0 :: lt1 ->
       (match t0 with
        | Tint ->
          (match lr with
           | [] -> None
           | r1 :: lr1 ->
             (match alloc_arguments lv1 lt1 lr1 with
              | Some l -> Some (((preg_of r1), v1) :: l)
              | None -> None))
        | _ -> None))

(** val regset0 : aregset **)

let regset0 r =
  Aval (Rval (Sreg r))

(** val allocframe : int -> int -> Mem.mem -> aregset -> aoutcome **)

let allocframe sz pos m0 rs =
  let (m1, stkb) = Mem.alloc m0 0 sz in
  let sp = Aval (Sval (Ssp, Ptrofs.zero)) in
  let stk = ZMap.init (Cmemval Undef) in
  (match astack_store Mint32 m1 stk stkb (Ptrofs.unsigned pos) (rs (IR IR13)) with
   | Some stk' ->
     ANext
       ((incrinstr
          (Pregmap.set (IR IR13) sp (Pregmap.set (IR IR12) (rs (IR IR13)) rs))),
       stk', stkb, m1)
   | None -> AStuck)

(** val init_state :
    signature -> int -> int -> val0 list -> Mem.mem -> aoutcome **)

let init_state s sz pos l m0 =
  match alloc_arguments l s.sig_args int_param_regs with
  | Some l0 ->
    let rs = init_regset l0 regset0 in
    (match allocframe sz pos m0 rs with
     | ANext (rs', stk', stkb', m1') ->
       ANext
         ((Pregmap.set PC (rs (IR IR0))
            (Pregmap.set (IR IR14) (Aval (Sval ((Sreg PC),
              (Ptrofs.repr ((fun p->2*p) 1))))) rs')), stk', stkb', m1')
     | AStuck -> AStuck)
  | None -> AStuck

(** val is_final_state : aregset -> bool **)

let is_final_state rs =
  (&&)
    ((&&)
      (aval_eq (rs PC) (Aval (Sval ((Sreg PC),
        (Ptrofs.repr ((fun p->2*p) 1))))))
      (aval_eq (rs (IR IR13)) (Aval (Rval (Sreg (IR IR13))))))
    (forallb (fun r ->
      aval_eq (rs (preg_of r)) (Aval (Rval (Sreg (preg_of r)))))
      (app int_callee_save_regs float_callee_save_regs))

(** val has_rettypeb : val0 -> rettype -> bool **)

let has_rettypeb v = function
| Tret t0 -> proj_sumbool (Val.has_type_dec v t0)
| Tint8signed ->
  (match v with
   | Vundef -> true
   | Vint n0 ->
     Int.eq n0
       (Int.sign_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))) n0)
   | _ -> false)
| Tint8unsigned ->
  (match v with
   | Vundef -> true
   | Vint n0 ->
     Int.eq n0
       (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))) n0)
   | _ -> false)
| Tint16signed ->
  (match v with
   | Vundef -> true
   | Vint n0 ->
     Int.eq n0
       (Int.sign_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
         1)))) n0)
   | _ -> false)
| Tint16unsigned ->
  (match v with
   | Vundef -> true
   | Vint n0 ->
     Int.eq n0
       (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
         1)))) n0)
   | _ -> false)
| Tvoid -> (match v with
            | Vundef -> true
            | _ -> false)

(** val is_definedb : val0 -> bool **)

let is_definedb = function
| Vundef -> false
| _ -> true

(** val get_result : rettype -> aval -> Mem.mem -> (val0 * Mem.mem) option **)

let get_result r v m0 =
  match v with
  | Cval v0 ->
    if (&&) (is_definedb v0) (has_rettypeb v0 r) then Some (v0, m0) else None
  | Aval _ -> None

(** val bin_interp :
    rettype -> int -> aregset -> astack -> block -> Mem.mem ->
    (val0 * Mem.mem) option **)
    
let print_aexec_load chunk addr stk b m0 =
  match addr with
  | Some a ->
    (match a with
     | Cval addr' ->
       (match Mem.loadv chunk m0 addr' with
        | Some v0 -> "Cval " ^ (string_of_val0 v0)
        | None -> "Cval None")
     | Aval sv ->
       (match get_stack_offset sv with
        | Some o ->
          (match astack_load chunk m0 stk b (Ptrofs.unsigned o) with
           | Some v0 -> "Aval " ^ (string_of_reg_val v0)
           | None -> "Aval None")
        | None -> "Aval get_stack_offset None"))
  | None -> "addr None"    

let print_arm_stack rs stk b m =
  let _ = print_endline "****************arm32 stack***************" in
  let _ = print_endline ("Stack13=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 52)))) stk b m) ) in
  let _ = print_endline ("Stack12=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 48)))) stk b m) ) in
  let _ = print_endline ("Stack11=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 44)))) stk b m) ) in
  let _ = print_endline ("Stack10=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 40)))) stk b m) ) in
  let _ = print_endline ("Stack9=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 36)))) stk b m) ) in
  let _ = print_endline ("Stack8=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 32)))) stk b m) ) in
  let _ = print_endline ("Stack7=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 28)))) stk b m) ) in
  let _ = print_endline ("Stack6=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 24)))) stk b m) ) in
  let _ = print_endline ("Stack5=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 20)))) stk b m) ) in
  let _ = print_endline ("Stack4=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 16)))) stk b m) ) in
  let _ = print_endline ("Stack3=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 12)))) stk b m) ) in
  let _ = print_endline ("Stack2=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 8)))) stk b m) ) in
  let _ = print_endline ("Stack1=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 4)))) stk b m) ) in
  let _ = print_endline ("Stack0=  " ^ (print_aexec_load Mint32 (aadd (rs (IR IR13)) (Cval (Vint (Int.repr 0)))) stk b m) ) in
    print_endline "****************arm32 stack***************\n\n"

let rec bin_interp rt n0 rs stk stkb m0 =
  if is_final_state rs
  then get_result rt (rs (IR IR0)) m0
  else ((fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> None)
          (fun n1 ->
          match find_instr0 (rs PC) m0 with
          | Some p ->
            let (i, sz) = p in
            (match aexec_instr sz i rs stk stkb m0 with
             | ANext (rs', stk', stkb0, m') ->
               bin_interp rt n1 rs' stk' stkb0 m'
             | AStuck -> None)
          | None -> None)
          n0)

(** val bin_exec :
    int -> signature -> int -> int -> val0 list -> Mem.mem ->
    (val0 * Mem.mem) option **)

let bin_exec n0 s sz pos args m0 =
  match init_state s sz pos args m0 with
  | ANext (rs, stk, stkb, m1) -> bin_interp s.sig_res n0 rs stk stkb m1
  | AStuck -> None

type signedness =
| Signed
| Unsigned

module List64AsArray =
 struct
  type t = int list

  (** val index : t -> int -> int **)

  let index l idx =
    match nth_error l (Z.to_nat (Int.unsigned idx)) with
    | Some i -> i
    | None -> Int64.zero

  (** val assign' : t -> int -> int -> t option **)

  let rec assign' l cur v =
    match l with
    | [] -> None
    | hd :: tl ->
      ((fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Some (v :: tl))
         (fun n0 ->
         match assign' tl n0 v with
         | Some nl -> Some (hd :: nl)
         | None -> None)
         cur)

  (** val assign : t -> int -> int -> t **)

  let assign l cur v =
    match assign' l cur v with
    | Some nl -> nl
    | None -> []
 end

module List16 =
 struct
  type t = int list

  (** val index : t -> int -> int **)

  let index l idx =
    match nth_error l (Z.to_nat (Int.unsigned idx)) with
    | Some i -> i
    | None -> Int.zero

  (** val assign' : t -> int -> int -> t option **)

  let rec assign' l cur v =
    match l with
    | [] -> None
    | hd :: tl ->
      ((fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Some (v :: tl))
         (fun n0 ->
         match assign' tl n0 v with
         | Some nl -> Some (hd :: nl)
         | None -> None)
         cur)

  (** val assign : t -> int -> int -> t **)

  let assign l cur v =
    match assign' l cur v with
    | Some nl -> nl
    | None -> []

  (** val create_int_list : int -> t **)

  let rec create_int_list l =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> [])
      (fun n0 -> Int.zero :: (create_int_list n0))
      l
 end

module List32 =
 struct
  type t = int list

  (** val index : t -> int -> int **)

  let index l idx =
    match nth_error l (Z.to_nat (Int.unsigned idx)) with
    | Some i -> i
    | None -> Int.zero

  (** val create_int_list : int -> t **)

  let rec create_int_list l =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> [])
      (fun n0 -> Int.zero :: (create_int_list n0))
      l
 end

module ListNat =
 struct
  type t = int list

  (** val index : t -> int -> int **)

  let index l idx =
    match nth_error l idx with
    | Some i -> i
    | None -> 0

  (** val assign' : t -> int -> int -> t option **)

  let rec assign' l cur v =
    match l with
    | [] -> None
    | hd :: tl ->
      ((fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Some (v :: tl))
         (fun n0 ->
         match assign' tl n0 v with
         | Some nl -> Some (hd :: nl)
         | None -> None)
         cur)

  (** val assign : t -> int -> int -> t **)

  let assign l cur v =
    match assign' l cur v with
    | Some nl -> nl
    | None -> []

  (** val is_exists : t -> int -> int -> bool **)

  let rec is_exists l cur v =
    match l with
    | [] -> false
    | hd :: tl ->
      ((fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> false)
         (fun n0 -> if (=) hd v then true else is_exists tl n0 v)
         cur)

  (** val create_int_list : int -> t **)

  let rec create_int_list l =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> [])
      (fun n0 -> 0 :: (create_int_list n0))
      l
 end

(** val perm_ge : permission -> permission -> bool **)

let perm_ge x y =
  if Mem.perm_order_dec x y then true else false

type memory_region = { start_addr : val0; block_size : val0;
                       block_perm : permission; block_ptr : val0 }

module Memory_regions =
 struct
  type t = memory_region list
 end

type myMemRegionsType = Memory_regions.t

(** val cmp_ptr32_null : Mem.mem -> val0 -> bool option **)

let cmp_ptr32_null m0 v =
  Val.cmpu_bool (Mem.valid_pointer m0) Ceq v vnullptr

(** val val32_divu : val0 -> val0 -> val0 **)

let val32_divu x y =
  match Val.divu x y with
  | Some res -> res
  | None -> Vundef

(** val val32_modu : val0 -> val0 -> val0 **)

let val32_modu x y =
  match Val.modu x y with
  | Some res -> res
  | None -> Vundef

(** val comp_eq_32 : val0 -> val0 -> bool **)

let comp_eq_32 x y =
  match x with
  | Vint n1 -> (match y with
                | Vint n2 -> Int.eq n1 n2
                | _ -> false)
  | _ -> false

(** val comp_ne_32 : val0 -> val0 -> bool **)

let comp_ne_32 x y =
  match x with
  | Vint n1 -> (match y with
                | Vint n2 -> negb (Int.eq n1 n2)
                | _ -> false)
  | _ -> false

(** val compu_lt_32 : val0 -> val0 -> bool **)

let compu_lt_32 x y =
  match x with
  | Vint n1 -> (match y with
                | Vint n2 -> Int.ltu n1 n2
                | _ -> false)
  | _ -> false

(** val compu_le_32 : val0 -> val0 -> bool **)

let compu_le_32 x y =
  match x with
  | Vint n1 -> (match y with
                | Vint n2 -> negb (Int.ltu n2 n1)
                | _ -> false)
  | _ -> false

(** val val64_divlu : val0 -> val0 -> val0 **)

let val64_divlu x y =
  match Val.divlu x y with
  | Some res -> res
  | None -> Vundef

(** val val64_modlu : val0 -> val0 -> val0 **)

let val64_modlu x y =
  match Val.modlu x y with
  | Some res -> res
  | None -> Vundef

(** val compl_eq : val0 -> val0 -> bool **)

let compl_eq x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> Int64.eq n1 n2
                 | _ -> false)
  | _ -> false

(** val compl_ne : val0 -> val0 -> bool **)

let compl_ne x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> negb (Int64.eq n1 n2)
                 | _ -> false)
  | _ -> false

(** val compl_lt : val0 -> val0 -> bool **)

let compl_lt x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> Int64.lt n1 n2
                 | _ -> false)
  | _ -> false

(** val compl_le : val0 -> val0 -> bool **)

let compl_le x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> negb (Int64.lt n2 n1)
                 | _ -> false)
  | _ -> false

(** val compl_gt : val0 -> val0 -> bool **)

let compl_gt x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> Int64.lt n2 n1
                 | _ -> false)
  | _ -> false

(** val compl_ge : val0 -> val0 -> bool **)

let compl_ge x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> negb (Int64.lt n1 n2)
                 | _ -> false)
  | _ -> false

(** val complu_lt : val0 -> val0 -> bool **)

let complu_lt x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> Int64.ltu n1 n2
                 | _ -> false)
  | _ -> false

(** val complu_le : val0 -> val0 -> bool **)

let complu_le x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> negb (Int64.ltu n2 n1)
                 | _ -> false)
  | _ -> false

(** val complu_gt : val0 -> val0 -> bool **)

let complu_gt x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> Int64.ltu n2 n1
                 | _ -> false)
  | _ -> false

(** val complu_ge : val0 -> val0 -> bool **)

let complu_ge x y =
  match x with
  | Vlong n1 -> (match y with
                 | Vlong n2 -> negb (Int64.ltu n1 n2)
                 | _ -> false)
  | _ -> false

(** val complu_set : val0 -> val0 -> bool **)

let complu_set x y =
  match x with
  | Vlong n1 ->
    (match y with
     | Vlong n2 -> negb (Int64.eq (Int64.coq_and n1 n2) Int64.zero)
     | _ -> false)
  | _ -> false

(** val val_intuoflongu : val0 -> val0 **)

let val_intuoflongu = function
| Vlong n0 -> Vint (Int.repr (Int64.unsigned n0))
| _ -> Vundef

(** val val_intsoflongu : val0 -> val0 **)

let val_intsoflongu = function
| Vlong n0 -> Vint (Int.repr (Int64.unsigned n0))
| _ -> Vundef

(** val sint32_to_vint : int -> val0 **)

let sint32_to_vint v =
  Vint v

(** val int64_to_sint32 : int -> int **)

let int64_to_sint32 x =
  Int.repr (Int64.unsigned x)

type reg =
| R13
| R14
| R15
| R16
| R17
| R18
| R19
| R20
| R21
| R22
| R23

(** val reg_eqb : reg -> reg -> bool **)

let reg_eqb r0 r1 =
  match r0 with
  | R13 -> (match r1 with
            | R13 -> true
            | _ -> false)
  | R14 -> (match r1 with
            | R14 -> true
            | _ -> false)
  | R15 -> (match r1 with
            | R15 -> true
            | _ -> false)
  | R16 -> (match r1 with
            | R16 -> true
            | _ -> false)
  | R17 -> (match r1 with
            | R17 -> true
            | _ -> false)
  | R18 -> (match r1 with
            | R18 -> true
            | _ -> false)
  | R19 -> (match r1 with
            | R19 -> true
            | _ -> false)
  | R20 -> (match r1 with
            | R20 -> true
            | _ -> false)
  | R21 -> (match r1 with
            | R21 -> true
            | _ -> false)
  | R22 -> (match r1 with
            | R22 -> true
            | _ -> false)
  | R23 -> (match r1 with
            | R23 -> true
            | _ -> false)

(** val id_of_reg : reg -> int **)

let id_of_reg = function
| R13 -> 0
| R14 -> 1
| R15 -> ((fun p->2*p) 1)
| R16 -> ((fun p->1+2*p) 1)
| R17 -> ((fun p->2*p) ((fun p->2*p) 1))
| R18 -> ((fun p->1+2*p) ((fun p->2*p) 1))
| R19 -> ((fun p->2*p) ((fun p->1+2*p) 1))
| R20 -> ((fun p->1+2*p) ((fun p->1+2*p) 1))
| R21 -> ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))
| R22 -> ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) 1)))
| R23 -> ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) 1)))

(** val reg2nat : reg -> int **)

let reg2nat = function
| R13 -> 0
| R14 -> Stdlib.succ 0
| R15 -> Stdlib.succ (Stdlib.succ 0)
| R16 -> Stdlib.succ (Stdlib.succ (Stdlib.succ 0))
| R17 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ 0)))
| R18 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ 0))))
| R19 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ 0)))))
| R20 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))
| R21 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    0)))))))
| R22 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ 0))))))))
| R23 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ 0)))))))))

(** val z_to_reg : int -> reg option **)

let z_to_reg z0 =
  if Z.eqb z0 0
  then Some R13
  else if Z.eqb z0 1
       then Some R14
       else if Z.eqb z0 ((fun p->2*p) 1)
            then Some R15
            else if Z.eqb z0 ((fun p->1+2*p) 1)
                 then Some R16
                 else if Z.eqb z0 ((fun p->2*p) ((fun p->2*p) 1))
                      then Some R17
                      else if Z.eqb z0 ((fun p->1+2*p) ((fun p->2*p) 1))
                           then Some R18
                           else if Z.eqb z0 ((fun p->2*p) ((fun p->1+2*p) 1))
                                then Some R19
                                else if Z.eqb z0 ((fun p->1+2*p)
                                          ((fun p->1+2*p) 1))
                                     then Some R20
                                     else if Z.eqb z0 ((fun p->2*p)
                                               ((fun p->2*p) ((fun p->2*p)
                                               1)))
                                          then Some R21
                                          else if Z.eqb z0 ((fun p->1+2*p)
                                                    ((fun p->2*p)
                                                    ((fun p->2*p) 1)))
                                               then Some R22
                                               else if Z.eqb z0 ((fun p->2*p)
                                                         ((fun p->1+2*p)
                                                         ((fun p->2*p) 1)))
                                                    then Some R23
                                                    else None

(** val get_dst : int -> int **)

let get_dst i =
  Int64.unsigned
    (Int64.shru
      (Int64.coq_and i
        (Int64.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          1)))))))))))))
      (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))))

(** val get_src : int -> int **)

let get_src i =
  Int64.unsigned
    (Int64.shru
      (Int64.coq_and i
        (Int64.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          1)))))))))))))))))
      (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1)))))

(** val int64_to_dst_reg' : int -> reg option **)

let int64_to_dst_reg' ins =
  z_to_reg (get_dst ins)

(** val int64_to_src_reg' : int -> reg option **)

let int64_to_src_reg' ins =
  z_to_reg (get_src ins)

(** val get_opcode : int -> int **)

let get_opcode ins =
  Z.to_nat
    (Int64.unsigned
      (Int64.coq_and ins
        (Int64.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
          1))))))))))

(** val get_offset0 : int -> int **)

let get_offset0 i =
  Int.sign_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
    (Int.repr
      (Int64.unsigned
        (Int64.shru
          (Int64.shl i
            (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
              ((fun p->2*p) ((fun p->2*p) 1)))))))
          (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
            ((fun p->1+2*p) 1)))))))))

(** val get_immediate : int -> int **)

let get_immediate i1 =
  int64_to_sint32
    (Int64.shru i1
      (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) 1)))))))

type bpf_flag =
| BPF_SUCC_RETURN
| BPF_OK
| BPF_ILLEGAL_INSTRUCTION
| BPF_ILLEGAL_MEM
| BPF_ILLEGAL_JUMP
| BPF_ILLEGAL_CALL
| BPF_ILLEGAL_LEN
| BPF_ILLEGAL_REGISTER
| BPF_NO_RETURN
| BPF_OUT_OF_BRANCHES
| BPF_ILLEGAL_DIV
| BPF_ILLEGAL_SHIFT
| BPF_ILLEGAL_ALU
| BPF_ILLEGAL_JIT
| BPF_ILLEGAL_ARM_LEN
| BPF_ILLEGAL_EP_LEN

(** val z_of_flag : bpf_flag -> int **)

let z_of_flag = function
| BPF_SUCC_RETURN -> 1
| BPF_OK -> 0
| BPF_ILLEGAL_INSTRUCTION -> ((fun p->2*p) 1)
| BPF_ILLEGAL_MEM -> ((fun p->1+2*p) 1)
| BPF_ILLEGAL_JUMP -> ((fun p->2*p) ((fun p->2*p) 1))
| BPF_ILLEGAL_CALL -> ((fun p->1+2*p) ((fun p->2*p) 1))
| BPF_ILLEGAL_LEN -> ((fun p->2*p) ((fun p->1+2*p) 1))
| BPF_ILLEGAL_REGISTER -> ((fun p->1+2*p) ((fun p->1+2*p) 1))
| BPF_NO_RETURN -> ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))
| BPF_OUT_OF_BRANCHES -> ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) 1)))
| BPF_ILLEGAL_DIV -> ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) 1)))
| BPF_ILLEGAL_SHIFT -> ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) 1)))
| BPF_ILLEGAL_ALU -> ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1)))
| BPF_ILLEGAL_JIT -> ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) 1)))
| BPF_ILLEGAL_ARM_LEN -> ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1)))
| BPF_ILLEGAL_EP_LEN -> ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1)))

(** val int_of_flag : bpf_flag -> int **)

let int_of_flag f =
  Int.repr (z_of_flag f)

(** val well_chunk_Z : memory_chunk -> int **)

let well_chunk_Z = function
| Mint8unsigned -> 1
| Mint16unsigned -> ((fun p->2*p) 1)
| Mint32 -> ((fun p->2*p) ((fun p->2*p) 1))
| Mint64 -> ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))
| _ -> ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) 1)))

(** val memory_chunk_to_valu32 : memory_chunk -> val0 **)

let memory_chunk_to_valu32 chunk =
  Vint (Int.repr (well_chunk_Z chunk))

(** val memory_chunk_to_valu32_upbound : memory_chunk -> val0 **)

let memory_chunk_to_valu32_upbound chunk =
  Vint (Int.repr (Z.sub Int.max_unsigned (well_chunk_Z chunk)))

(** val _to_vlong : val0 -> val0 option **)

let _to_vlong = function
| Vint n0 -> Some (Vlong (Int64.repr (Int.unsigned n0)))
| Vlong n0 -> Some (Vlong n0)
| _ -> None

(** val vlong_to_vint_or_vlong : memory_chunk -> val0 -> val0 **)

let vlong_to_vint_or_vlong chunk = function
| Vlong n0 ->
  (match chunk with
   | Mint8unsigned ->
     Vint
       (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))
         (Int.repr (Int64.unsigned n0)))
   | Mint16unsigned ->
     Vint
       (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
         1)))) (Int.repr (Int64.unsigned n0)))
   | Mint32 -> Vint (Int.repr (Int64.unsigned n0))
   | Mint64 -> Vlong n0
   | _ -> Vundef)
| _ -> Vundef

(** val vint_to_vint_or_vlong : memory_chunk -> val0 -> val0 **)

let vint_to_vint_or_vlong chunk = function
| Vint n0 ->
  (match chunk with
   | Mint8unsigned ->
     Vint (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))) n0)
   | Mint16unsigned ->
     Vint
       (Int.zero_ext ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
         1)))) n0)
   | Mint32 -> Vint n0
   | Mint64 -> Vlong (Int64.repr (Int.signed n0))
   | _ -> Vundef)
| _ -> Vundef

type ('st, 'a) m = 'st -> ('a * 'st) option

(** val returnM : 'a1 -> ('a2, 'a1) m **)

let returnM a st =
  Some (a, st)

(** val bindM : ('a3, 'a1) m -> ('a1 -> ('a3, 'a2) m) -> ('a3, 'a2) m **)

let bindM x f st =
  match x st with
  | Some p -> let (x', st') = p in f x' st'
  | None -> None

type arch =
| A32
| A64

type cond =
| Eq0
| Gt0 of signedness
| Ge of signedness
| Lt0 of signedness
| Le of signedness
| SEt
| Ne

type off = int

type imm = int

type binOp =
| BPF_ADD
| BPF_SUB
| BPF_MUL
| BPF_DIV
| BPF_OR
| BPF_AND
| BPF_LSH
| BPF_RSH
| BPF_MOD
| BPF_XOR
| BPF_MOV
| BPF_ARSH

type instruction0 =
| BPF_NEG of arch * reg
| BPF_BINARY of arch * binOp * reg * (reg, imm) sum
| BPF_JA of off
| BPF_JUMP of cond * reg * (reg, imm) sum * off
| BPF_LDDW_low of reg * imm
| BPF_LDDW_high of reg * imm
| BPF_LDX of memory_chunk * reg * reg * off
| BPF_ST of memory_chunk * reg * (reg, imm) sum * off
| BPF_CALL of imm
| BPF_RET
| BPF_ERR

let string_of_signedness s =
  match s with
  | Signed -> "s"
  | Unsigned -> ""

let string_of_reg r =
  match r with
  | R13 -> "R0"
  | R14 -> "R1"
  | R15 -> "R2"
  | R16 -> "R3"
  | R17 -> "R4"
  | R18 -> "R5"
  | R19 -> "R6"
  | R20 -> "R7"
  | R21 -> "R8"
  | R22 -> "R9"
  | R23 -> "R10"

let string_of_flag f =
  match f with
  | BPF_SUCC_RETURN -> "BPF_SUCC_RETURN"
  | BPF_OK -> "BPF_OK"
  | BPF_ILLEGAL_INSTRUCTION -> "BPF_ILLEGAL_INSTRUCTION"
  | BPF_ILLEGAL_MEM -> "BPF_ILLEGAL_MEM"
  | BPF_ILLEGAL_JUMP -> "BPF_ILLEGAL_JUMP"
  | BPF_ILLEGAL_CALL -> "BPF_ILLEGAL_CALL"
  | BPF_ILLEGAL_LEN -> "BPF_ILLEGAL_LEN"
  | BPF_ILLEGAL_REGISTER -> "BPF_ILLEGAL_REGISTER"
  | BPF_NO_RETURN -> "BPF_NO_RETURN"
  | BPF_OUT_OF_BRANCHES -> "BPF_OUT_OF_BRANCHES"
  | BPF_ILLEGAL_DIV -> "BPF_ILLEGAL_DIV"
  | BPF_ILLEGAL_SHIFT -> "BPF_ILLEGAL_SHIFT"
  | BPF_ILLEGAL_ALU -> "BPF_ILLEGAL_ALU"
  | BPF_ILLEGAL_JIT -> "BPF_ILLEGAL_JIT"
  | BPF_ILLEGAL_ARM_LEN -> "BPF_ILLEGAL_ARM_LEN"
  | BPF_ILLEGAL_EP_LEN -> "BPF_ILLEGAL_EP_LEN"

let string_of_arch a =
  match a with
  | A32 -> "32"
  | A64 -> "64"

let strng_of_cond cd =
  match cd with
  | Eq0 -> "eq"
  | Gt0 s -> (string_of_signedness s) ^ "gt"
  | Ge s -> (string_of_signedness s) ^ "ge"
  | Lt0 s -> (string_of_signedness s) ^ "lt"
  | Le s -> (string_of_signedness s) ^ "le"
  | SEt -> "set"
  | Ne ->"ne"


let string_of_instruction ins =
  match ins with
  | BPF_NEG (a, r) -> "neg" ^ (string_of_arch a) ^ " " ^ (string_of_reg r)
  | BPF_BINARY (a, bop, dst, src) ->
    (match bop with
    | BPF_ADD -> "add"
    | BPF_SUB -> "sub"
    | BPF_MUL -> "mul"
    | BPF_DIV -> "div"
    | BPF_OR  -> "or"
    | BPF_AND -> "and"
    | BPF_LSH -> "lsh"
    | BPF_RSH -> "rsh"
    | BPF_MOD -> "mod"
    | BPF_XOR -> "xor"
    | BPF_MOV -> "mov"
    | BPF_ARSH -> "arsh" ) ^ (string_of_arch a) ^ " " ^ (string_of_reg dst) ^ " " ^ 
    (match src with
    | Inl r -> string_of_reg r
    | Inr i -> string_of_int i)
    
  | BPF_JA o -> "JA " ^ (string_of_int o)
  | BPF_JUMP (cd, dst, src, o) ->
    "j" ^ (strng_of_cond cd) ^ " " ^ (string_of_reg dst) ^ " " ^ 
    (match src with
    | Inl r -> string_of_reg r
    | Inr i -> string_of_int i) ^ " " ^ (string_of_int o)
    
  | BPF_LDDW_low (dst, i) -> (string_of_reg dst) ^ " = " ^ (string_of_int i) ^ " (lddw)"
  | BPF_LDDW_high (dst, i) -> (string_of_reg dst) ^ " = (" ^ (string_of_int i) ^ " <<32)"
  | BPF_LDX (mc, dst, src, o) ->
    (string_of_reg dst) ^ " = *(u" ^ (string_of_memory_chunk mc) ^ " *)(" ^
        (string_of_reg src) ^ " + " ^ (string_of_int o) ^ ")"
  | BPF_ST (mc, dst, src, o) ->
    "*(u" ^ (string_of_memory_chunk mc) ^ " *)(" ^ (string_of_reg dst) ^ " + " ^ (string_of_int o) ^ ") = " ^
    (match src with
    | Inl r -> string_of_reg r
    | Inr i -> string_of_int i) 
  | BPF_CALL i -> "call " ^ (string_of_int i)
  | BPF_RET -> "exit"
  | BPF_ERR -> "error"

(** val get_instruction_alu64_imm :
    int -> reg -> int -> int -> instruction0 **)

let get_instruction_alu64_imm _ rd i op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_BINARY (A64, BPF_ADD, rd, (Inr i)))
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ -> BPF_BINARY (A64,
                                                  BPF_SUB, rd, (Inr
                                                  i)))
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_ERR)
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_ERR)
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_ERR)
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_MUL,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_DIV,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_OR,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_AND,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_LSH,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_RSH,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_NEG
                                                                    (A64,
                                                                    rd))
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_MOD,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_XOR,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_MOV,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n192 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n193 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n194 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n195 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n196 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n197 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n198 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_ARSH,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n198)
                                                                    n197)
                                                                    n196)
                                                                    n195)
                                                                    n194)
                                                                    n193)
                                                                    n192)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    op

(** val get_instruction_alu64_reg :
    int -> reg -> reg -> int -> instruction0 **)

let get_instruction_alu64_reg _ rd rs op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_BINARY (A64, BPF_ADD, rd,
                                  (Inl rs)))
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_ERR)
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_ERR)
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_BINARY
                                                                  (A64,
                                                                  BPF_SUB,
                                                                  rd, (Inl
                                                                  rs)))
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_MUL,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_DIV,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_OR,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_AND,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_LSH,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_RSH,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_MOD,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_XOR,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_MOV,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n192 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n193 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n194 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n195 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n196 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n197 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n198 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n199 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n200 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n201 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n202 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n203 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n204 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n205 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n206 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A64,
                                                                    BPF_ARSH,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n206)
                                                                    n205)
                                                                    n204)
                                                                    n203)
                                                                    n202)
                                                                    n201)
                                                                    n200)
                                                                    n199)
                                                                    n198)
                                                                    n197)
                                                                    n196)
                                                                    n195)
                                                                    n194)
                                                                    n193)
                                                                    n192)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    op

(** val get_instruction_alu32_imm :
    int -> reg -> int -> int -> instruction0 **)

let get_instruction_alu32_imm _ rd i op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_BINARY (A32, BPF_ADD, rd, (Inr i)))
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_BINARY (A32,
                                            BPF_SUB, rd, (Inr i)))
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_ERR)
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_ERR)
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_ERR)
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_MUL,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_DIV,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_OR,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_AND,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_LSH,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_RSH,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_NEG
                                                                    (A32,
                                                                    rd))
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_MOD,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_XOR,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_MOV,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n192 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n193 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n194 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n195 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_ARSH,
                                                                    rd, (Inr
                                                                    i)))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n195)
                                                                    n194)
                                                                    n193)
                                                                    n192)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    op

(** val get_instruction_alu32_reg :
    int -> reg -> reg -> int -> instruction0 **)

let get_instruction_alu32_reg _ rd rs op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_BINARY (A32, BPF_ADD, rd, (Inl
                            rs)))
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_BINARY (A32,
                                                            BPF_SUB, rd, (Inl
                                                            rs)))
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_ERR)
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_ERR)
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_MUL,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_DIV,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_OR,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_AND,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_LSH,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_RSH,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_MOD,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_XOR,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_MOV,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n192 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n193 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n194 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n195 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n196 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n197 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n198 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n199 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n200 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n201 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n202 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n203 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_BINARY
                                                                    (A32,
                                                                    BPF_ARSH,
                                                                    rd, (Inl
                                                                    rs)))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n203)
                                                                    n202)
                                                                    n201)
                                                                    n200)
                                                                    n199)
                                                                    n198)
                                                                    n197)
                                                                    n196)
                                                                    n195)
                                                                    n194)
                                                                    n193)
                                                                    n192)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    op

(** val get_instruction_ld : int -> reg -> int -> int -> instruction0 **)

let get_instruction_ld _ rd i op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_LDDW_high (rd,
                                    i))
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ -> BPF_LDDW_low
                                                    (rd, i))
                                                    (fun _ -> BPF_ERR)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    (Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val get_instruction_ldx :
    int -> reg -> reg -> int -> int -> instruction0 **)

let get_instruction_ldx _ rd rs ofs op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_ERR)
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_ERR)
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_ERR)
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_LDX
                                                                    (Mint32,
                                                                    rd, rs,
                                                                    ofs))
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_LDX
                                                                    (Mint16unsigned,
                                                                    rd, rs,
                                                                    ofs))
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_LDX
                                                                    (Mint8unsigned,
                                                                    rd, rs,
                                                                    ofs))
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_LDX
                                                                    (Mint64,
                                                                    rd, rs,
                                                                    ofs))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    (Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val get_instruction_st :
    int -> reg -> int -> int -> int -> instruction0 **)

let get_instruction_st _ rd ofs i op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_ERR)
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_ERR)
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_ERR)
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ST
                                                                    (Mint32,
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ST
                                                                    (Mint16unsigned,
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ST
                                                                    (Mint8unsigned,
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ST
                                                                    (Mint64,
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    (Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val get_instruction_stx :
    int -> reg -> reg -> int -> int -> instruction0 **)

let get_instruction_stx _ rd rs ofs op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_ERR)
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_ERR)
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_ERR)
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ST
                                                                    (Mint32,
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ST
                                                                    (Mint16unsigned,
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ST
                                                                    (Mint8unsigned,
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ST
                                                                    (Mint64,
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    (Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val get_instruction_branch_imm :
    int -> reg -> int -> int -> int -> instruction0 **)

let get_instruction_branch_imm _ rd ofs i op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_JA ofs)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_JUMP (Eq0, rd,
                                              (Inr i), ofs))
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_ERR)
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_ERR)
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_ERR)
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Gt0
                                                                    Unsigned),
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Ge
                                                                    Unsigned),
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    (SEt, rd,
                                                                    (Inr i),
                                                                    ofs))
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    (Ne, rd,
                                                                    (Inr i),
                                                                    ofs))
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Gt0
                                                                    Signed),
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Ge
                                                                    Signed),
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_CALL
                                                                    i)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_RET)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Lt0
                                                                    Unsigned),
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Le
                                                                    Unsigned),
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n192 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n193 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n194 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n195 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n196 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Lt0
                                                                    Signed),
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun n197 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n198 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n199 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n200 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n201 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n202 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n203 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n204 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n205 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n206 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n207 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n208 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n209 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n210 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n211 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n212 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Le
                                                                    Signed),
                                                                    rd, (Inr
                                                                    i),
                                                                    ofs))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n212)
                                                                    n211)
                                                                    n210)
                                                                    n209)
                                                                    n208)
                                                                    n207)
                                                                    n206)
                                                                    n205)
                                                                    n204)
                                                                    n203)
                                                                    n202)
                                                                    n201)
                                                                    n200)
                                                                    n199)
                                                                    n198)
                                                                    n197)
                                                                    n196)
                                                                    n195)
                                                                    n194)
                                                                    n193)
                                                                    n192)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    op

(** val get_instruction_branch_reg :
    int -> reg -> reg -> int -> int -> instruction0 **)

let get_instruction_branch_reg _ rd rs ofs op =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> BPF_ERR)
    (fun n0 ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ -> BPF_ERR)
      (fun n1 ->
      (fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> BPF_ERR)
        (fun n2 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> BPF_ERR)
          (fun n3 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> BPF_ERR)
            (fun n4 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ -> BPF_ERR)
              (fun n5 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ -> BPF_ERR)
                (fun n6 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ -> BPF_ERR)
                  (fun n7 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> BPF_ERR)
                    (fun n8 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ -> BPF_ERR)
                      (fun n9 ->
                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ -> BPF_ERR)
                        (fun n10 ->
                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                          (fun _ -> BPF_ERR)
                          (fun n11 ->
                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                            (fun _ -> BPF_ERR)
                            (fun n12 ->
                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                              (fun _ -> BPF_ERR)
                              (fun n13 ->
                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                (fun _ -> BPF_ERR)
                                (fun n14 ->
                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                  (fun _ -> BPF_ERR)
                                  (fun n15 ->
                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                    (fun _ -> BPF_ERR)
                                    (fun n16 ->
                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                      (fun _ -> BPF_ERR)
                                      (fun n17 ->
                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                        (fun _ -> BPF_ERR)
                                        (fun n18 ->
                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                          (fun _ -> BPF_ERR)
                                          (fun n19 ->
                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                            (fun _ -> BPF_ERR)
                                            (fun n20 ->
                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                              (fun _ -> BPF_ERR)
                                              (fun n21 ->
                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                (fun _ -> BPF_ERR)
                                                (fun n22 ->
                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                  (fun _ ->
                                                  BPF_ERR)
                                                  (fun n23 ->
                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                    (fun _ ->
                                                    BPF_ERR)
                                                    (fun n24 ->
                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                      (fun _ ->
                                                      BPF_ERR)
                                                      (fun n25 ->
                                                      (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                        (fun _ ->
                                                        BPF_ERR)
                                                        (fun n26 ->
                                                        (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                          (fun _ ->
                                                          BPF_ERR)
                                                          (fun n27 ->
                                                          (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                            (fun _ ->
                                                            BPF_ERR)
                                                            (fun n28 ->
                                                            (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                              (fun _ ->
                                                              BPF_JUMP (Eq0,
                                                              rd, (Inl rs),
                                                              ofs))
                                                              (fun n29 ->
                                                              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                (fun _ ->
                                                                BPF_ERR)
                                                                (fun n30 ->
                                                                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                  (fun _ ->
                                                                  BPF_ERR)
                                                                  (fun n31 ->
                                                                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Gt0
                                                                    Unsigned),
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Ge
                                                                    Unsigned),
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    (SEt, rd,
                                                                    (Inl rs),
                                                                    ofs))
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    (Ne, rd,
                                                                    (Inl rs),
                                                                    ofs))
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Gt0
                                                                    Signed),
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Ge
                                                                    Signed),
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Lt0
                                                                    Unsigned),
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Le
                                                                    Unsigned),
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n192 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n193 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n194 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n195 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n196 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n197 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n198 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n199 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n200 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n201 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n202 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n203 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n204 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Lt0
                                                                    Signed),
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun n205 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n206 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n207 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n208 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n209 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n210 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n211 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n212 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n213 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n214 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n215 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n216 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n217 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n218 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n219 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    (fun n220 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    BPF_JUMP
                                                                    ((Le
                                                                    Signed),
                                                                    rd, (Inl
                                                                    rs),
                                                                    ofs))
                                                                    (fun _ ->
                                                                    BPF_ERR)
                                                                    n220)
                                                                    n219)
                                                                    n218)
                                                                    n217)
                                                                    n216)
                                                                    n215)
                                                                    n214)
                                                                    n213)
                                                                    n212)
                                                                    n211)
                                                                    n210)
                                                                    n209)
                                                                    n208)
                                                                    n207)
                                                                    n206)
                                                                    n205)
                                                                    n204)
                                                                    n203)
                                                                    n202)
                                                                    n201)
                                                                    n200)
                                                                    n199)
                                                                    n198)
                                                                    n197)
                                                                    n196)
                                                                    n195)
                                                                    n194)
                                                                    n193)
                                                                    n192)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                  n30)
                                                                n29)
                                                              n28)
                                                            n27)
                                                          n26)
                                                        n25)
                                                      n24)
                                                    n23)
                                                  n22)
                                                n21)
                                              n20)
                                            n19)
                                          n18)
                                        n17)
                                      n16)
                                    n15)
                                  n14)
                                n13)
                              n12)
                            n11)
                          n10)
                        n9)
                      n8)
                    n7)
                  n6)
                n5)
              n4)
            n3)
          n2)
        n1)
      n0)
    op

(** val decode : int -> instruction0 option **)

let decode ins =
  let opcode0 = get_opcode ins in
  (match int64_to_dst_reg' ins with
   | Some dst ->
     let opc =
       Nat.coq_land opcode0 (Stdlib.succ (Stdlib.succ
         (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
         (Stdlib.succ 0)))))))
     in
     let n_ofs = get_offset0 ins in
     let n_imm = get_immediate ins in
     ((fun fO fS n -> if n=0 then fO () else fS (n-1))
        (fun _ -> Some (get_instruction_ld ins dst n_imm opcode0))
        (fun n0 ->
        (fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ ->
          match int64_to_src_reg' ins with
          | Some src -> Some (get_instruction_ldx ins dst src n_ofs opcode0)
          | None -> None)
          (fun n1 ->
          (fun fO fS n -> if n=0 then fO () else fS (n-1))
            (fun _ -> Some
            (get_instruction_st ins dst n_ofs n_imm opcode0))
            (fun n2 ->
            (fun fO fS n -> if n=0 then fO () else fS (n-1))
              (fun _ ->
              match int64_to_src_reg' ins with
              | Some src ->
                Some (get_instruction_stx ins dst src n_ofs opcode0)
              | None -> None)
              (fun n3 ->
              (fun fO fS n -> if n=0 then fO () else fS (n-1))
                (fun _ ->
                if Int.eq Int.zero
                     (Int.coq_and (Int.repr (Z.of_nat opcode0))
                       (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                         1)))))
                then Some (get_instruction_alu32_imm ins dst n_imm opcode0)
                else (match int64_to_src_reg' ins with
                      | Some src ->
                        Some (get_instruction_alu32_reg ins dst src opcode0)
                      | None -> None))
                (fun n4 ->
                (fun fO fS n -> if n=0 then fO () else fS (n-1))
                  (fun _ ->
                  if Int.eq Int.zero
                       (Int.coq_and (Int.repr (Z.of_nat opcode0))
                         (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                           1)))))
                  then Some
                         (get_instruction_branch_imm ins dst n_ofs n_imm
                           opcode0)
                  else (match int64_to_src_reg' ins with
                        | Some src ->
                          Some
                            (get_instruction_branch_reg ins dst src n_ofs
                              opcode0)
                        | None -> None))
                  (fun n5 ->
                  (fun fO fS n -> if n=0 then fO () else fS (n-1))
                    (fun _ -> Some BPF_ERR)
                    (fun n6 ->
                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                      (fun _ ->
                      if Int.eq Int.zero
                           (Int.coq_and (Int.repr (Z.of_nat opcode0))
                             (Int.repr ((fun p->2*p) ((fun p->2*p)
                               ((fun p->2*p) 1)))))
                      then Some
                             (get_instruction_alu64_imm ins dst n_imm opcode0)
                      else (match int64_to_src_reg' ins with
                            | Some src ->
                              Some
                                (get_instruction_alu64_reg ins dst src
                                  opcode0)
                            | None -> None))
                      (fun _ -> Some BPF_ERR)
                      n6)
                    n5)
                  n4)
                n3)
              n2)
            n1)
          n0)
        opc)
   | None -> None)

(** val encode_bpf64 : int -> int -> int -> int **)

let encode_bpf64 v ins from =
  Int64.coq_or (Int64.shl v (Int64.repr (Z.of_nat from))) ins

module Raw =
 struct
  (** val of_pos : int -> string -> string **)

  let rec of_pos p rest =
    (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun p1 ->
        (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
          (fun p2 ->
          (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('f', rest)))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('7', rest)))
            (fun _ ->
            (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

            ('f', rest))
            p2)
          (fun p2 ->
          (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('b', rest)))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('3', rest)))
            (fun _ ->
            (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

            ('b', rest))
            p2)
          (fun _ ->
          (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

          ('7', rest))
          p1)
        (fun p1 ->
        (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
          (fun p2 ->
          (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('d', rest)))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('5', rest)))
            (fun _ ->
            (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

            ('d', rest))
            p2)
          (fun p2 ->
          (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('9', rest)))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('1', rest)))
            (fun _ ->
            (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

            ('9', rest))
            p2)
          (fun _ ->
          (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

          ('5', rest))
          p1)
        (fun _ ->
        (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

        ('3', rest))
        p0)
      (fun p0 ->
      (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
        (fun p1 ->
        (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
          (fun p2 ->
          (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('e', rest)))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('6', rest)))
            (fun _ ->
            (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

            ('e', rest))
            p2)
          (fun p2 ->
          (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('a', rest)))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('2', rest)))
            (fun _ ->
            (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

            ('a', rest))
            p2)
          (fun _ ->
          (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

          ('6', rest))
          p1)
        (fun p1 ->
        (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
          (fun p2 ->
          (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('c', rest)))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('4', rest)))
            (fun _ ->
            (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

            ('c', rest))
            p2)
          (fun p2 ->
          (fun f2p1 f2p f1 p ->
  if p<=1 then f1 () else if p mod 2 = 0 then f2p (p/2) else f2p1 (p/2))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('8', rest)))
            (fun p' ->
            of_pos p'
              ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

              ('0', rest)))
            (fun _ ->
            (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

            ('8', rest))
            p2)
          (fun _ ->
          (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

          ('4', rest))
          p1)
        (fun _ ->
        (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

        ('2', rest))
        p0)
      (fun _ ->
      (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

      ('1', rest))
      p
 end

(** val of_pos0 : int -> string **)

let of_pos0 p =
  (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

    ('0',
    ((* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

    ('x', (Raw.of_pos p ""))))

(** val of_N0 : int -> string **)

let of_N0 n0 =
  (fun f0 fp n -> if n=0 then f0 () else fp n)
    (fun _ -> "0x0")
    (fun p -> of_pos0 p)
    n0

(** val of_Z : int -> string **)

let of_Z z0 =
  (fun f0 fp fn z -> if z=0 then f0 () else if z>0 then fp z else fn (-z))
    (fun _ -> "0x0")
    (fun p -> of_pos0 p)
    (fun p ->
    (* If this appears, you're using String internals. Please don't *)
  (fun (c, s) -> String.make 1 c ^ s)

    ('-', (of_pos0 p)))
    z0

(** val of_nat0 : int -> string **)

let of_nat0 n0 =
  of_N0 (N.of_nat n0)

(** val string_of_reg : reg -> string **)

let string_of_reg = function
| R13 -> "r0"
| R14 -> "r1"
| R15 -> "r2"
| R16 -> "r3"
| R17 -> "r4"
| R18 -> "r5"
| R19 -> "r6"
| R20 -> "r7"
| R21 -> "r8"
| R22 -> "r9"
| R23 -> "r10"

(** val string_of_int_unsigned : int -> string **)

let string_of_int_unsigned i =
  of_Z (Int.unsigned i)

(** val string_of_int_signed : int -> string **)

let string_of_int_signed i =
  of_Z (Int.signed i)

(** val print_reg_imm : (reg, imm) sum -> string **)

let print_reg_imm = function
| Inl r -> string_of_reg r
| Inr i -> string_of_int_signed i

(** val string_of_signedness : signedness -> string **)

let string_of_signedness = function
| Signed -> "(signed)"
| Unsigned -> ""

(** val string_of_memory_chunk : memory_chunk -> string **)

let string_of_memory_chunk = function
| Mint8unsigned -> "8"
| Mint16unsigned -> "16"
| Mint32 -> "32"
| Mint64 -> "64"
| _ -> "string_of_memory_chunk error"

(** val string_of_arch : arch -> string **)

let string_of_arch = function
| A32 -> ".32"
| A64 -> ""

(** val print_rBPF_instruction : instruction0 -> string **)

let print_rBPF_instruction = function
| BPF_NEG (_, dst) ->
  let dst_string = string_of_reg dst in (^) dst_string ((^) "= -" dst_string)
| BPF_BINARY (a, bop, dst, src) ->
  let dst_string = string_of_reg dst in
  let src_string = print_reg_imm src in
  (match bop with
   | BPF_ADD ->
     (^) dst_string ((^) " +=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_SUB ->
     (^) dst_string ((^) " -=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_MUL ->
     (^) dst_string ((^) " *=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_DIV ->
     (^) dst_string ((^) " /=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_OR ->
     (^) dst_string ((^) " |=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_AND ->
     (^) dst_string ((^) " &=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_LSH ->
     (^) dst_string ((^) " <<=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_RSH ->
     (^) dst_string ((^) " >>=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_MOD ->
     (^) dst_string ((^) " %=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_XOR ->
     (^) dst_string ((^) " ^=" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_MOV ->
     (^) dst_string ((^) " =" ((^) (string_of_arch a) ((^) " " src_string)))
   | BPF_ARSH ->
     (^) dst_string
       ((^) " >>=" ((^) (string_of_arch a) ((^) " (signed)" src_string))))
| BPF_JA o ->
  let ofs_string = string_of_int_signed o in (^) "goto " ofs_string
| BPF_JUMP (c, dst, src, o) ->
  let dst_string = string_of_reg dst in
  let src_string = print_reg_imm src in
  let ofs_string = string_of_int_signed o in
  (match c with
   | Eq0 ->
     (^) "if "
       ((^) dst_string
         ((^) " == " ((^) src_string ((^) " goto " ofs_string))))
   | Gt0 s ->
     (^) "if "
       ((^) (string_of_signedness s)
         ((^) dst_string
           ((^) " > "
             ((^) (string_of_signedness s)
               ((^) src_string ((^) " goto " ofs_string))))))
   | Ge s ->
     (^) "if "
       ((^) (string_of_signedness s)
         ((^) dst_string
           ((^) " >= "
             ((^) (string_of_signedness s)
               ((^) src_string ((^) " goto " ofs_string))))))
   | Lt0 s ->
     (^) "if "
       ((^) (string_of_signedness s)
         ((^) dst_string
           ((^) " < "
             ((^) (string_of_signedness s)
               ((^) src_string ((^) " goto " ofs_string))))))
   | Le s ->
     (^) "if "
       ((^) (string_of_signedness s)
         ((^) dst_string
           ((^) " <= "
             ((^) (string_of_signedness s)
               ((^) src_string ((^) " goto " ofs_string))))))
   | SEt ->
     (^) "if "
       ((^) dst_string ((^) " & " ((^) src_string ((^) " goto " ofs_string))))
   | Ne ->
     (^) "if "
       ((^) dst_string
         ((^) " != " ((^) src_string ((^) " goto " ofs_string)))))
| BPF_LDDW_low (dst, i) ->
  let dst_string = string_of_reg dst in
  let imm_string = string_of_int_unsigned i in
  (^) dst_string ((^) " = " ((^) imm_string " (lddw)"))
| BPF_LDDW_high (dst, i) ->
  let dst_string = string_of_reg dst in
  let imm_string = string_of_int_unsigned i in
  (^) dst_string ((^) " |= (" ((^) imm_string " << 32)"))
| BPF_LDX (mc, dst, src, o) ->
  let dst_string = string_of_reg dst in
  let src_string = string_of_reg src in
  let ofs_string = string_of_int_signed o in
  (^) dst_string
    ((^) " = *(u"
      ((^) (string_of_memory_chunk mc)
        ((^) " *)(" ((^) src_string ((^) " + " ((^) ofs_string ")"))))))
| BPF_ST (mc, dst, src, o) ->
  let dst_string = string_of_reg dst in
  let src_string = print_reg_imm src in
  let ofs_string = string_of_int_signed o in
  (^) "*(u"
    ((^) (string_of_memory_chunk mc)
      ((^) " *)("
        ((^) dst_string ((^) " + " ((^) ofs_string ((^) ") = " src_string))))))
| BPF_CALL i -> (^) "call " (string_of_int_signed i)
| BPF_RET -> "exit"
| BPF_ERR -> "print_rBPF_instruction error"

type loadStorePerm =
| NonPerm
| LoadPerm
| StorePerm
| LoadAndStore

(** val loadStorePerm_eq : loadStorePerm -> loadStorePerm -> bool **)

let loadStorePerm_eq x y =
  match x with
  | NonPerm -> (match y with
                | NonPerm -> true
                | _ -> false)
  | LoadPerm -> (match y with
                 | LoadPerm -> true
                 | _ -> false)
  | StorePerm -> (match y with
                  | StorePerm -> true
                  | _ -> false)
  | LoadAndStore -> (match y with
                     | LoadAndStore -> true
                     | _ -> false)

(** val loadStorePerm_eqb : loadStorePerm -> loadStorePerm -> bool **)

let loadStorePerm_eqb x y =
  if loadStorePerm_eq x y then true else false

(** val upd_LoadStorePerm :
    loadStorePerm -> loadStorePerm -> loadStorePerm option **)

let upd_LoadStorePerm history = function
| LoadPerm ->
  (match history with
   | NonPerm -> Some LoadPerm
   | StorePerm -> None
   | x -> Some x)
| LoadAndStore ->
  (match history with
   | StorePerm -> None
   | _ -> Some LoadAndStore)
| _ -> None

type loadStoreRegs = { is_R0 : loadStorePerm; is_R1 : loadStorePerm;
                       is_R2 : loadStorePerm; is_R3 : loadStorePerm;
                       is_R4 : loadStorePerm; is_R5 : loadStorePerm;
                       is_R6 : loadStorePerm; is_R7 : loadStorePerm;
                       is_R8 : loadStorePerm; is_R9 : loadStorePerm;
                       is_R10 : loadStorePerm }

let string_of_loadStorePerm ls =
  match ls with
  | NonPerm -> "NonPerm"
  | LoadPerm -> "LoadPerm"
  | StorePerm -> "StorePerm"
  | LoadAndStore -> "LoadAndStore"

let print_load_store_regs ls =
  let _ = print_string ("is_R0= " ^ (string_of_loadStorePerm ls.is_R0) ^ "; ") in
  let _ = print_string ("is_R1= " ^ (string_of_loadStorePerm ls.is_R1) ^ "; ") in
  let _ = print_string ("is_R2= " ^ (string_of_loadStorePerm ls.is_R2) ^ "; ") in
  let _ = print_string ("is_R3= " ^ (string_of_loadStorePerm ls.is_R3) ^ "; ") in
  let _ = print_string ("is_R4= " ^ (string_of_loadStorePerm ls.is_R4) ^ "; ") in
  let _ = print_string ("is_R5= " ^ (string_of_loadStorePerm ls.is_R5) ^ ";\n") in
  let _ = print_string ("is_R6= " ^ (string_of_loadStorePerm ls.is_R6) ^ "; ") in
  let _ = print_string ("is_R7= " ^ (string_of_loadStorePerm ls.is_R7) ^ "; ") in
  let _ = print_string ("is_R8= " ^ (string_of_loadStorePerm ls.is_R8) ^ "; ") in
  let _ = print_string ("is_R9= " ^ (string_of_loadStorePerm ls.is_R9) ^ "; ") in
    print_string ("is_R10= " ^ (string_of_loadStorePerm ls.is_R10) ^ "\n")

(** val init_LoadStoreRegs : loadStoreRegs **)

let init_LoadStoreRegs =
  { is_R0 = NonPerm; is_R1 = NonPerm; is_R2 = NonPerm; is_R3 = NonPerm;
    is_R4 = NonPerm; is_R5 = NonPerm; is_R6 = NonPerm; is_R7 = NonPerm;
    is_R8 = NonPerm; is_R9 = NonPerm; is_R10 = NonPerm }

(** val eval_LoadStoreRegs : loadStoreRegs -> reg -> loadStorePerm **)

let eval_LoadStoreRegs ls = function
| R13 -> ls.is_R0
| R14 -> ls.is_R1
| R15 -> ls.is_R2
| R16 -> ls.is_R3
| R17 -> ls.is_R4
| R18 -> ls.is_R5
| R19 -> ls.is_R6
| R20 -> ls.is_R7
| R21 -> ls.is_R8
| R22 -> ls.is_R9
| R23 -> ls.is_R10

(** val upd_LoadStoreRegs :
    loadStoreRegs -> reg -> loadStorePerm -> loadStoreRegs option **)

let upd_LoadStoreRegs ls r cur =
  let history = eval_LoadStoreRegs ls r in
  let new0 = upd_LoadStorePerm history cur in
  (match new0 with
   | Some p ->
     Some
       (match r with
        | R13 ->
          { is_R0 = p; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 = ls.is_R3;
            is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = ls.is_R6; is_R7 =
            ls.is_R7; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 = ls.is_R10 }
        | R14 ->
          { is_R0 = ls.is_R0; is_R1 = p; is_R2 = ls.is_R2; is_R3 = ls.is_R3;
            is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = ls.is_R6; is_R7 =
            ls.is_R7; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 = ls.is_R10 }
        | R15 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = p; is_R3 = ls.is_R3;
            is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = ls.is_R6; is_R7 =
            ls.is_R7; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 = ls.is_R10 }
        | R16 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 = p;
            is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = ls.is_R6; is_R7 =
            ls.is_R7; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 = ls.is_R10 }
        | R17 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 =
            ls.is_R3; is_R4 = p; is_R5 = ls.is_R5; is_R6 = ls.is_R6; is_R7 =
            ls.is_R7; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 = ls.is_R10 }
        | R18 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 =
            ls.is_R3; is_R4 = ls.is_R4; is_R5 = p; is_R6 = ls.is_R6; is_R7 =
            ls.is_R7; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 = ls.is_R10 }
        | R19 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 =
            ls.is_R3; is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = p; is_R7 =
            ls.is_R7; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 = ls.is_R10 }
        | R20 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 =
            ls.is_R3; is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = ls.is_R6;
            is_R7 = p; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 =
            ls.is_R10 }
        | R21 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 =
            ls.is_R3; is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = ls.is_R7;
            is_R7 = ls.is_R7; is_R8 = p; is_R9 = ls.is_R9; is_R10 =
            ls.is_R10 }
        | R22 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 =
            ls.is_R3; is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = ls.is_R7;
            is_R7 = ls.is_R7; is_R8 = ls.is_R8; is_R9 = p; is_R10 =
            ls.is_R10 }
        | R23 ->
          { is_R0 = ls.is_R0; is_R1 = ls.is_R1; is_R2 = ls.is_R2; is_R3 =
            ls.is_R3; is_R4 = ls.is_R4; is_R5 = ls.is_R5; is_R6 = ls.is_R7;
            is_R7 = ls.is_R7; is_R8 = ls.is_R8; is_R9 = ls.is_R9; is_R10 = p })
   | None -> None)

(** val is_load_reg : reg -> loadStoreRegs -> bool **)

let is_load_reg r ls =
  let perm = eval_LoadStoreRegs ls r in
  if loadStorePerm_eqb perm LoadPerm
  then true
  else loadStorePerm_eqb perm LoadAndStore

(** val is_store_reg : reg -> loadStoreRegs -> bool **)

let is_store_reg r ls =
  let perm = eval_LoadStoreRegs ls r in
  if loadStorePerm_eqb perm StorePerm
  then true
  else loadStorePerm_eqb perm LoadAndStore

(** val is_non_reg : reg -> loadStoreRegs -> bool **)

let is_non_reg r ls =
  let perm = eval_LoadStoreRegs ls r in loadStorePerm_eqb perm NonPerm

(** val jITTED_LIST_MAX_LENGTH : int **)

let jITTED_LIST_MAX_LENGTH =
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ


type jit_state = { pc_loc : int; flag : val0; regs_st : val0; mrs_num : 
                   int; bpf_mrs : myMemRegionsType; ins_len : int;
                   entry_len : int; ep_list : ListNat.t; is_IR11 : bool;
                   load_store_regs : loadStoreRegs; offset : int;
                   thumb_len : int; thumb : List16.t; ibpf : List64AsArray.t;
                   stack_ofs : int; jitted_len : int; jitted_list : List16.t;
                   jit_mem : Mem.mem }

(** val empty_jit_state : jit_state **)

let empty_jit_state =
  { pc_loc = Int.zero; flag = Vundef; regs_st = Vundef; mrs_num = 0;
    bpf_mrs = []; ins_len = 0; entry_len = 0; ep_list = []; is_IR11 = false;
    load_store_regs = init_LoadStoreRegs; offset = 0; thumb_len = 0; thumb =
    (List16.create_int_list jITTED_LIST_MAX_LENGTH); ibpf = []; stack_ofs =
    0; jitted_len = 0; jitted_list = []; jit_mem = Mem.empty }

(** val eval_pc : jit_state -> int **)

let eval_pc st =
  st.pc_loc

(** val upd_pc : int -> jit_state -> jit_state **)

let upd_pc p st =
  { pc_loc = p; flag = st.flag; regs_st = st.regs_st; mrs_num = st.mrs_num;
    bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len = st.entry_len;
    ep_list = st.ep_list; is_IR11 = st.is_IR11; load_store_regs =
    st.load_store_regs; offset = st.offset; thumb_len = st.thumb_len; thumb =
    st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs; jitted_len =
    st.jitted_len; jitted_list = st.jitted_list; jit_mem = st.jit_mem }

(** val upd_pc_incr : jit_state -> jit_state **)

let upd_pc_incr st =
  { pc_loc = (Int.add st.pc_loc Int.one); flag = st.flag; regs_st =
    st.regs_st; mrs_num = st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len =
    st.ins_len; entry_len = st.entry_len; ep_list = st.ep_list; is_IR11 =
    st.is_IR11; load_store_regs = st.load_store_regs; offset = st.offset;
    thumb_len = st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs =
    st.stack_ofs; jitted_len = st.jitted_len; jitted_list = st.jitted_list;
    jit_mem = st.jit_mem }

(** val eval_flag : jit_state -> val0 **)

let eval_flag st =
  match Mem.loadv Mint32 st.jit_mem st.flag with
  | Some res -> res
  | None -> vnullptr

(** val upd_flag' : val0 -> jit_state -> Mem.mem **)

let upd_flag' f st =
  match Mem.storev Mint32 st.jit_mem st.flag f with
  | Some m0 -> m0
  | None -> Mem.empty

(** val upd_flag : bpf_flag -> jit_state -> jit_state **)

let upd_flag f st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs;
    jitted_len = st.jitted_len; jitted_list = st.jitted_list; jit_mem =
    (upd_flag' (Vint (int_of_flag f)) st) }

(** val eval_reg : reg -> jit_state -> val0 **)

let eval_reg r st =
  let ptr =
    Val.add st.regs_st (Vint
      (Int.repr
        (Z.mul ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))) (id_of_reg r))))
  in
  (match Mem.loadv Mint64 st.jit_mem ptr with
   | Some res -> res
   | None -> vnullptr)

(** val upd_reg' : reg -> val0 -> jit_state -> Mem.mem **)

let upd_reg' r v st =
  let ptr =
    Val.add st.regs_st (Vint
      (Int.repr
        (Z.mul ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))) (id_of_reg r))))
  in
  (match Mem.storev Mint64 st.jit_mem ptr v with
   | Some m0 -> m0
   | None -> Mem.empty)

(** val upd_reg : reg -> val0 -> jit_state -> jit_state **)

let upd_reg r v st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs;
    jitted_len = st.jitted_len; jitted_list = st.jitted_list; jit_mem =
    (upd_reg' r v st) }

(** val eval_mem_num : jit_state -> int **)

let eval_mem_num st =
  st.mrs_num

(** val eval_mem_regions : jit_state -> myMemRegionsType **)

let eval_mem_regions st =
  st.bpf_mrs

(** val eval_mem : jit_state -> Mem.mem **)

let eval_mem st =
  st.jit_mem

(** val upd_mem : Mem.mem -> jit_state -> jit_state **)

let upd_mem m0 st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs;
    jitted_len = st.jitted_len; jitted_list = st.jitted_list; jit_mem = m0 }

(** val load_mem : memory_chunk -> val0 -> jit_state -> val0 option **)

let load_mem chunk ptr st =
  match chunk with
  | Mint8unsigned ->
    (match Mem.loadv chunk st.jit_mem ptr with
     | Some res -> _to_vlong res
     | None -> None)
  | Mint16unsigned ->
    (match Mem.loadv chunk st.jit_mem ptr with
     | Some res -> _to_vlong res
     | None -> None)
  | Mint32 ->
    (match Mem.loadv chunk st.jit_mem ptr with
     | Some res -> _to_vlong res
     | None -> None)
  | Mint64 -> Mem.loadv chunk st.jit_mem ptr
  | _ -> None

(** val store_mem_imm :
    val0 -> memory_chunk -> val0 -> jit_state -> jit_state option **)

let store_mem_imm ptr chunk v st =
  match chunk with
  | Mint8unsigned ->
    let src = vint_to_vint_or_vlong chunk v in
    (match Mem.storev chunk st.jit_mem ptr src with
     | Some m0 -> Some (upd_mem m0 st)
     | None -> None)
  | Mint16unsigned ->
    let src = vint_to_vint_or_vlong chunk v in
    (match Mem.storev chunk st.jit_mem ptr src with
     | Some m0 -> Some (upd_mem m0 st)
     | None -> None)
  | Mint32 ->
    let src = vint_to_vint_or_vlong chunk v in
    (match Mem.storev chunk st.jit_mem ptr src with
     | Some m0 -> Some (upd_mem m0 st)
     | None -> None)
  | Mint64 ->
    let src = vint_to_vint_or_vlong chunk v in
    (match Mem.storev chunk st.jit_mem ptr src with
     | Some m0 -> Some (upd_mem m0 st)
     | None -> None)
  | _ -> None

(** val store_mem_reg :
    val0 -> memory_chunk -> val0 -> jit_state -> jit_state option **)

let store_mem_reg ptr chunk v st =
  match chunk with
  | Mint8unsigned ->
    let src = vlong_to_vint_or_vlong chunk v in
    (match Mem.storev chunk st.jit_mem ptr src with
     | Some m0 -> Some (upd_mem m0 st)
     | None -> None)
  | Mint16unsigned ->
    let src = vlong_to_vint_or_vlong chunk v in
    (match Mem.storev chunk st.jit_mem ptr src with
     | Some m0 -> Some (upd_mem m0 st)
     | None -> None)
  | Mint32 ->
    let src = vlong_to_vint_or_vlong chunk v in
    (match Mem.storev chunk st.jit_mem ptr src with
     | Some m0 -> Some (upd_mem m0 st)
     | None -> None)
  | Mint64 ->
    let src = vlong_to_vint_or_vlong chunk v in
    (match Mem.storev chunk st.jit_mem ptr src with
     | Some m0 -> Some (upd_mem m0 st)
     | None -> None)
  | _ -> None

(** val eval_ins_len : jit_state -> int **)

let eval_ins_len st =
  Int.repr (Z.of_nat st.ins_len)

(** val eval_ins : int -> jit_state -> int **)

let eval_ins idx st =
  List64AsArray.index st.ibpf idx

(** val upd_ibpf : int -> int -> jit_state -> jit_state **)

let upd_ibpf ins ep st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf =
    (List64AsArray.assign st.ibpf ep ins); stack_ofs = st.stack_ofs;
    jitted_len = st.jitted_len; jitted_list = st.jitted_list; jit_mem =
    st.jit_mem }

(** val add_new_entry_point : int -> jit_state -> jit_state **)

let add_new_entry_point v st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    (Stdlib.succ st.entry_len); ep_list =
    (ListNat.assign st.ep_list st.entry_len v); is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs;
    jitted_len = st.jitted_len; jitted_list = st.jitted_list; jit_mem =
    st.jit_mem }

(** val upd_IR11_jittedthumb : bool -> jit_state -> jit_state **)

let upd_IR11_jittedthumb f st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = f; load_store_regs =
    st.load_store_regs; offset = st.offset; thumb_len = st.thumb_len; thumb =
    st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs; jitted_len =
    st.jitted_len; jitted_list = st.jitted_list; jit_mem = st.jit_mem }

(** val add_ins_jittedthumb : int -> jit_state -> jit_state **)

let add_ins_jittedthumb ins st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    (Stdlib.succ st.thumb_len); thumb =
    (List16.assign st.thumb st.thumb_len ins); ibpf = st.ibpf; stack_ofs =
    st.stack_ofs; jitted_len = st.jitted_len; jitted_list = st.jitted_list;
    jit_mem = st.jit_mem }

(** val upd_bpf_offset_jittedthumb : jit_state -> jit_state **)

let upd_bpf_offset_jittedthumb st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = (Stdlib.succ
    st.offset); thumb_len = st.thumb_len; thumb = st.thumb; ibpf = st.ibpf;
    stack_ofs = st.stack_ofs; jitted_len = st.jitted_len; jitted_list =
    st.jitted_list; jit_mem = st.jit_mem }

(** val upd_load_store_regs_jittedthumb :
    reg -> loadStorePerm -> jit_state -> jit_state option **)

let upd_load_store_regs_jittedthumb r ls st =
  match upd_LoadStoreRegs st.load_store_regs r ls with
  | Some lsr0 ->
    Some { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st;
      mrs_num = st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len;
      entry_len = st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
      load_store_regs = lsr0; offset = st.offset; thumb_len = st.thumb_len;
      thumb = st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs;
      jitted_len = st.jitted_len; jitted_list = st.jitted_list; jit_mem =
      st.jit_mem }
  | None -> None

(** val upd_thumb_jittedthumb : int -> int -> jit_state -> jit_state **)

let upd_thumb_jittedthumb ins pc st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = (List16.assign st.thumb pc ins); ibpf = st.ibpf;
    stack_ofs = st.stack_ofs; jitted_len = st.jitted_len; jitted_list =
    st.jitted_list; jit_mem = st.jit_mem }

(** val init_fp_push_stack : jit_state -> jit_state **)

let init_fp_push_stack st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs =
    (Nat.add st.stack_ofs (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ 0))))); jitted_len = st.jitted_len; jitted_list =
    st.jitted_list; jit_mem = st.jit_mem }

(** val add_ins_to_push_stack : int -> jit_state -> jit_state **)

let add_ins_to_push_stack ins st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs =
    (Nat.add st.stack_ofs (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ 0))))); jitted_len = (Stdlib.succ st.jitted_len);
    jitted_list = (List16.assign st.jitted_list st.jitted_len ins); jit_mem =
    st.jit_mem }

(** val add_ins_to_pop_stack : int -> jit_state -> jit_state **)

let add_ins_to_pop_stack ins st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs =
    (Nat.sub st.stack_ofs (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ 0))))); jitted_len = (Stdlib.succ st.jitted_len);
    jitted_list = (List16.assign st.jitted_list st.jitted_len ins); jit_mem =
    st.jit_mem }

(** val upd_jitted_list : int -> jit_state -> jit_state **)

let upd_jitted_list ins st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs;
    jitted_len = (Stdlib.succ st.jitted_len); jitted_list =
    (List16.assign st.jitted_list st.jitted_len ins); jit_mem = st.jit_mem }

(** val compcertbin_signature : signature **)

let compcertbin_signature =
  { sig_args = (Tint :: (Tint :: [])); sig_res = (Tret Tint); sig_cc =
    cc_default }

(** val jit_state_start_address : val0 **)

let jit_state_start_address = Vptr (2, 0)

(** val jitted_arm_start_address : val0 **)

let jitted_arm_start_address = Vptr (3, 0)

(** val magic_function :
    int -> int -> int -> jit_state -> jit_state option **)

let magic_function fuel ofs sz st =
  let jitted_arm_address =
    Val.add jitted_arm_start_address (Vint
      (Int.mul ofs (Int.repr ((fun p->2*p) 1))))
  in
  let arm_argu_list_val =
    jitted_arm_address :: (jit_state_start_address :: [])
  in
  (match bin_exec fuel compcertbin_signature (Int.unsigned sz) Ptrofs.zero
           arm_argu_list_val st.jit_mem with
   | Some p -> let (_, m0) = p in Some (upd_mem m0 st)
   | None -> None)

(** val reset_init_jittedthumb : jit_state -> jit_state **)

let reset_init_jittedthumb st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = false; load_store_regs =
    init_LoadStoreRegs; offset = 0; thumb_len = 0; thumb = st.thumb; ibpf =
    st.ibpf; stack_ofs = st.stack_ofs; jitted_len = st.jitted_len;
    jitted_list = st.jitted_list; jit_mem = st.jit_mem }

(** val eval_thumb_ins : int -> jit_state -> int **)

let eval_thumb_ins idx st =
  List16.index st.thumb idx

(** val is_ep_exists : int -> jit_state -> bool **)

let is_ep_exists v st =
  ListNat.is_exists st.ep_list st.entry_len v

(** val stack_ofs_sub_4 : jit_state -> jit_state **)

let stack_ofs_sub_4 st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len =
    st.entry_len; ep_list = st.ep_list; is_IR11 = st.is_IR11;
    load_store_regs = st.load_store_regs; offset = st.offset; thumb_len =
    st.thumb_len; thumb = st.thumb; ibpf = st.ibpf; stack_ofs =
    (Nat.sub st.stack_ofs (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ 0))))); jitted_len = st.jitted_len; jitted_list =
    st.jitted_list; jit_mem = st.jit_mem }

(** val eval_epl_ep : int -> jit_state -> int **)

let eval_epl_ep idx st =
  ListNat.index st.ep_list idx

(** val reset_init_entry_point : jit_state -> jit_state **)

let reset_init_entry_point st =
  { pc_loc = st.pc_loc; flag = st.flag; regs_st = st.regs_st; mrs_num =
    st.mrs_num; bpf_mrs = st.bpf_mrs; ins_len = st.ins_len; entry_len = 0;
    ep_list = st.ep_list; is_IR11 = st.is_IR11; load_store_regs =
    st.load_store_regs; offset = st.offset; thumb_len = st.thumb_len; thumb =
    st.thumb; ibpf = st.ibpf; stack_ofs = st.stack_ofs; jitted_len =
    st.jitted_len; jitted_list = st.jitted_list; jit_mem = st.jit_mem }

(** val ireg_eqb0 : ireg -> ireg -> bool **)

let ireg_eqb0 r0 r1 =
  match r0 with
  | IR0 -> (match r1 with
            | IR0 -> true
            | _ -> false)
  | IR1 -> (match r1 with
            | IR1 -> true
            | _ -> false)
  | IR2 -> (match r1 with
            | IR2 -> true
            | _ -> false)
  | IR3 -> (match r1 with
            | IR3 -> true
            | _ -> false)
  | IR4 -> (match r1 with
            | IR4 -> true
            | _ -> false)
  | IR5 -> (match r1 with
            | IR5 -> true
            | _ -> false)
  | IR6 -> (match r1 with
            | IR6 -> true
            | _ -> false)
  | IR7 -> (match r1 with
            | IR7 -> true
            | _ -> false)
  | IR8 -> (match r1 with
            | IR8 -> true
            | _ -> false)
  | IR9 -> (match r1 with
            | IR9 -> true
            | _ -> false)
  | IR10 -> (match r1 with
             | IR10 -> true
             | _ -> false)
  | IR11 -> (match r1 with
             | IR11 -> true
             | _ -> false)
  | IR12 -> (match r1 with
             | IR12 -> true
             | _ -> false)
  | IR13 -> (match r1 with
             | IR13 -> true
             | _ -> false)
  | IR14 -> (match r1 with
             | IR14 -> true
             | _ -> false)

(** val reg_ireg_eqb : reg -> ireg -> bool **)

let reg_ireg_eqb r0 r1 =
  match r0 with
  | R13 -> (match r1 with
            | IR0 -> true
            | _ -> false)
  | R14 -> (match r1 with
            | IR1 -> true
            | _ -> false)
  | R15 -> (match r1 with
            | IR2 -> true
            | _ -> false)
  | R16 -> (match r1 with
            | IR3 -> true
            | _ -> false)
  | R17 -> (match r1 with
            | IR4 -> true
            | _ -> false)
  | R18 -> (match r1 with
            | IR5 -> true
            | _ -> false)
  | R19 -> (match r1 with
            | IR6 -> true
            | _ -> false)
  | R20 -> (match r1 with
            | IR7 -> true
            | _ -> false)
  | R21 -> (match r1 with
            | IR8 -> true
            | _ -> false)
  | R22 -> (match r1 with
            | IR9 -> true
            | _ -> false)
  | R23 -> (match r1 with
            | IR10 -> true
            | _ -> false)

(** val reg_of_ireg : ireg -> reg option **)

let reg_of_ireg = function
| IR0 -> Some R13
| IR1 -> Some R14
| IR2 -> Some R15
| IR3 -> Some R16
| IR4 -> Some R17
| IR5 -> Some R18
| IR6 -> Some R19
| IR7 -> Some R20
| IR8 -> Some R21
| IR9 -> Some R22
| IR10 -> Some R23
| _ -> None

(** val ireg_of_reg : reg -> ireg **)

let ireg_of_reg = function
| R13 -> IR0
| R14 -> IR1
| R15 -> IR2
| R16 -> IR3
| R17 -> IR4
| R18 -> IR5
| R19 -> IR6
| R20 -> IR7
| R21 -> IR8
| R22 -> IR9
| R23 -> IR10

(** val ireg2nat : ireg -> int **)

let ireg2nat = function
| IR0 -> 0
| IR1 -> Stdlib.succ 0
| IR2 -> Stdlib.succ (Stdlib.succ 0)
| IR3 -> Stdlib.succ (Stdlib.succ (Stdlib.succ 0))
| IR4 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ 0)))
| IR5 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ 0))))
| IR6 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ 0)))))
| IR7 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))
| IR8 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    0)))))))
| IR9 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ 0))))))))
| IR10 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ 0)))))))))
| IR11 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))))
| IR12 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    0)))))))))))
| IR13 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ 0))))))))))))
| IR14 ->
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ 0)))))))))))))

(** val int_of_ireg : ireg -> int **)

let int_of_ireg r =
  Int.repr (Z.of_nat (ireg2nat r))

(** val encode_arm0 : int -> int -> int -> int **)

let encode_arm0 v ins from =
  Int.coq_or (Int.shl v (Int.repr (Z.of_nat from))) ins

type opcode_alu32_reg =
| BPF_ADD32_REG
| BPF_SUB32_REG
| BPF_MUL32_REG
| BPF_DIV32_REG
| BPF_OR32_REG
| BPF_AND32_REG
| BPF_LSH32_REG
| BPF_RSH32_REG
| BPF_XOR32_REG
| BPF_MOV32_REG
| BPF_ARSH32_REG
| BPF_ALU32_REG_ILLEGAL_INS

type opcode_alu32_imm =
| BPF_ADD32_IMM
| BPF_SUB32_IMM
| BPF_MUL32_IMM
| BPF_OR32_IMM
| BPF_AND32_IMM
| BPF_XOR32_IMM
| BPF_MOV32_IMM
| BPF_ALU32_IMM_ILLEGAL_INS

(** val opcode_alu32_imm_eqb :
    opcode_alu32_imm -> opcode_alu32_imm -> bool **)

let opcode_alu32_imm_eqb op0 op1 =
  match op0 with
  | BPF_ADD32_IMM -> (match op1 with
                      | BPF_ADD32_IMM -> true
                      | _ -> false)
  | BPF_SUB32_IMM -> (match op1 with
                      | BPF_SUB32_IMM -> true
                      | _ -> false)
  | BPF_MUL32_IMM -> (match op1 with
                      | BPF_MUL32_IMM -> true
                      | _ -> false)
  | BPF_OR32_IMM -> (match op1 with
                     | BPF_OR32_IMM -> true
                     | _ -> false)
  | BPF_AND32_IMM -> (match op1 with
                      | BPF_AND32_IMM -> true
                      | _ -> false)
  | BPF_XOR32_IMM -> (match op1 with
                      | BPF_XOR32_IMM -> true
                      | _ -> false)
  | BPF_MOV32_IMM -> (match op1 with
                      | BPF_MOV32_IMM -> true
                      | _ -> false)
  | BPF_ALU32_IMM_ILLEGAL_INS ->
    (match op1 with
     | BPF_ALU32_IMM_ILLEGAL_INS -> true
     | _ -> false)

(** val nat_to_opcode_alu32_reg : int -> opcode_alu32_reg **)

let nat_to_opcode_alu32_reg op =
  if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
       (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
       (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
       (Stdlib.succ 0))))))))))))
  then BPF_ADD32_REG
  else if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ 0))))))))))))))))))))))))))))
       then BPF_SUB32_REG
       else if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ
                 0))))))))))))))))))))))))))))))))))))))))))))
            then BPF_MUL32_REG
            else if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                 then BPF_DIV32_REG
                 else if (=) op (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ
                           0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                      then BPF_OR32_REG
                      else if (=) op (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                           then BPF_AND32_REG
                           else if (=) op (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                then BPF_LSH32_REG
                                else if (=) op (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ (Stdlib.succ
                                          (Stdlib.succ
                                          0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                     then BPF_RSH32_REG
                                     else if (=) op (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               (Stdlib.succ
                                               0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                          then BPF_XOR32_REG
                                          else if (=) op (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    (Stdlib.succ
                                                    0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                               then BPF_MOV32_REG
                                               else if (=) op
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         (Stdlib.succ
                                                         0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                    then BPF_ARSH32_REG
                                                    else BPF_ALU32_REG_ILLEGAL_INS

(** val nat_to_opcode_alu32_imm : int -> opcode_alu32_imm **)

let nat_to_opcode_alu32_imm op =
  if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
       (Stdlib.succ 0))))
  then BPF_ADD32_IMM
  else if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ (Stdlib.succ
            (Stdlib.succ (Stdlib.succ 0))))))))))))))))))))
       then BPF_SUB32_IMM
       else if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 (Stdlib.succ (Stdlib.succ (Stdlib.succ
                 0))))))))))))))))))))))))))))))))))))
            then BPF_MUL32_IMM
            else if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ (Stdlib.succ
                      (Stdlib.succ (Stdlib.succ
                      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                 then BPF_OR32_IMM
                 else if (=) op (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ (Stdlib.succ (Stdlib.succ
                           (Stdlib.succ
                           0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                      then BPF_AND32_IMM
                      else if (=) op (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                (Stdlib.succ (Stdlib.succ
                                0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                           then BPF_XOR32_IMM
                           else if (=) op (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     (Stdlib.succ (Stdlib.succ
                                     0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                then BPF_MOV32_IMM
                                else BPF_ALU32_IMM_ILLEGAL_INS

type opcode_alu32 =
| ALU32_REG
| ALU32_IMM
| ALU32_ILLEGAL_INS

(** val nat_to_opcode_alu32 : int -> opcode_alu32 **)

let nat_to_opcode_alu32 op =
  let opc =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))
  in
  if (=) opc (Stdlib.succ (Stdlib.succ (Stdlib.succ
       (Stdlib.succ 0))))
  then if Int.eq Int.zero
            (Int.coq_and (Int.repr (Z.of_nat op))
              (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))))
       then ALU32_IMM
       else ALU32_REG
  else ALU32_ILLEGAL_INS

(** val ins_is_bpf_alu32 : int -> bool **)

let ins_is_bpf_alu32 ins =
  let op = get_opcode ins in
  if (||) ((=) op (Z.to_nat ((fun p->2*p) ((fun p->2*p) 1))))
       ((=) op (Z.to_nat ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) 1)))))
  then true
  else if (||)
            ((=) op
              (Z.to_nat ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
                ((fun p->2*p) 1))))))
            ((=) op
              (Z.to_nat ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
                ((fun p->1+2*p) 1))))))
       then true
       else if (||)
                 ((=) op
                   (Z.to_nat ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
                     ((fun p->2*p) ((fun p->2*p) 1)))))))
                 ((=) op
                   (Z.to_nat ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
                     ((fun p->1+2*p) ((fun p->2*p) 1)))))))
            then true
            else if (=) op
                      (Z.to_nat ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
                        ((fun p->1+2*p) ((fun p->1+2*p) 1))))))
                 then true
                 else if (||)
                           ((=) op
                             (Z.to_nat ((fun p->2*p) ((fun p->2*p)
                               ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
                               ((fun p->2*p) 1))))))))
                           ((=) op
                             (Z.to_nat ((fun p->2*p) ((fun p->2*p)
                               ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
                               ((fun p->2*p) 1))))))))
                      then true
                      else if (||)
                                ((=) op
                                  (Z.to_nat ((fun p->2*p) ((fun p->2*p)
                                    ((fun p->1+2*p) ((fun p->2*p)
                                    ((fun p->1+2*p) ((fun p->2*p) 1))))))))
                                ((=) op
                                  (Z.to_nat ((fun p->2*p) ((fun p->2*p)
                                    ((fun p->1+2*p) ((fun p->1+2*p)
                                    ((fun p->1+2*p) ((fun p->2*p) 1))))))))
                           then true
                           else if (=) op
                                     (Z.to_nat ((fun p->2*p) ((fun p->2*p)
                                       ((fun p->1+2*p) ((fun p->1+2*p)
                                       ((fun p->2*p) ((fun p->1+2*p) 1)))))))
                                then true
                                else if (=) op
                                          (Z.to_nat ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) 1)))))))
                                     then true
                                     else if (||)
                                               ((=) op
                                                 (Z.to_nat ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p) 1)))))))))
                                               ((=) op
                                                 (Z.to_nat ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p) 1)))))))))
                                          then true
                                          else if (||)
                                                    ((=) op
                                                      (Z.to_nat ((fun p->2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        1)))))))))
                                                    ((=) op
                                                      (Z.to_nat ((fun p->2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        1)))))))))
                                               then true
                                               else (=) op
                                                      (Z.to_nat ((fun p->2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->1+2*p)
                                                        1))))))))

(** val ins_is_bpf_jump : int -> bool **)

let ins_is_bpf_jump ins =
  let op = get_opcode ins in
  if (=) op (Z.to_nat ((fun p->1+2*p) ((fun p->2*p) 1)))
  then true
  else if (||)
            ((=) op
              (Z.to_nat ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
                ((fun p->2*p) 1))))))
            ((=) op
              (Z.to_nat ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
                ((fun p->1+2*p) 1))))))
       then true
       else if (||)
                 ((=) op
                   (Z.to_nat ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
                     ((fun p->2*p) ((fun p->2*p) 1)))))))
                 ((=) op
                   (Z.to_nat ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
                     ((fun p->1+2*p) ((fun p->2*p) 1)))))))
            then true
            else if (||)
                      ((=) op
                        (Z.to_nat ((fun p->1+2*p) ((fun p->2*p)
                          ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
                          1)))))))
                      ((=) op
                        (Z.to_nat ((fun p->1+2*p) ((fun p->2*p)
                          ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                          1)))))))
                 then true
                 else if (||)
                           ((=) op
                             (Z.to_nat ((fun p->1+2*p) ((fun p->2*p)
                               ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
                               ((fun p->2*p) 1))))))))
                           ((=) op
                             (Z.to_nat ((fun p->1+2*p) ((fun p->2*p)
                               ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
                               ((fun p->2*p) 1))))))))
                      then true
                      else if (||)
                                ((=) op
                                  (Z.to_nat ((fun p->1+2*p) ((fun p->2*p)
                                    ((fun p->1+2*p) ((fun p->2*p)
                                    ((fun p->1+2*p) ((fun p->2*p) 1))))))))
                                ((=) op
                                  (Z.to_nat ((fun p->1+2*p) ((fun p->2*p)
                                    ((fun p->1+2*p) ((fun p->1+2*p)
                                    ((fun p->1+2*p) ((fun p->2*p) 1))))))))
                           then true
                           else if (||)
                                     ((=) op
                                       (Z.to_nat ((fun p->1+2*p)
                                         ((fun p->2*p) ((fun p->1+2*p)
                                         ((fun p->2*p) ((fun p->2*p)
                                         ((fun p->1+2*p) 1))))))))
                                     ((=) op
                                       (Z.to_nat ((fun p->1+2*p)
                                         ((fun p->2*p) ((fun p->1+2*p)
                                         ((fun p->1+2*p) ((fun p->2*p)
                                         ((fun p->1+2*p) 1))))))))
                                then true
                                else if (||)
                                          ((=) op
                                            (Z.to_nat ((fun p->1+2*p)
                                              ((fun p->2*p) ((fun p->1+2*p)
                                              ((fun p->2*p) ((fun p->1+2*p)
                                              ((fun p->1+2*p) 1))))))))
                                          ((=) op
                                            (Z.to_nat ((fun p->1+2*p)
                                              ((fun p->2*p) ((fun p->1+2*p)
                                              ((fun p->1+2*p) ((fun p->1+2*p)
                                              ((fun p->1+2*p) 1))))))))
                                     then true
                                     else if (||)
                                               ((=) op
                                                 (Z.to_nat ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p) 1)))))))))
                                               ((=) op
                                                 (Z.to_nat ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p) 1)))))))))
                                          then true
                                          else if (||)
                                                    ((=) op
                                                      (Z.to_nat
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        1)))))))))
                                                    ((=) op
                                                      (Z.to_nat
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->1+2*p)
                                                        ((fun p->2*p)
                                                        1)))))))))
                                               then true
                                               else if (||)
                                                         ((=) op
                                                           (Z.to_nat
                                                             ((fun p->1+2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->1+2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->1+2*p)
                                                             1)))))))))
                                                         ((=) op
                                                           (Z.to_nat
                                                             ((fun p->1+2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->1+2*p)
                                                             ((fun p->1+2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->1+2*p)
                                                             1)))))))))
                                                    then true
                                                    else (||)
                                                           ((=) op
                                                             (Z.to_nat
                                                               ((fun p->1+2*p)
                                                               ((fun p->2*p)
                                                               ((fun p->1+2*p)
                                                               ((fun p->2*p)
                                                               ((fun p->1+2*p)
                                                               ((fun p->2*p)
                                                               ((fun p->1+2*p)
                                                               1)))))))))
                                                           ((=) op
                                                             (Z.to_nat
                                                               ((fun p->1+2*p)
                                                               ((fun p->2*p)
                                                               ((fun p->1+2*p)
                                                               ((fun p->1+2*p)
                                                               ((fun p->1+2*p)
                                                               ((fun p->2*p)
                                                               ((fun p->1+2*p)
                                                               1)))))))))

(** val opcode_reg_of_imm : opcode_alu32_imm -> opcode_alu32_reg **)

let opcode_reg_of_imm = function
| BPF_ADD32_IMM -> BPF_ADD32_REG
| BPF_SUB32_IMM -> BPF_SUB32_REG
| BPF_MUL32_IMM -> BPF_MUL32_REG
| BPF_OR32_IMM -> BPF_OR32_REG
| BPF_AND32_IMM -> BPF_AND32_REG
| BPF_XOR32_IMM -> BPF_XOR32_REG
| BPF_MOV32_IMM -> BPF_MOV32_REG
| BPF_ALU32_IMM_ILLEGAL_INS -> BPF_ALU32_REG_ILLEGAL_INS

type ibpf_offset = int

type ibpf_instruction =
| BPF of instruction0
| BPF_JIT of off * ibpf_offset

(** val iBPF_opcode : int **)

let iBPF_opcode =
  Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val ibpf_decode : int -> ibpf_instruction option **)

let ibpf_decode ins =
  let opcode0 = get_opcode ins in
  if (=) opcode0 iBPF_opcode
  then let ofs16 = get_offset0 ins in
       let ofs32 = get_immediate ins in Some (BPF_JIT (ofs16, ofs32))
  else (match decode ins with
        | Some i -> Some (BPF i)
        | None -> None)

(** val ibpf_decode_prog_aux :
    int -> int -> List64AsArray.t -> ibpf_instruction list **)

let rec ibpf_decode_prog_aux fuel pc l =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> [])
    (fun n0 ->
    match ibpf_decode (List64AsArray.index l (Int.repr (Z.of_nat pc))) with
    | Some ins ->
      app (ins :: []) (ibpf_decode_prog_aux n0 (Stdlib.succ pc) l)
    | None -> [])
    fuel

(** val ibpf_decode_prog : List64AsArray.t -> int -> ibpf_instruction list **)

let ibpf_decode_prog l len =
  ibpf_decode_prog_aux len 0 l

(** val cOND_NE : int **)

let cOND_NE =
  Int.repr 1

(** val cOND_LT : int **)

let cOND_LT =
  Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) 1)))

(** val aDD_R_OP : int **)

let aDD_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    1))))))))))))))

(** val aDD_I_OP : int **)

let aDD_I_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) 1)))))))))))))))

(** val aND_R_OP : int **)

let aND_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val aND_I_OP : int **)

let aND_I_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) 1)))))))))))))))

(** val aSR_R_OP : int **)

let aSR_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val cMP_I_OP : int **)

let cMP_I_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val eOR_R_OP : int **)

let eOR_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val eOR_I_OP : int **)

let eOR_I_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) 1)))))))))))))))

(** val lSL_R_OP : int **)

let lSL_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val lSR_R_OP : int **)

let lSR_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val mOVW_OP : int **)

let mOVW_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val mOVT_OP : int **)

let mOVT_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val mOV_R_OP : int **)

let mOV_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    1))))))))))))))

(** val mUL_OP : int **)

let mUL_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val oRR_R_OP : int **)

let oRR_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val oRR_I_OP : int **)

let oRR_I_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) 1)))))))))))))))

(** val sUB_R_OP : int **)

let sUB_R_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val sUB_I_OP : int **)

let sUB_I_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val uDIV_OP : int **)

let uDIV_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val bX_OP : int **)

let bX_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    1))))))))))))))

(** val b_OP : int **)

let b_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->1+2*p) 1)))))))))))))))

(** val lDR_I_OP : int **)

let lDR_I_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val sTR_I_OP : int **)

let sTR_I_OP =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val bNE_0 : int **)

let bNE_0 =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
    ((fun p->1+2*p) 1)))))))))))))))

(** val bLT_0 : int **)

let bLT_0 =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->2*p) ((fun p->1+2*p) 1)))))))))))))))

(** val rBPF_State_REG : ireg **)

let rBPF_State_REG =
  IR12

(** val jIT_EXTRA_REG : ireg **)

let jIT_EXTRA_REG =
  IR11

(** val construct_thumb_alu_reg : int -> int -> int -> int -> int **)

let construct_thumb_alu_reg op d rm rdn =
  let ins_rdn = encode_arm0 rdn op 0 in
  let ins_rm =
    encode_arm0 rm ins_rdn (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))
  in
  encode_arm0 d ins_rm (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    0)))))))

(** val construct_thumb_b : int -> int -> int **)

let construct_thumb_b cd imm8 =
  let ins_imm8 = encode_arm0 imm8 b_OP 0 in
  encode_arm0 cd ins_imm8 (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ 0))))))))

(** val construct_thumb2_shift_rd_rm : int -> int -> int **)

let construct_thumb2_shift_rd_rm rd rm =
  let ins_rd =
    encode_arm0 rd rm (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ 0))))))))
  in
  encode_arm0 (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1))))
    ins_rd (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ 0))))))))))))

(** val jit_alu32_pre : jit_state -> jit_state **)

let jit_alu32_pre st =
  let st0 = init_fp_push_stack st in
  let ins_mov =
    construct_thumb_alu_reg mOV_R_OP Int.one Int.one
      (Int.repr ((fun p->2*p) ((fun p->2*p) 1)))
  in
  upd_jitted_list ins_mov st0

(** val jit_alu32_thumb_upd_save : reg -> jit_state -> jit_state **)

let jit_alu32_thumb_upd_save r st =
  if is_non_reg r st.load_store_regs
  then st
  else let str_low =
         encode_arm0 (Int.repr (Z.of_nat (ireg2nat IR13))) sTR_I_OP 0
       in
       let str_high =
         encode_arm0 (Int.repr (Z.of_nat (reg2nat r)))
           (Int.repr (Z.of_nat st.stack_ofs)) (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ 0))))))))))))
       in
       let str_st = add_ins_to_push_stack str_low st in
       upd_jitted_list str_high str_st

(** val jit_alu32_thumb_save_IR11 : jit_state -> jit_state **)

let jit_alu32_thumb_save_IR11 st =
  let str_low = encode_arm0 (Int.repr (Z.of_nat (ireg2nat IR13))) sTR_I_OP 0
  in
  let str_high =
    encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
      (Int.repr (Z.of_nat st.stack_ofs)) (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))))))))
  in
  let str_st = add_ins_to_push_stack str_low st in
  upd_jitted_list str_high str_st

(** val jit_alu32_thumb_save : jit_state -> jit_state **)

let jit_alu32_thumb_save st =
  let r1_st = jit_alu32_thumb_upd_save R14 st in
  let r2_st = jit_alu32_thumb_upd_save R15 r1_st in
  let r3_st = jit_alu32_thumb_upd_save R16 r2_st in
  let r4_st = jit_alu32_thumb_upd_save R17 r3_st in
  let r5_st = jit_alu32_thumb_upd_save R18 r4_st in
  let r6_st = jit_alu32_thumb_upd_save R19 r5_st in
  let r7_st = jit_alu32_thumb_upd_save R20 r6_st in
  let r8_st = jit_alu32_thumb_upd_save R21 r7_st in
  let r9_st = jit_alu32_thumb_upd_save R22 r8_st in
  let r10_st = jit_alu32_thumb_upd_save R23 r9_st in
  if st.is_IR11 then jit_alu32_thumb_save_IR11 r10_st else r10_st

(** val bPF_R0_OFS : int **)

let bPF_R0_OFS =
  Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))

(** val jit_alu32_thumb_upd_load : reg -> jit_state -> jit_state **)

let jit_alu32_thumb_upd_load r st =
  if is_load_reg r st.load_store_regs
  then let int_r = Int.repr (Z.of_nat (reg2nat r)) in
       let ldr_low =
         encode_arm0 (Int.repr (Z.of_nat (ireg2nat rBPF_State_REG))) lDR_I_OP
           0
       in
       let ldr_high =
         encode_arm0 int_r
           (Int.add bPF_R0_OFS
             (Int.mul int_r
               (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))))))
       in
       let str_st = upd_jitted_list ldr_low st in
       upd_jitted_list ldr_high str_st
  else st

(** val jit_alu32_thumb_load : jit_state -> jit_state **)

let jit_alu32_thumb_load st =
  let r0_st = jit_alu32_thumb_upd_load R13 st in
  let r1_st = jit_alu32_thumb_upd_load R14 r0_st in
  let r2_st = jit_alu32_thumb_upd_load R15 r1_st in
  let r3_st = jit_alu32_thumb_upd_load R16 r2_st in
  let r4_st = jit_alu32_thumb_upd_load R17 r3_st in
  let r5_st = jit_alu32_thumb_upd_load R18 r4_st in
  let r6_st = jit_alu32_thumb_upd_load R19 r5_st in
  let r7_st = jit_alu32_thumb_upd_load R20 r6_st in
  let r8_st = jit_alu32_thumb_upd_load R21 r7_st in
  let r9_st = jit_alu32_thumb_upd_load R22 r8_st in
  jit_alu32_thumb_upd_load R23 r9_st

(** val bpf_alu32_to_thumb_reg :
    opcode_alu32_reg -> reg -> ireg -> jit_state -> jit_state option * string **)

let bpf_alu32_to_thumb_reg op dst src st =
  match op with
  | BPF_ADD32_REG ->
    let d =
      if Int.lt (Int.repr (id_of_reg dst))
           (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
      then Int.zero
      else Int.one
    in
    let rdn =
      if Int.lt (Int.repr (id_of_reg dst))
           (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
      then Int.repr (id_of_reg dst)
      else Int.sub (Int.repr (id_of_reg dst))
             (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
    in
    let ins = construct_thumb_alu_reg aDD_R_OP d (int_of_ireg src) rdn in
    let ins_st = add_ins_jittedthumb ins st in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st -> ((Some str_st), "OK")
                | None -> (None, "add32_reg LoadStore error Store"))
             | None -> (None, "add32_reg error: reg_of_ireg src"))
     | None -> (None, "add32_reg LoadStore error Load"))
  | BPF_SUB32_REG ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) sUB_R_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) (int_of_ireg src)
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st -> ((Some str_st), "OK")
                | None -> (None, "sub32_reg LoadStore error Store"))
             | None -> (None, "sub32_reg error: reg_of_ireg src"))
     | None -> (None, "sub32_reg LoadStore error Load"))
  | BPF_MUL32_REG ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) mUL_OP 0 in
    let ins_hi0 =
      encode_arm0 (Int.repr (id_of_reg dst)) (int_of_ireg src)
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        0))))))))
    in
    let ins_hi =
      encode_arm0
        (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1))))
        ins_hi0 (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ 0))))))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st -> ((Some str_st), "OK")
                | None -> (None, "mul32_reg LoadStore error Store"))
             | None -> (None, "mul32_reg error: reg_of_ireg src"))
     | None -> (None, "mul32_reg LoadStore error Load"))
  | BPF_DIV32_REG ->
    if (&&) (reg_eqb dst R13) (ireg_eqb0 src IR1)
    then let st1 = upd_IR11_jittedthumb true st in
         let cmp_lo = encode_arm0 (int_of_ireg src) cMP_I_OP 0 in
         let cmp_hi =
           Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
             ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
             ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))
         in
         let cmp_st0 = add_ins_jittedthumb cmp_lo st1 in
         let cmp_st = add_ins_jittedthumb cmp_hi cmp_st0 in
         let b_ne =
           construct_thumb_b cOND_NE
             (Int.repr ((fun p->2*p) ((fun p->2*p) 1)))
         in
         let b_st = add_ins_jittedthumb b_ne cmp_st in
         let mov_st0 = add_ins_jittedthumb mOVW_OP b_st in
         let mov_hi =
           encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
             (Int.repr ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) 1))))
             (Stdlib.succ (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ 0))))))))
         in
         let mov_st = add_ins_jittedthumb mov_hi mov_st0 in
         let str_lo =
           encode_arm0 (Int.repr (Z.of_nat (ireg2nat rBPF_State_REG)))
             sTR_I_OP 0
         in
         let str_hi =
           encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
             (Int.repr ((fun p->2*p) ((fun p->2*p) 1))) (Stdlib.succ
             (Stdlib.succ (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ (Stdlib.succ
             (Stdlib.succ (Stdlib.succ 0))))))))))))
         in
         let str_st0 = add_ins_jittedthumb str_lo mov_st in
         let str_st = add_ins_jittedthumb str_hi str_st0 in
         let bne_st = add_ins_jittedthumb bNE_0 str_st in
         let div_st0 = add_ins_jittedthumb uDIV_OP bne_st in
         let div_st =
           add_ins_jittedthumb
             (Int.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
               ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
               ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
               ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
               1)))))))))))))))) div_st0
         in
         (match upd_load_store_regs_jittedthumb dst LoadAndStore div_st with
          | Some ldr_st ->
            if ireg_eqb0 src jIT_EXTRA_REG
            then ((Some ldr_st), "OK")
            else (match reg_of_ireg src with
                  | Some r ->
                    (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                     | Some str_st1 -> ((Some str_st1), "OK")
                     | None -> (None, "div32_reg LoadStore error Store"))
                  | None -> (None, "div32_reg error: reg_of_ireg src"))
          | None -> (None, "div32_reg LoadStore error Load"))
    else (None, "Not UDIV R0 R0 R1")
  | BPF_OR32_REG ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) oRR_R_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) (int_of_ireg src)
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st -> ((Some str_st), "OK")
                | None -> (None, "or32_reg LoadStore error Store"))
             | None -> (None, "or32_reg error: reg_of_ireg src"))
     | None -> (None, "or32_reg LoadStore error Load"))
  | BPF_AND32_REG ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) aND_R_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) (int_of_ireg src)
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st -> ((Some str_st), "OK")
                | None -> (None, "and32_reg LoadStore error Store"))
             | None -> (None, "and32_reg error: reg_of_ireg src"))
     | None -> (None, "and32_reg LoadStore error Load"))
  | BPF_LSH32_REG ->
    let st1 = upd_IR11_jittedthumb true st in
    let cmp_lo = encode_arm0 (int_of_ireg src) cMP_I_OP 0 in
    let cmp_hi =
      Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))
    in
    let cmp_st0 = add_ins_jittedthumb cmp_lo st1 in
    let cmp_st = add_ins_jittedthumb cmp_hi cmp_st0 in
    let b_lt =
      construct_thumb_b cOND_LT (Int.repr ((fun p->2*p) ((fun p->2*p) 1)))
    in
    let b_st = add_ins_jittedthumb b_lt cmp_st in
    let mov_st0 = add_ins_jittedthumb mOVW_OP b_st in
    let mov_hi =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
        (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) 1))))
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        0))))))))
    in
    let mov_st = add_ins_jittedthumb mov_hi mov_st0 in
    let str_lo =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat rBPF_State_REG))) sTR_I_OP 0
    in
    let str_hi =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
        (Int.repr ((fun p->2*p) ((fun p->2*p) 1))) (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))))))
    in
    let str_st0 = add_ins_jittedthumb str_lo mov_st in
    let str_st = add_ins_jittedthumb str_hi str_st0 in
    let blt_st = add_ins_jittedthumb bLT_0 str_st in
    let lsl_lo = encode_arm0 (Int.repr (id_of_reg dst)) lSL_R_OP 0 in
    let lsl_hi =
      construct_thumb2_shift_rd_rm (Int.repr (id_of_reg dst))
        (int_of_ireg src)
    in
    let lsl_st0 = add_ins_jittedthumb lsl_lo blt_st in
    let lsl_st = add_ins_jittedthumb lsl_hi lsl_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore lsl_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st1 -> ((Some str_st1), "OK")
                | None -> (None, "lsl32_reg LoadStore error Store"))
             | None -> (None, "lsl32_reg error: reg_of_ireg src"))
     | None -> (None, "lsl32_reg LoadStore error Load"))
  | BPF_RSH32_REG ->
    let st1 = upd_IR11_jittedthumb true st in
    let cmp_lo = encode_arm0 (int_of_ireg src) cMP_I_OP 0 in
    let cmp_hi =
      Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))
    in
    let cmp_st0 = add_ins_jittedthumb cmp_lo st1 in
    let cmp_st = add_ins_jittedthumb cmp_hi cmp_st0 in
    let b_lt =
      construct_thumb_b cOND_LT (Int.repr ((fun p->2*p) ((fun p->2*p) 1)))
    in
    let b_st = add_ins_jittedthumb b_lt cmp_st in
    let mov_st0 = add_ins_jittedthumb mOVW_OP b_st in
    let mov_hi =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
        (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) 1))))
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        0))))))))
    in
    let mov_st = add_ins_jittedthumb mov_hi mov_st0 in
    let str_lo =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat rBPF_State_REG))) sTR_I_OP 0
    in
    let str_hi =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
        (Int.repr ((fun p->2*p) ((fun p->2*p) 1))) (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))))))
    in
    let str_st0 = add_ins_jittedthumb str_lo mov_st in
    let str_st = add_ins_jittedthumb str_hi str_st0 in
    let blt_st = add_ins_jittedthumb bLT_0 str_st in
    let lsr_lo = encode_arm0 (Int.repr (id_of_reg dst)) lSR_R_OP 0 in
    let lsr_hi =
      construct_thumb2_shift_rd_rm (Int.repr (id_of_reg dst))
        (int_of_ireg src)
    in
    let lsr_st0 = add_ins_jittedthumb lsr_lo blt_st in
    let lsr_st = add_ins_jittedthumb lsr_hi lsr_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore lsr_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st1 -> ((Some str_st1), "OK")
                | None -> (None, "lsr32_reg LoadStore error Store"))
             | None -> (None, "lsr32_reg error: reg_of_ireg src"))
     | None -> (None, "lsr32_reg LoadStore error Load"))
  | BPF_XOR32_REG ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) eOR_R_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) (int_of_ireg src)
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st -> ((Some str_st), "OK")
                | None -> (None, "xor32_reg LoadStore error Store"))
             | None -> (None, "xor32_reg error: reg_of_ireg src"))
     | None -> (None, "xor32_reg LoadStore error Load"))
  | BPF_MOV32_REG ->
    if reg_ireg_eqb dst src
    then ((Some st), "OK")
    else let d =
           if Int.lt (Int.repr (id_of_reg dst))
                (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
           then Int.zero
           else Int.one
         in
         let rdn =
           if Int.lt (Int.repr (id_of_reg dst))
                (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
           then Int.repr (id_of_reg dst)
           else Int.sub (Int.repr (id_of_reg dst))
                  (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
         in
         let ins = construct_thumb_alu_reg mOV_R_OP d (int_of_ireg src) rdn in
         let ins_st = add_ins_jittedthumb ins st in
         (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
          | Some ldr_st ->
            if ireg_eqb0 src jIT_EXTRA_REG
            then ((Some ldr_st), "OK")
            else (match reg_of_ireg src with
                  | Some r ->
                    (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                     | Some str_st -> ((Some str_st), "OK")
                     | None -> (None, "mov32_reg LoadStore error Store"))
                  | None -> (None, "mov32_reg error: reg_of_ireg src"))
          | None -> (None, "mov32_reg LoadStore error Load"))
  | BPF_ARSH32_REG ->
    let st1 = upd_IR11_jittedthumb true st in
    let cmp_lo = encode_arm0 (int_of_ireg src) cMP_I_OP 0 in
    let cmp_hi =
      Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1)))))))))))
    in
    let cmp_st0 = add_ins_jittedthumb cmp_lo st1 in
    let cmp_st = add_ins_jittedthumb cmp_hi cmp_st0 in
    let b_lt =
      construct_thumb_b cOND_LT (Int.repr ((fun p->2*p) ((fun p->2*p) 1)))
    in
    let b_st = add_ins_jittedthumb b_lt cmp_st in
    let mov_st0 = add_ins_jittedthumb mOVW_OP b_st in
    let mov_hi =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
        (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) 1))))
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        0))))))))
    in
    let mov_st = add_ins_jittedthumb mov_hi mov_st0 in
    let str_lo =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat rBPF_State_REG))) sTR_I_OP 0
    in
    let str_hi =
      encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
        (Int.repr ((fun p->2*p) ((fun p->2*p) 1))) (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))))))
    in
    let str_st0 = add_ins_jittedthumb str_lo mov_st in
    let str_st = add_ins_jittedthumb str_hi str_st0 in
    let blt_st = add_ins_jittedthumb bLT_0 str_st in
    let asr_lo = encode_arm0 (Int.repr (id_of_reg dst)) aSR_R_OP 0 in
    let asr_hi =
      construct_thumb2_shift_rd_rm (Int.repr (id_of_reg dst))
        (int_of_ireg src)
    in
    let asr_st0 = add_ins_jittedthumb asr_lo blt_st in
    let asr_st = add_ins_jittedthumb asr_hi asr_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore asr_st with
     | Some ldr_st ->
       if ireg_eqb0 src jIT_EXTRA_REG
       then ((Some ldr_st), "OK")
       else (match reg_of_ireg src with
             | Some r ->
               (match upd_load_store_regs_jittedthumb r LoadPerm ldr_st with
                | Some str_st1 -> ((Some str_st1), "OK")
                | None -> (None, "asr32_reg LoadStore error Store"))
             | None -> (None, "asr32_reg error: reg_of_ireg src"))
     | None -> (None, "asr32_reg LoadStore error Load"))
  | BPF_ALU32_REG_ILLEGAL_INS -> (None, "ERROR: BPF_ALU32_REG_ILLEGAL_INS")

(** val bpf_alu32_to_thumb_imm :
    opcode_alu32_imm -> reg -> int -> jit_state -> jit_state option * string **)

let bpf_alu32_to_thumb_imm op dst imm8 st =
  match op with
  | BPF_ADD32_IMM ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) aDD_I_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) imm8 (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st -> ((Some ldr_st), "OK")
     | None -> (None, "add32_reg LoadStore error Load"))
  | BPF_SUB32_IMM ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) sUB_I_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) imm8 (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st -> ((Some ldr_st), "OK")
     | None -> (None, "sub32_reg LoadStore error Load"))
  | BPF_OR32_IMM ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) oRR_I_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) imm8 (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st -> ((Some ldr_st), "OK")
     | None -> (None, "add32_reg LoadStore error Load"))
  | BPF_AND32_IMM ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) aND_I_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) imm8 (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st -> ((Some ldr_st), "OK")
     | None -> (None, "add32_reg LoadStore error Load"))
  | BPF_XOR32_IMM ->
    let ins_lo = encode_arm0 (Int.repr (id_of_reg dst)) eOR_I_OP 0 in
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) imm8 (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
    in
    let ins_st0 = add_ins_jittedthumb ins_lo st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st -> ((Some ldr_st), "OK")
     | None -> (None, "add32_reg LoadStore error Load"))
  | BPF_MOV32_IMM ->
    let ins_hi =
      encode_arm0 (Int.repr (id_of_reg dst)) imm8 (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
        (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))
    in
    let ins_st0 = add_ins_jittedthumb mOVW_OP st in
    let ins_st = add_ins_jittedthumb ins_hi ins_st0 in
    (match upd_load_store_regs_jittedthumb dst LoadAndStore ins_st with
     | Some ldr_st -> ((Some ldr_st), "OK")
     | None -> (None, "mov32_reg LoadStore error Load"))
  | _ -> (None, "ERROR: BPF_ALU32_IMM_ILLEGAL_INS")

(** val mov_int_to_reg_binary : int -> ireg -> jit_state -> jit_state **)

let mov_int_to_reg_binary i r st =
  let hi_32 =
    Int.shru i
      (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))))
  in
  let lo_32 =
    Int.coq_and i
      (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        1))))))))))))))))
  in
  let imm8w =
    Int.coq_and lo_32
      (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        1))))))))
  in
  let imm8wt =
    Int.shru lo_32 (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
  in
  let imm3w =
    Int.coq_and imm8wt (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) 1)))
  in
  let imm5wt = Int.shru imm8wt (Int.repr ((fun p->1+2*p) 1)) in
  let imm1w = Int.coq_and imm5wt (Int.repr 1) in
  let imm4w = Int.shru imm5wt (Int.repr 1) in
  let imm8t =
    Int.coq_and hi_32
      (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
        1))))))))
  in
  let imm8tt =
    Int.shru hi_32 (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))
  in
  let imm3t =
    Int.coq_and imm8tt (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) 1)))
  in
  let imm5tt = Int.shru imm8tt (Int.repr ((fun p->1+2*p) 1)) in
  let imm1t = Int.coq_and imm5tt (Int.repr 1) in
  let imm4t = Int.shru imm5tt (Int.repr 1) in
  let movw_lo_0 = encode_arm0 imm4w mOVW_OP 0 in
  let movw_lo =
    encode_arm0 imm1w movw_lo_0 (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))
  in
  let movw_st0 = add_ins_jittedthumb movw_lo st in
  let movw_hi_0 =
    encode_arm0 (int_of_ireg r) imm8w (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))))
  in
  let movw_hi =
    encode_arm0 imm3w movw_hi_0 (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))))))))
  in
  let movw_st = add_ins_jittedthumb movw_hi movw_st0 in
  let movt_lo_0 = encode_arm0 imm4t mOVT_OP 0 in
  let movt_lo =
    encode_arm0 imm1t movt_lo_0 (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))
  in
  let movt_st0 = add_ins_jittedthumb movt_lo movw_st in
  let movt_hi_0 =
    encode_arm0 (int_of_ireg r) imm8t (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))))
  in
  let movt_hi =
    encode_arm0 imm3t movt_hi_0 (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))))))))
  in
  add_ins_jittedthumb movt_hi movt_st0

(** val bpf_alu32_to_thumb : int -> jit_state -> jit_state option * string **)

let bpf_alu32_to_thumb ins st =
  let op = get_opcode ins in
  let opc = nat_to_opcode_alu32 op in
  let dst = get_dst ins in
  let src = get_src ins in
  let imm32 = get_immediate ins in
  (match z_to_reg dst with
   | Some d ->
     (match opc with
      | ALU32_REG ->
        let opr = nat_to_opcode_alu32_reg op in
        (match z_to_reg src with
         | Some s -> bpf_alu32_to_thumb_reg opr d (ireg_of_reg s) st
         | None -> (None, "Verifier ERROR"))
      | ALU32_IMM ->
        let opi = nat_to_opcode_alu32_imm op in
        if (&&)
             ((&&) (eqb (opcode_alu32_imm_eqb opi BPF_MUL32_IMM) false)
               (Int.cmp Cle Int.zero imm32))
             (Int.cmp Cle imm32
               (Int.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                 ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                 ((fun p->1+2*p) 1)))))))))
        then bpf_alu32_to_thumb_imm opi d imm32 st
        else let st1 = upd_IR11_jittedthumb true st in
             let st2 = mov_int_to_reg_binary imm32 jIT_EXTRA_REG st1 in
             bpf_alu32_to_thumb_reg (opcode_reg_of_imm opi) d jIT_EXTRA_REG
               st2
      | ALU32_ILLEGAL_INS -> (None, "ERROR: ALU32_ILLEGAL_INS"))
   | None -> (None, "Verifier ERROR"))

(** val get_store_ins_num : jit_state -> int **)

let get_store_ins_num st =
  let ls = st.load_store_regs in
  let n0 = if is_store_reg R13 ls then Stdlib.succ 0 else 0 in
  let n1 = if is_store_reg R14 ls then Stdlib.succ n0 else n0 in
  let n2 = if is_store_reg R15 ls then Stdlib.succ n1 else n1 in
  let n3 = if is_store_reg R16 ls then Stdlib.succ n2 else n2 in
  let n4 = if is_store_reg R17 ls then Stdlib.succ n3 else n3 in
  let n5 = if is_store_reg R18 ls then Stdlib.succ n4 else n4 in
  let n6 = if is_store_reg R19 ls then Stdlib.succ n5 else n5 in
  let n7 = if is_store_reg R20 ls then Stdlib.succ n6 else n6 in
  let n8 = if is_store_reg R21 ls then Stdlib.succ n7 else n7 in
  let n9 = if is_store_reg R22 ls then Stdlib.succ n8 else n8 in
  if is_store_reg R23 ls then Stdlib.succ n9 else n9

(** val jit_alu32_to_thumb_pass2_aux :
    int -> int -> jit_state -> jit_state **)

let rec jit_alu32_to_thumb_pass2_aux fuel pc st =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> st)
    (fun n0 ->
    let ins0 = eval_thumb_ins (Int.repr (Z.of_nat pc)) st in
    if (||) (Int.eq ins0 bNE_0) (Int.eq ins0 bLT_0)
    then let store_len = get_store_ins_num st in
         let ofs =
           Int.repr
             (Z.of_nat
               (Nat.div
                 (Nat.sub
                   (Nat.add
                     (Nat.mul fuel (Stdlib.succ (Stdlib.succ 0)))
                     (Nat.mul store_len (Stdlib.succ (Stdlib.succ
                       (Stdlib.succ (Stdlib.succ 0))))))
                   (Stdlib.succ (Stdlib.succ (Stdlib.succ
                   (Stdlib.succ 0))))) (Stdlib.succ (Stdlib.succ
                 0))))
         in
         let ins = encode_arm0 ofs ins0 0 in
         let to0 = upd_thumb_jittedthumb ins pc st in
         jit_alu32_to_thumb_pass2_aux n0 (Stdlib.succ pc) to0
    else jit_alu32_to_thumb_pass2_aux n0 (Stdlib.succ pc) st)
    fuel

(** val jit_alu32_to_thumb_pass2 : jit_state -> jit_state **)

let jit_alu32_to_thumb_pass2 st =
  jit_alu32_to_thumb_pass2_aux st.thumb_len 0 st

(** val jit_alu32_to_thumb_pass1 :
    int -> int -> jit_state -> jit_state option * string **)

let rec jit_alu32_to_thumb_pass1 fuel entry_point st =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> ((Some (jit_alu32_to_thumb_pass2 st)), "OK"))
    (fun n0 ->
    let ins = eval_ins (Int.repr (Z.of_nat entry_point)) st in
    if ins_is_bpf_alu32 ins
    then let (o, str) = bpf_alu32_to_thumb ins st in
         (match o with
          | Some thumb0 ->
            let new_thumb = upd_bpf_offset_jittedthumb thumb0 in
            jit_alu32_to_thumb_pass1 n0 (Stdlib.succ entry_point)
              new_thumb
          | None -> (None, str))
    else ((Some (jit_alu32_to_thumb_pass2 st)), "OK"))
    fuel

(** val jit_alu32_entry_points_list :
    int -> int -> bool -> jit_state -> jit_state **)

let rec jit_alu32_entry_points_list fuel pc is_alu32 st =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> st)
    (fun n0 ->
    let ins = eval_ins (Int.repr (Z.of_nat pc)) st in
    if ins_is_bpf_alu32 ins
    then if eqb is_alu32 false
         then let is_pc_repeat = is_ep_exists pc st in
              if is_pc_repeat
              then jit_alu32_entry_points_list n0 (Stdlib.succ pc) true st
              else let st1 = add_new_entry_point pc st in
                   jit_alu32_entry_points_list n0 (Stdlib.succ pc) true
                     st1
         else jit_alu32_entry_points_list n0 (Stdlib.succ pc) true st
    else if ins_is_bpf_jump ins
         then let ofs = get_offset0 ins in
              let next_pc =
                Int.add (Int.add (Int.repr (Z.of_nat pc)) ofs) Int.one
              in
              let next_ins = eval_ins next_pc st in
              if ins_is_bpf_alu32 next_ins
              then let st1 =
                     add_new_entry_point (Z.to_nat (Int.unsigned next_pc)) st
                   in
                   jit_alu32_entry_points_list n0 (Stdlib.succ pc) false
                     st1
              else jit_alu32_entry_points_list n0 (Stdlib.succ pc) false
                     st
         else jit_alu32_entry_points_list n0 (Stdlib.succ pc) false st)
    fuel

(** val jit_alu32_thumb_upd_store : reg -> jit_state -> jit_state **)

let jit_alu32_thumb_upd_store r st =
  if is_store_reg r st.load_store_regs
  then let int_r = Int.repr (Z.of_nat (reg2nat r)) in
       let str_lo =
         encode_arm0 (Int.repr (Z.of_nat (ireg2nat rBPF_State_REG))) sTR_I_OP
           0
       in
       let str_hi =
         encode_arm0 int_r
           (Int.add bPF_R0_OFS
             (Int.mul int_r
               (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ 0))))))))))))
       in
       let ins_st0 = upd_jitted_list str_lo st in
       upd_jitted_list str_hi ins_st0
  else st

(** val jit_alu32_thumb_store : jit_state -> jit_state **)

let jit_alu32_thumb_store st =
  let r0_st = jit_alu32_thumb_upd_store R13 st in
  let r1_st = jit_alu32_thumb_upd_store R14 r0_st in
  let r2_st = jit_alu32_thumb_upd_store R15 r1_st in
  let r3_st = jit_alu32_thumb_upd_store R16 r2_st in
  let r4_st = jit_alu32_thumb_upd_store R17 r3_st in
  let r5_st = jit_alu32_thumb_upd_store R18 r4_st in
  let r6_st = jit_alu32_thumb_upd_store R19 r5_st in
  let r7_st = jit_alu32_thumb_upd_store R20 r6_st in
  let r8_st = jit_alu32_thumb_upd_store R21 r7_st in
  let r9_st = jit_alu32_thumb_upd_store R22 r8_st in
  jit_alu32_thumb_upd_store R23 r9_st

(** val jit_alu32_thumb_store_succ_R0 : jit_state -> jit_state **)

let jit_alu32_thumb_store_succ_R0 st =
  let int_r = Int.repr (Z.of_nat (reg2nat R13)) in
  let str_lo =
    encode_arm0 (Int.repr (Z.of_nat (ireg2nat rBPF_State_REG))) sTR_I_OP 0
  in
  let str_hi =
    encode_arm0 int_r
      (Int.add bPF_R0_OFS
        (Int.mul int_r
          (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))))
  in
  let ins_st0 = upd_jitted_list str_lo st in upd_jitted_list str_hi ins_st0

(** val jit_alu32_thumb_upd_reset : reg -> jit_state -> jit_state **)

let jit_alu32_thumb_upd_reset r st =
  if is_non_reg r st.load_store_regs
  then st
  else let ldr_lo =
         encode_arm0 (Int.repr (Z.of_nat (ireg2nat IR13))) lDR_I_OP 0
       in
       let ldr_hi =
         encode_arm0 (Int.repr (Z.of_nat (reg2nat r)))
           (Int.repr (Z.of_nat st.stack_ofs)) (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ 0))))))))))))
       in
       let st0 = add_ins_to_pop_stack ldr_lo st in upd_jitted_list ldr_hi st0

(** val jit_alu32_thumb_reset_IR11 : jit_state -> jit_state **)

let jit_alu32_thumb_reset_IR11 st =
  let ldr_lo = encode_arm0 (Int.repr (Z.of_nat (ireg2nat IR13))) lDR_I_OP 0 in
  let ldr_hi =
    encode_arm0 (Int.repr (Z.of_nat (ireg2nat jIT_EXTRA_REG)))
      (Int.repr (Z.of_nat st.stack_ofs)) (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))))))))
  in
  let st0 = add_ins_to_pop_stack ldr_lo st in upd_jitted_list ldr_hi st0

(** val jit_alu32_thumb_reset : jit_state -> jit_state **)

let jit_alu32_thumb_reset st =
  let st0 = stack_ofs_sub_4 st in
  let r12_st = if st0.is_IR11 then jit_alu32_thumb_reset_IR11 st0 else st0 in
  let r10_st = jit_alu32_thumb_upd_reset R23 r12_st in
  let r9_st = jit_alu32_thumb_upd_reset R22 r10_st in
  let r8_st = jit_alu32_thumb_upd_reset R21 r9_st in
  let r7_st = jit_alu32_thumb_upd_reset R20 r8_st in
  let r6_st = jit_alu32_thumb_upd_reset R19 r7_st in
  let r5_st = jit_alu32_thumb_upd_reset R18 r6_st in
  let r4_st = jit_alu32_thumb_upd_reset R17 r5_st in
  let r3_st = jit_alu32_thumb_upd_reset R16 r4_st in
  let r2_st = jit_alu32_thumb_upd_reset R15 r3_st in
  jit_alu32_thumb_upd_reset R14 r2_st

(** val jit_alu32_post : jit_state -> jit_state **)

let jit_alu32_post st =
  let ldr_lo = encode_arm0 (Int.repr (Z.of_nat (ireg2nat IR13))) lDR_I_OP 0 in
  let ldr_hi =
    encode_arm0 (Int.repr (Z.of_nat (ireg2nat IR13))) Int.zero
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0))))))))))))
  in
  let st0 = add_ins_to_pop_stack ldr_lo st in
  let st1 = upd_jitted_list ldr_hi st0 in
  let ins_rm =
    encode_arm0 (Int.repr (Z.of_nat (ireg2nat IR14))) bX_OP (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0)))
  in
  upd_jitted_list ins_rm st1

(** val copy_thumb_list_from_to_aux : int -> int -> jit_state -> jit_state **)

let rec copy_thumb_list_from_to_aux fuel pc st =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> st)
    (fun n0 ->
    let ins0 = eval_thumb_ins (Int.repr (Z.of_nat pc)) st in
    let st0 = upd_jitted_list ins0 st in
    copy_thumb_list_from_to_aux n0 (Stdlib.succ pc) st0)
    fuel

(** val copy_thumb_list_from_to : jit_state -> jit_state **)

let copy_thumb_list_from_to st =
  copy_thumb_list_from_to_aux st.thumb_len 0 st

(** val construct_iBPF_ins : int -> jit_state -> int **)

let construct_iBPF_ins ofs st =
  let ibpf_0 =
    encode_bpf64 (Int64.repr (Z.of_nat ofs))
      (Int64.repr (Z.of_nat iBPF_opcode)) (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))))))))))))
  in
  encode_bpf64 (Int64.repr (Z.of_nat st.jitted_len)) ibpf_0 (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
    (Stdlib.succ (Stdlib.succ (Stdlib.succ
    0))))))))))))))))))))))))))))))))

(** val jit_alu32_aux :
    int -> int -> jit_state -> jit_state option * string **)

let rec jit_alu32_aux fuel pc st =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> ((Some st), "OK"))
    (fun n0 ->
    let st0 = reset_init_jittedthumb st in
    let entry_point = eval_epl_ep pc st0 in
    let (o, str) = jit_alu32_to_thumb_pass1 st0.ins_len entry_point st0 in
    (match o with
     | Some st1 ->
       let ibpf_ins =
         construct_iBPF_ins (Nat.sub st1.offset (Stdlib.succ 0)) st1
       in
       let thumb_pre = jit_alu32_pre st1 in
       let thumb_save = jit_alu32_thumb_save thumb_pre in
       let thumb_load = jit_alu32_thumb_load thumb_save in
       let thumb_core = copy_thumb_list_from_to thumb_load in
       let thumb_store = jit_alu32_thumb_store thumb_core in
       let thumb_reset = jit_alu32_thumb_reset thumb_store in
       let thumb_post = jit_alu32_post thumb_reset in
       let next_st = upd_ibpf ibpf_ins entry_point thumb_post in
       jit_alu32_aux n0 (Stdlib.succ pc) next_st
     | None -> (None, str)))
    fuel

(** val jit_alu32 : jit_state -> jit_state option * string **)

let jit_alu32 st =
  let st0 = reset_init_entry_point st in
  let st1 = jit_alu32_entry_points_list st0.ins_len 0 false st0 in
  let el = st1.entry_len in
  let id0 = eval_epl_ep 0 st1 in
  if (&&) ((=) el (Stdlib.succ 0)) ((=) id0 0)
  then let (o, str) = jit_alu32_to_thumb_pass1 st1.ins_len 0 st1 in
       (match o with
        | Some st2 ->
          let thumb_pre = jit_alu32_pre st2 in
          let thumb_save0 = upd_IR11_jittedthumb true thumb_pre in
          let thumb_save = jit_alu32_thumb_save thumb_save0 in
          let thumb_load = jit_alu32_thumb_load thumb_save in
          let thumb_core = copy_thumb_list_from_to thumb_load in
          let thumb_store =
            if (=) thumb_core.offset
                 (Nat.sub (length st.ibpf) (Stdlib.succ 0))
            then jit_alu32_thumb_store_succ_R0 thumb_core
            else jit_alu32_thumb_store thumb_core
          in
          let thumb_reset = jit_alu32_thumb_reset thumb_store in
          let thumb_post = jit_alu32_post thumb_reset in
          ((Some thumb_post), "OK")
        | None -> (None, str))
  else jit_alu32_aux st1.entry_len 0 st1

(** val print_iBPF_instruction : ibpf_instruction -> string **)

let print_iBPF_instruction = function
| BPF i -> print_rBPF_instruction i
| BPF_JIT (ofs16, ofs32) ->
  (^) "pointing to "
    ((^) (string_of_int_unsigned ofs32)
      ((^) " and then jump to " (string_of_int_signed ofs16)))

let string_of_opt_val0 o =
  match o with
  | Some v -> string_of_val0 v
  | None -> "None"
  
let print_regmap_ptr v m0 =
  let _ = print_endline "*******jitted ibpf regs*********" in
  let _ = print_endline ("R0=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 v))) in
  let _ = print_endline ("R1=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 8))))) in
  let _ = print_endline ("R2=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 16))))) in
  let _ = print_endline ("R3=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 24))))) in
  let _ = print_endline ("R4=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 32))))) in
  let _ = print_endline ("R5=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 40))))) in
  let _ = print_endline ("R6=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 48))))) in
  let _ = print_endline ("R7=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 56))))) in
  let _ = print_endline ("R8=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 64))))) in
  let _ = print_endline ("R9=  " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 72))))) in
  let _ = print_endline ("R10= " ^ (string_of_opt_val0 (Mem.loadv Mint64 m0 (Val.add v (Vint 80))))) in
    print_endline "*******jitted ibpf regs*********"
  
let print_jit_state st =
  let _ = print_endline "****************JIT state***************" in
  let _ = print_string "cur_ins: " in
  let _ = print_endline (print_iBPF_instruction (match ibpf_decode (List64AsArray.index st.ibpf st.pc_loc) with | Some i -> i | None -> BPF BPF_ERR)) in
  let _ = print_endline ("pc:= " ^ string_of_int st.pc_loc) in
  let _ = print_endline ("flag:= " ^ string_of_opt_val0 (Mem.loadv Mint32 st.jit_mem st.flag)) in
  let _ = print_regmap_ptr st.regs_st st.jit_mem in
    print_endline "****************JIT state***************\n\n"

(** val print_iBPF_prog_aux : int -> ibpf_instruction list -> string list **)

let rec print_iBPF_prog_aux pc = function
| [] -> []
| hd :: tl ->
  let ins_string = print_iBPF_instruction hd in
  app (((^) (of_nat0 pc) ((^) ": " ins_string)) :: [])
    (print_iBPF_prog_aux (Stdlib.succ pc) tl)

(** val print_iBPF_prog : ibpf_instruction list -> string list **)

let print_iBPF_prog l =
  print_iBPF_prog_aux 0 l

type opcode_alu64 =
| Op_BPF_ADD64
| Op_BPF_SUB64
| Op_BPF_MUL64
| Op_BPF_DIV64
| Op_BPF_OR64
| Op_BPF_AND64
| Op_BPF_LSH64
| Op_BPF_RSH64
| Op_BPF_NEG64
| Op_BPF_MOD64
| Op_BPF_XOR64
| Op_BPF_MOV64
| Op_BPF_ARSH64
| Op_BPF_ALU64_ILLEGAL_INS

(** val byte_to_opcode_alu64 : int -> opcode_alu64 **)

let byte_to_opcode_alu64 op =
  let opcode_alu =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ
      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
     (fun _ -> Op_BPF_ADD64)
     (fun n0 ->
     (fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
       (fun n1 ->
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
         (fun n2 ->
         (fun fO fS n -> if n=0 then fO () else fS (n-1))
           (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
           (fun n3 ->
           (fun fO fS n -> if n=0 then fO () else fS (n-1))
             (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
             (fun n4 ->
             (fun fO fS n -> if n=0 then fO () else fS (n-1))
               (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
               (fun n5 ->
               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                 (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
                 (fun n6 ->
                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                   (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
                   (fun n7 ->
                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                     (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
                     (fun n8 ->
                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                       (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
                       (fun n9 ->
                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                         (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
                         (fun n10 ->
                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                           (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
                           (fun n11 ->
                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                             (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
                             (fun n12 ->
                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                               (fun _ -> Op_BPF_ALU64_ILLEGAL_INS)
                               (fun n13 ->
                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                 (fun _ ->
                                 Op_BPF_ALU64_ILLEGAL_INS)
                                 (fun n14 ->
                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                   (fun _ ->
                                   Op_BPF_ALU64_ILLEGAL_INS)
                                   (fun n15 ->
                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                     (fun _ -> Op_BPF_SUB64)
                                     (fun n16 ->
                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                       (fun _ ->
                                       Op_BPF_ALU64_ILLEGAL_INS)
                                       (fun n17 ->
                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                         (fun _ ->
                                         Op_BPF_ALU64_ILLEGAL_INS)
                                         (fun n18 ->
                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                           (fun _ ->
                                           Op_BPF_ALU64_ILLEGAL_INS)
                                           (fun n19 ->
                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                             (fun _ ->
                                             Op_BPF_ALU64_ILLEGAL_INS)
                                             (fun n20 ->
                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                               (fun _ ->
                                               Op_BPF_ALU64_ILLEGAL_INS)
                                               (fun n21 ->
                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                 (fun _ ->
                                                 Op_BPF_ALU64_ILLEGAL_INS)
                                                 (fun n22 ->
                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                   (fun _ ->
                                                   Op_BPF_ALU64_ILLEGAL_INS)
                                                   (fun n23 ->
                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                     (fun _ ->
                                                     Op_BPF_ALU64_ILLEGAL_INS)
                                                     (fun n24 ->
                                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                       (fun _ ->
                                                       Op_BPF_ALU64_ILLEGAL_INS)
                                                       (fun n25 ->
                                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                         (fun _ ->
                                                         Op_BPF_ALU64_ILLEGAL_INS)
                                                         (fun n26 ->
                                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                           (fun _ ->
                                                           Op_BPF_ALU64_ILLEGAL_INS)
                                                           (fun n27 ->
                                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                             (fun _ ->
                                                             Op_BPF_ALU64_ILLEGAL_INS)
                                                             (fun n28 ->
                                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                               (fun _ ->
                                                               Op_BPF_ALU64_ILLEGAL_INS)
                                                               (fun n29 ->
                                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                 (fun _ ->
                                                                 Op_BPF_ALU64_ILLEGAL_INS)
                                                                 (fun n30 ->
                                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                   (fun _ ->
                                                                   Op_BPF_ALU64_ILLEGAL_INS)
                                                                   (fun n31 ->
                                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_MUL64)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_DIV64)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_OR64)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_AND64)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LSH64)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_RSH64)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_NEG64)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_MOD64)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_XOR64)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_MOV64)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ARSH64)
                                                                    (fun _ ->
                                                                    Op_BPF_ALU64_ILLEGAL_INS)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                   n30)
                                                                 n29)
                                                               n28)
                                                             n27)
                                                           n26)
                                                         n25)
                                                       n24)
                                                     n23)
                                                   n22)
                                                 n21)
                                               n20)
                                             n19)
                                           n18)
                                         n17)
                                       n16)
                                     n15)
                                   n14)
                                 n13)
                               n12)
                             n11)
                           n10)
                         n9)
                       n8)
                     n7)
                   n6)
                 n5)
               n4)
             n3)
           n2)
         n1)
       n0)
     opcode_alu)

type opcode_branch =
| Op_BPF_JA
| Op_BPF_JEQ
| Op_BPF_JGT
| Op_BPF_JGE
| Op_BPF_JLT
| Op_BPF_JLE
| Op_BPF_JSET
| Op_BPF_JNE
| Op_BPF_JSGT
| Op_BPF_JSGE
| Op_BPF_JSLT
| Op_BPF_JSLE
| Op_BPF_CALL
| Op_BPF_RET
| Op_BPF_JMP_ILLEGAL_INS

(** val byte_to_opcode_branch : int -> opcode_branch **)

let byte_to_opcode_branch op =
  let opcode_jmp =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ
      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
     (fun _ -> Op_BPF_JA)
     (fun n0 ->
     (fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
       (fun n1 ->
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
         (fun n2 ->
         (fun fO fS n -> if n=0 then fO () else fS (n-1))
           (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
           (fun n3 ->
           (fun fO fS n -> if n=0 then fO () else fS (n-1))
             (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
             (fun n4 ->
             (fun fO fS n -> if n=0 then fO () else fS (n-1))
               (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
               (fun n5 ->
               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                 (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                 (fun n6 ->
                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                   (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                   (fun n7 ->
                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                     (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                     (fun n8 ->
                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                       (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                       (fun n9 ->
                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                         (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                         (fun n10 ->
                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                           (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                           (fun n11 ->
                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                             (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                             (fun n12 ->
                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                               (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                               (fun n13 ->
                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                 (fun _ -> Op_BPF_JMP_ILLEGAL_INS)
                                 (fun n14 ->
                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                   (fun _ ->
                                   Op_BPF_JMP_ILLEGAL_INS)
                                   (fun n15 ->
                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                     (fun _ -> Op_BPF_JEQ)
                                     (fun n16 ->
                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                       (fun _ ->
                                       Op_BPF_JMP_ILLEGAL_INS)
                                       (fun n17 ->
                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                         (fun _ ->
                                         Op_BPF_JMP_ILLEGAL_INS)
                                         (fun n18 ->
                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                           (fun _ ->
                                           Op_BPF_JMP_ILLEGAL_INS)
                                           (fun n19 ->
                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                             (fun _ ->
                                             Op_BPF_JMP_ILLEGAL_INS)
                                             (fun n20 ->
                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                               (fun _ ->
                                               Op_BPF_JMP_ILLEGAL_INS)
                                               (fun n21 ->
                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                 (fun _ ->
                                                 Op_BPF_JMP_ILLEGAL_INS)
                                                 (fun n22 ->
                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                   (fun _ ->
                                                   Op_BPF_JMP_ILLEGAL_INS)
                                                   (fun n23 ->
                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                     (fun _ ->
                                                     Op_BPF_JMP_ILLEGAL_INS)
                                                     (fun n24 ->
                                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                       (fun _ ->
                                                       Op_BPF_JMP_ILLEGAL_INS)
                                                       (fun n25 ->
                                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                         (fun _ ->
                                                         Op_BPF_JMP_ILLEGAL_INS)
                                                         (fun n26 ->
                                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                           (fun _ ->
                                                           Op_BPF_JMP_ILLEGAL_INS)
                                                           (fun n27 ->
                                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                             (fun _ ->
                                                             Op_BPF_JMP_ILLEGAL_INS)
                                                             (fun n28 ->
                                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                               (fun _ ->
                                                               Op_BPF_JMP_ILLEGAL_INS)
                                                               (fun n29 ->
                                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                 (fun _ ->
                                                                 Op_BPF_JMP_ILLEGAL_INS)
                                                                 (fun n30 ->
                                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                   (fun _ ->
                                                                   Op_BPF_JMP_ILLEGAL_INS)
                                                                   (fun n31 ->
                                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JGT)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JGE)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JSET)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JNE)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JSGT)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JSGE)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_CALL)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_RET)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JLT)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JLE)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JSLT)
                                                                    (fun n192 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n193 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n194 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n195 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n196 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n197 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n198 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n199 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n200 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n201 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n202 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n203 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n204 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n205 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n206 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    (fun n207 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JSLE)
                                                                    (fun _ ->
                                                                    Op_BPF_JMP_ILLEGAL_INS)
                                                                    n207)
                                                                    n206)
                                                                    n205)
                                                                    n204)
                                                                    n203)
                                                                    n202)
                                                                    n201)
                                                                    n200)
                                                                    n199)
                                                                    n198)
                                                                    n197)
                                                                    n196)
                                                                    n195)
                                                                    n194)
                                                                    n193)
                                                                    n192)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                   n30)
                                                                 n29)
                                                               n28)
                                                             n27)
                                                           n26)
                                                         n25)
                                                       n24)
                                                     n23)
                                                   n22)
                                                 n21)
                                               n20)
                                             n19)
                                           n18)
                                         n17)
                                       n16)
                                     n15)
                                   n14)
                                 n13)
                               n12)
                             n11)
                           n10)
                         n9)
                       n8)
                     n7)
                   n6)
                 n5)
               n4)
             n3)
           n2)
         n1)
       n0)
     opcode_jmp)

type opcode_mem_ld_imm =
| Op_BPF_LDDW_low
| Op_BPF_LDDW_high
| Op_BPF_LDX_IMM_ILLEGAL_INS

(** val byte_to_opcode_mem_ld_imm : int -> opcode_mem_ld_imm **)

let byte_to_opcode_mem_ld_imm op =
  let opcode_ld =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
     (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
     (fun n0 ->
     (fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
       (fun n1 ->
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
         (fun n2 ->
         (fun fO fS n -> if n=0 then fO () else fS (n-1))
           (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
           (fun n3 ->
           (fun fO fS n -> if n=0 then fO () else fS (n-1))
             (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
             (fun n4 ->
             (fun fO fS n -> if n=0 then fO () else fS (n-1))
               (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
               (fun n5 ->
               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                 (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
                 (fun n6 ->
                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                   (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
                   (fun n7 ->
                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                     (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
                     (fun n8 ->
                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                       (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
                       (fun n9 ->
                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                         (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
                         (fun n10 ->
                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                           (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
                           (fun n11 ->
                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                             (fun _ -> Op_BPF_LDX_IMM_ILLEGAL_INS)
                             (fun n12 ->
                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                               (fun _ ->
                               Op_BPF_LDX_IMM_ILLEGAL_INS)
                               (fun n13 ->
                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                 (fun _ ->
                                 Op_BPF_LDX_IMM_ILLEGAL_INS)
                                 (fun n14 ->
                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                   (fun _ ->
                                   Op_BPF_LDX_IMM_ILLEGAL_INS)
                                   (fun n15 ->
                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                     (fun _ -> Op_BPF_LDDW_high)
                                     (fun n16 ->
                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                       (fun _ ->
                                       Op_BPF_LDX_IMM_ILLEGAL_INS)
                                       (fun n17 ->
                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                         (fun _ ->
                                         Op_BPF_LDX_IMM_ILLEGAL_INS)
                                         (fun n18 ->
                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                           (fun _ ->
                                           Op_BPF_LDX_IMM_ILLEGAL_INS)
                                           (fun n19 ->
                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                             (fun _ ->
                                             Op_BPF_LDX_IMM_ILLEGAL_INS)
                                             (fun n20 ->
                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                               (fun _ ->
                                               Op_BPF_LDX_IMM_ILLEGAL_INS)
                                               (fun n21 ->
                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                 (fun _ ->
                                                 Op_BPF_LDX_IMM_ILLEGAL_INS)
                                                 (fun n22 ->
                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                   (fun _ ->
                                                   Op_BPF_LDX_IMM_ILLEGAL_INS)
                                                   (fun n23 ->
                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                     (fun _ ->
                                                     Op_BPF_LDDW_low)
                                                     (fun _ ->
                                                     Op_BPF_LDX_IMM_ILLEGAL_INS)
                                                     n23)
                                                   n22)
                                                 n21)
                                               n20)
                                             n19)
                                           n18)
                                         n17)
                                       n16)
                                     n15)
                                   n14)
                                 n13)
                               n12)
                             n11)
                           n10)
                         n9)
                       n8)
                     n7)
                   n6)
                 n5)
               n4)
             n3)
           n2)
         n1)
       n0)
     opcode_ld)

type opcode_mem_ld_reg =
| Op_BPF_LDXW
| Op_BPF_LDXH
| Op_BPF_LDXB
| Op_BPF_LDXDW
| Op_BPF_LDX_REG_ILLEGAL_INS

(** val byte_to_opcode_mem_ld_reg : int -> opcode_mem_ld_reg **)

let byte_to_opcode_mem_ld_reg op =
  let opcode_ld =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
     (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
     (fun n0 ->
     (fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
       (fun n1 ->
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
         (fun n2 ->
         (fun fO fS n -> if n=0 then fO () else fS (n-1))
           (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
           (fun n3 ->
           (fun fO fS n -> if n=0 then fO () else fS (n-1))
             (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
             (fun n4 ->
             (fun fO fS n -> if n=0 then fO () else fS (n-1))
               (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
               (fun n5 ->
               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                 (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
                 (fun n6 ->
                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                   (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
                   (fun n7 ->
                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                     (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
                     (fun n8 ->
                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                       (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
                       (fun n9 ->
                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                         (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
                         (fun n10 ->
                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                           (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
                           (fun n11 ->
                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                             (fun _ -> Op_BPF_LDX_REG_ILLEGAL_INS)
                             (fun n12 ->
                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                               (fun _ ->
                               Op_BPF_LDX_REG_ILLEGAL_INS)
                               (fun n13 ->
                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                 (fun _ ->
                                 Op_BPF_LDX_REG_ILLEGAL_INS)
                                 (fun n14 ->
                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                   (fun _ ->
                                   Op_BPF_LDX_REG_ILLEGAL_INS)
                                   (fun n15 ->
                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                     (fun _ ->
                                     Op_BPF_LDX_REG_ILLEGAL_INS)
                                     (fun n16 ->
                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                       (fun _ ->
                                       Op_BPF_LDX_REG_ILLEGAL_INS)
                                       (fun n17 ->
                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                         (fun _ ->
                                         Op_BPF_LDX_REG_ILLEGAL_INS)
                                         (fun n18 ->
                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                           (fun _ ->
                                           Op_BPF_LDX_REG_ILLEGAL_INS)
                                           (fun n19 ->
                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                             (fun _ ->
                                             Op_BPF_LDX_REG_ILLEGAL_INS)
                                             (fun n20 ->
                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                               (fun _ ->
                                               Op_BPF_LDX_REG_ILLEGAL_INS)
                                               (fun n21 ->
                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                 (fun _ ->
                                                 Op_BPF_LDX_REG_ILLEGAL_INS)
                                                 (fun n22 ->
                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                   (fun _ ->
                                                   Op_BPF_LDX_REG_ILLEGAL_INS)
                                                   (fun n23 ->
                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                     (fun _ ->
                                                     Op_BPF_LDX_REG_ILLEGAL_INS)
                                                     (fun n24 ->
                                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                       (fun _ ->
                                                       Op_BPF_LDX_REG_ILLEGAL_INS)
                                                       (fun n25 ->
                                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                         (fun _ ->
                                                         Op_BPF_LDX_REG_ILLEGAL_INS)
                                                         (fun n26 ->
                                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                           (fun _ ->
                                                           Op_BPF_LDX_REG_ILLEGAL_INS)
                                                           (fun n27 ->
                                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                             (fun _ ->
                                                             Op_BPF_LDX_REG_ILLEGAL_INS)
                                                             (fun n28 ->
                                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                               (fun _ ->
                                                               Op_BPF_LDX_REG_ILLEGAL_INS)
                                                               (fun n29 ->
                                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                 (fun _ ->
                                                                 Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                 (fun n30 ->
                                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                   (fun _ ->
                                                                   Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                   (fun n31 ->
                                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDXW)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDXH)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDXB)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LDXDW)
                                                                    (fun _ ->
                                                                    Op_BPF_LDX_REG_ILLEGAL_INS)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                   n30)
                                                                 n29)
                                                               n28)
                                                             n27)
                                                           n26)
                                                         n25)
                                                       n24)
                                                     n23)
                                                   n22)
                                                 n21)
                                               n20)
                                             n19)
                                           n18)
                                         n17)
                                       n16)
                                     n15)
                                   n14)
                                 n13)
                               n12)
                             n11)
                           n10)
                         n9)
                       n8)
                     n7)
                   n6)
                 n5)
               n4)
             n3)
           n2)
         n1)
       n0)
     opcode_ld)

type opcode_mem_st_imm =
| Op_BPF_STW
| Op_BPF_STH
| Op_BPF_STB
| Op_BPF_STDW
| Op_BPF_ST_ILLEGAL_INS

(** val byte_to_opcode_mem_st_imm : int -> opcode_mem_st_imm **)

let byte_to_opcode_mem_st_imm op =
  let opcode_st =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
     (fun _ -> Op_BPF_ST_ILLEGAL_INS)
     (fun n0 ->
     (fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> Op_BPF_ST_ILLEGAL_INS)
       (fun n1 ->
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Op_BPF_ST_ILLEGAL_INS)
         (fun n2 ->
         (fun fO fS n -> if n=0 then fO () else fS (n-1))
           (fun _ -> Op_BPF_ST_ILLEGAL_INS)
           (fun n3 ->
           (fun fO fS n -> if n=0 then fO () else fS (n-1))
             (fun _ -> Op_BPF_ST_ILLEGAL_INS)
             (fun n4 ->
             (fun fO fS n -> if n=0 then fO () else fS (n-1))
               (fun _ -> Op_BPF_ST_ILLEGAL_INS)
               (fun n5 ->
               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                 (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                 (fun n6 ->
                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                   (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                   (fun n7 ->
                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                     (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                     (fun n8 ->
                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                       (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                       (fun n9 ->
                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                         (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                         (fun n10 ->
                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                           (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                           (fun n11 ->
                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                             (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                             (fun n12 ->
                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                               (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                               (fun n13 ->
                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                 (fun _ -> Op_BPF_ST_ILLEGAL_INS)
                                 (fun n14 ->
                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                   (fun _ ->
                                   Op_BPF_ST_ILLEGAL_INS)
                                   (fun n15 ->
                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                     (fun _ ->
                                     Op_BPF_ST_ILLEGAL_INS)
                                     (fun n16 ->
                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                       (fun _ ->
                                       Op_BPF_ST_ILLEGAL_INS)
                                       (fun n17 ->
                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                         (fun _ ->
                                         Op_BPF_ST_ILLEGAL_INS)
                                         (fun n18 ->
                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                           (fun _ ->
                                           Op_BPF_ST_ILLEGAL_INS)
                                           (fun n19 ->
                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                             (fun _ ->
                                             Op_BPF_ST_ILLEGAL_INS)
                                             (fun n20 ->
                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                               (fun _ ->
                                               Op_BPF_ST_ILLEGAL_INS)
                                               (fun n21 ->
                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                 (fun _ ->
                                                 Op_BPF_ST_ILLEGAL_INS)
                                                 (fun n22 ->
                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                   (fun _ ->
                                                   Op_BPF_ST_ILLEGAL_INS)
                                                   (fun n23 ->
                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                     (fun _ ->
                                                     Op_BPF_ST_ILLEGAL_INS)
                                                     (fun n24 ->
                                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                       (fun _ ->
                                                       Op_BPF_ST_ILLEGAL_INS)
                                                       (fun n25 ->
                                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                         (fun _ ->
                                                         Op_BPF_ST_ILLEGAL_INS)
                                                         (fun n26 ->
                                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                           (fun _ ->
                                                           Op_BPF_ST_ILLEGAL_INS)
                                                           (fun n27 ->
                                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                             (fun _ ->
                                                             Op_BPF_ST_ILLEGAL_INS)
                                                             (fun n28 ->
                                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                               (fun _ ->
                                                               Op_BPF_ST_ILLEGAL_INS)
                                                               (fun n29 ->
                                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                 (fun _ ->
                                                                 Op_BPF_ST_ILLEGAL_INS)
                                                                 (fun n30 ->
                                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                   (fun _ ->
                                                                   Op_BPF_ST_ILLEGAL_INS)
                                                                   (fun n31 ->
                                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STW)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STH)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STB)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STDW)
                                                                    (fun _ ->
                                                                    Op_BPF_ST_ILLEGAL_INS)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                   n30)
                                                                 n29)
                                                               n28)
                                                             n27)
                                                           n26)
                                                         n25)
                                                       n24)
                                                     n23)
                                                   n22)
                                                 n21)
                                               n20)
                                             n19)
                                           n18)
                                         n17)
                                       n16)
                                     n15)
                                   n14)
                                 n13)
                               n12)
                             n11)
                           n10)
                         n9)
                       n8)
                     n7)
                   n6)
                 n5)
               n4)
             n3)
           n2)
         n1)
       n0)
     opcode_st)

type opcode_mem_st_reg =
| Op_BPF_STXW
| Op_BPF_STXH
| Op_BPF_STXB
| Op_BPF_STXDW
| Op_BPF_STX_ILLEGAL_INS

(** val byte_to_opcode_mem_st_reg : int -> opcode_mem_st_reg **)

let byte_to_opcode_mem_st_reg op =
  let opcode_st =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
     (fun _ -> Op_BPF_STX_ILLEGAL_INS)
     (fun n0 ->
     (fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> Op_BPF_STX_ILLEGAL_INS)
       (fun n1 ->
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Op_BPF_STX_ILLEGAL_INS)
         (fun n2 ->
         (fun fO fS n -> if n=0 then fO () else fS (n-1))
           (fun _ -> Op_BPF_STX_ILLEGAL_INS)
           (fun n3 ->
           (fun fO fS n -> if n=0 then fO () else fS (n-1))
             (fun _ -> Op_BPF_STX_ILLEGAL_INS)
             (fun n4 ->
             (fun fO fS n -> if n=0 then fO () else fS (n-1))
               (fun _ -> Op_BPF_STX_ILLEGAL_INS)
               (fun n5 ->
               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                 (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                 (fun n6 ->
                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                   (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                   (fun n7 ->
                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                     (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                     (fun n8 ->
                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                       (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                       (fun n9 ->
                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                         (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                         (fun n10 ->
                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                           (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                           (fun n11 ->
                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                             (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                             (fun n12 ->
                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                               (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                               (fun n13 ->
                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                 (fun _ -> Op_BPF_STX_ILLEGAL_INS)
                                 (fun n14 ->
                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                   (fun _ ->
                                   Op_BPF_STX_ILLEGAL_INS)
                                   (fun n15 ->
                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                     (fun _ ->
                                     Op_BPF_STX_ILLEGAL_INS)
                                     (fun n16 ->
                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                       (fun _ ->
                                       Op_BPF_STX_ILLEGAL_INS)
                                       (fun n17 ->
                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                         (fun _ ->
                                         Op_BPF_STX_ILLEGAL_INS)
                                         (fun n18 ->
                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                           (fun _ ->
                                           Op_BPF_STX_ILLEGAL_INS)
                                           (fun n19 ->
                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                             (fun _ ->
                                             Op_BPF_STX_ILLEGAL_INS)
                                             (fun n20 ->
                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                               (fun _ ->
                                               Op_BPF_STX_ILLEGAL_INS)
                                               (fun n21 ->
                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                 (fun _ ->
                                                 Op_BPF_STX_ILLEGAL_INS)
                                                 (fun n22 ->
                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                   (fun _ ->
                                                   Op_BPF_STX_ILLEGAL_INS)
                                                   (fun n23 ->
                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                     (fun _ ->
                                                     Op_BPF_STX_ILLEGAL_INS)
                                                     (fun n24 ->
                                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                       (fun _ ->
                                                       Op_BPF_STX_ILLEGAL_INS)
                                                       (fun n25 ->
                                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                         (fun _ ->
                                                         Op_BPF_STX_ILLEGAL_INS)
                                                         (fun n26 ->
                                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                           (fun _ ->
                                                           Op_BPF_STX_ILLEGAL_INS)
                                                           (fun n27 ->
                                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                             (fun _ ->
                                                             Op_BPF_STX_ILLEGAL_INS)
                                                             (fun n28 ->
                                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                               (fun _ ->
                                                               Op_BPF_STX_ILLEGAL_INS)
                                                               (fun n29 ->
                                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                 (fun _ ->
                                                                 Op_BPF_STX_ILLEGAL_INS)
                                                                 (fun n30 ->
                                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                   (fun _ ->
                                                                   Op_BPF_STX_ILLEGAL_INS)
                                                                   (fun n31 ->
                                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STXW)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STXH)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STXB)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_STXDW)
                                                                    (fun _ ->
                                                                    Op_BPF_STX_ILLEGAL_INS)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                   n30)
                                                                 n29)
                                                               n28)
                                                             n27)
                                                           n26)
                                                         n25)
                                                       n24)
                                                     n23)
                                                   n22)
                                                 n21)
                                               n20)
                                             n19)
                                           n18)
                                         n17)
                                       n16)
                                     n15)
                                   n14)
                                 n13)
                               n12)
                             n11)
                           n10)
                         n9)
                       n8)
                     n7)
                   n6)
                 n5)
               n4)
             n3)
           n2)
         n1)
       n0)
     opcode_st)

type opcode =
| Op_BPF_ALU64
| Op_BPF_ALU32
| Op_BPF_Branch
| Op_BPF_Mem_ld_imm
| Op_BPF_Mem_ld_reg
| Op_BPF_Mem_st_imm
| Op_BPF_Mem_st_reg
| Op_BPF_ILLEGAL_INS

(** val byte_to_opcode : int -> opcode **)

let byte_to_opcode op =
  let opc =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      0)))))))
  in
  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
     (fun _ -> Op_BPF_Mem_ld_imm)
     (fun n0 ->
     (fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> Op_BPF_Mem_ld_reg)
       (fun n1 ->
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Op_BPF_Mem_st_imm)
         (fun n2 ->
         (fun fO fS n -> if n=0 then fO () else fS (n-1))
           (fun _ -> Op_BPF_Mem_st_reg)
           (fun n3 ->
           (fun fO fS n -> if n=0 then fO () else fS (n-1))
             (fun _ -> Op_BPF_ALU32)
             (fun n4 ->
             (fun fO fS n -> if n=0 then fO () else fS (n-1))
               (fun _ -> Op_BPF_Branch)
               (fun n5 ->
               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                 (fun _ -> Op_BPF_ILLEGAL_INS)
                 (fun n6 ->
                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                   (fun _ -> Op_BPF_ALU64)
                   (fun _ -> Op_BPF_ILLEGAL_INS)
                   n6)
                 n5)
               n4)
             n3)
           n2)
         n1)
       n0)
     opc)

(** val magic_function0 : int -> (jit_state, unit) m **)

let magic_function0 ofs st = let _ = print_endline "calling magic_function0" in
  let sz =
    Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) 1)))))
  in let _ = print_endline ("magic_function0 jitted code ofs = " ^ (string_of_int ofs)) in
  (match magic_function jITTED_LIST_MAX_LENGTH ofs sz st with
   | Some st1 -> Some ((), st1)
   | None -> None)

(** val eval_pc0 : (jit_state, int) m **)

let eval_pc0 st =
  Some ((eval_pc st), st)

(** val upd_pc0 : int -> (jit_state, unit) m **)

let upd_pc0 p st =
  if Int.cmpu Cle p
       (Int.sub (Int.repr (Z.of_nat st.ins_len)) (Int.repr ((fun p->2*p) 1)))
  then Some ((), (upd_pc p st))
  else None

(** val upd_pc_incr0 : (jit_state, unit) m **)

let upd_pc_incr0 st =
  if Int.cmpu Clt (Int.add st.pc_loc Int.one) (Int.repr (Z.of_nat st.ins_len))
  then Some ((), (upd_pc_incr st))
  else None

(** val eval_flag0 : (jit_state, val0) m **)

let eval_flag0 st =
  Some ((eval_flag st), st)

(** val upd_flag0 : bpf_flag -> (jit_state, unit) m **)

let upd_flag0 f st =
  Some ((), (upd_flag f st))

(** val eval_mrs_num : (jit_state, int) m **)

let eval_mrs_num st =
  Some ((eval_mem_num st), st)

(** val eval_reg0 : reg -> (jit_state, val0) m **)

let eval_reg0 r st =
  Some ((eval_reg r st), st)

(** val upd_reg0 : reg -> val0 -> (jit_state, unit) m **)

let upd_reg0 r v st =
  match v with
  | Vlong _ -> Some ((), (upd_reg r v st))
  | _ -> None

(** val eval_mrs_regions : (jit_state, myMemRegionsType) m **)

let eval_mrs_regions st =
  Some ((eval_mem_regions st), st)

(** val load_mem0 : memory_chunk -> val0 -> (jit_state, val0) m **)

let load_mem0 chunk ptr st =
  match load_mem chunk ptr st with
  | Some res -> (match res with
                 | Vundef -> None
                 | _ -> Some (res, st))
  | None -> None

(** val store_mem_imm0 :
    val0 -> memory_chunk -> val0 -> (jit_state, unit) m **)

let store_mem_imm0 ptr chunk v st =
  match store_mem_imm ptr chunk v st with
  | Some res -> Some ((), res)
  | None -> None

(** val store_mem_reg0 :
    val0 -> memory_chunk -> val0 -> (jit_state, unit) m **)

let store_mem_reg0 ptr chunk v st =
  match store_mem_reg ptr chunk v st with
  | Some res -> Some ((), res)
  | None -> None

(** val eval_ins_len0 : (jit_state, int) m **)

let eval_ins_len0 st = let _ = print_jit_state st in
  Some ((eval_ins_len st), st)

(** val eval_ins0 : int -> (jit_state, int) m **)

let eval_ins0 idx st =
  if Int.cmpu Clt idx (Int.repr (Z.of_nat st.ins_len))
  then Some ((eval_ins idx st), st)
  else None

(** val cmp_ptr32_nullM : val0 -> (jit_state, bool) m **)

let cmp_ptr32_nullM v st =
  match cmp_ptr32_null (eval_mem st) v with
  | Some res -> Some (res, st)
  | None -> None

(** val int64_to_dst_reg : int -> (jit_state, reg) m **)

let int64_to_dst_reg ins st =
  match int64_to_dst_reg' ins with
  | Some r -> Some (r, st)
  | None -> None

(** val int64_to_src_reg : int -> (jit_state, reg) m **)

let int64_to_src_reg ins st =
  match int64_to_src_reg' ins with
  | Some r -> Some (r, st)
  | None -> None

(** val get_mem_region :
    int -> myMemRegionsType -> (jit_state, memory_region) m **)

let get_mem_region n0 mrs st =
  if Nat.ltb n0 st.mrs_num
  then (match nth_error mrs n0 with
        | Some mr -> Some (mr, st)
        | None -> None)
  else None

(** val _bpf_get_call : val0 -> (jit_state, val0) m **)

let _bpf_get_call = function v -> returnM v

(** val exec_function : val0 -> (jit_state, val0) m **)

let exec_function = function v -> returnM v

type opcode_alu32_jit =
| Op_BPF_ADD32
| Op_BPF_SUB32
| Op_BPF_MUL32
| Op_BPF_DIV32
| Op_BPF_OR32
| Op_BPF_AND32
| Op_BPF_LSH32
| Op_BPF_RSH32
| Op_BPF_NEG32
| Op_BPF_MOD32
| Op_BPF_XOR32
| Op_BPF_MOV32
| Op_BPF_ARSH32
| Op_BPF_JIT
| Op_BPF_ALU32_ILLEGAL_INS

(** val byte_to_opcode_alu32_jit : int -> opcode_alu32_jit **)

let byte_to_opcode_alu32_jit op =
  let opcode_alu =
    Nat.coq_land op (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ
      0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
     (fun _ -> Op_BPF_ADD32)
     (fun n0 ->
     (fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
       (fun n1 ->
       (fun fO fS n -> if n=0 then fO () else fS (n-1))
         (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
         (fun n2 ->
         (fun fO fS n -> if n=0 then fO () else fS (n-1))
           (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
           (fun n3 ->
           (fun fO fS n -> if n=0 then fO () else fS (n-1))
             (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
             (fun n4 ->
             (fun fO fS n -> if n=0 then fO () else fS (n-1))
               (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
               (fun n5 ->
               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                 (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
                 (fun n6 ->
                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                   (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
                   (fun n7 ->
                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                     (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
                     (fun n8 ->
                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                       (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
                       (fun n9 ->
                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                         (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
                         (fun n10 ->
                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                           (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
                           (fun n11 ->
                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                             (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
                             (fun n12 ->
                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                               (fun _ -> Op_BPF_ALU32_ILLEGAL_INS)
                               (fun n13 ->
                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                 (fun _ ->
                                 Op_BPF_ALU32_ILLEGAL_INS)
                                 (fun n14 ->
                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                   (fun _ ->
                                   Op_BPF_ALU32_ILLEGAL_INS)
                                   (fun n15 ->
                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                     (fun _ -> Op_BPF_SUB32)
                                     (fun n16 ->
                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                       (fun _ ->
                                       Op_BPF_ALU32_ILLEGAL_INS)
                                       (fun n17 ->
                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                         (fun _ ->
                                         Op_BPF_ALU32_ILLEGAL_INS)
                                         (fun n18 ->
                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                           (fun _ ->
                                           Op_BPF_ALU32_ILLEGAL_INS)
                                           (fun n19 ->
                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                             (fun _ ->
                                             Op_BPF_ALU32_ILLEGAL_INS)
                                             (fun n20 ->
                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                               (fun _ ->
                                               Op_BPF_ALU32_ILLEGAL_INS)
                                               (fun n21 ->
                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                 (fun _ ->
                                                 Op_BPF_ALU32_ILLEGAL_INS)
                                                 (fun n22 ->
                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                   (fun _ ->
                                                   Op_BPF_ALU32_ILLEGAL_INS)
                                                   (fun n23 ->
                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                     (fun _ ->
                                                     Op_BPF_ALU32_ILLEGAL_INS)
                                                     (fun n24 ->
                                                     (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                       (fun _ ->
                                                       Op_BPF_ALU32_ILLEGAL_INS)
                                                       (fun n25 ->
                                                       (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                         (fun _ ->
                                                         Op_BPF_ALU32_ILLEGAL_INS)
                                                         (fun n26 ->
                                                         (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                           (fun _ ->
                                                           Op_BPF_ALU32_ILLEGAL_INS)
                                                           (fun n27 ->
                                                           (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                             (fun _ ->
                                                             Op_BPF_ALU32_ILLEGAL_INS)
                                                             (fun n28 ->
                                                             (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                               (fun _ ->
                                                               Op_BPF_ALU32_ILLEGAL_INS)
                                                               (fun n29 ->
                                                               (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                 (fun _ ->
                                                                 Op_BPF_ALU32_ILLEGAL_INS)
                                                                 (fun n30 ->
                                                                 (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                   (fun _ ->
                                                                   Op_BPF_ALU32_ILLEGAL_INS)
                                                                   (fun n31 ->
                                                                   (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_MUL32)
                                                                    (fun n32 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n33 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n34 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n35 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n36 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n37 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n38 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n39 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n40 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n41 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n42 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n43 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n44 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n45 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n46 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n47 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_DIV32)
                                                                    (fun n48 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n49 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n50 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n51 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n52 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n53 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n54 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n55 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n56 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n57 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n58 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n59 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n60 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n61 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n62 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n63 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_OR32)
                                                                    (fun n64 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n65 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n66 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n67 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n68 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n69 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n70 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n71 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n72 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n73 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n74 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n75 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n76 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n77 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n78 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n79 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_AND32)
                                                                    (fun n80 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n81 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n82 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n83 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n84 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n85 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n86 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n87 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n88 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n89 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n90 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n91 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n92 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n93 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n94 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n95 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_LSH32)
                                                                    (fun n96 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n97 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n98 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n99 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n100 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n101 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n102 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n103 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n104 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n105 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n106 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n107 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n108 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n109 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n110 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n111 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_RSH32)
                                                                    (fun n112 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n113 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n114 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n115 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n116 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n117 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n118 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n119 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n120 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n121 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n122 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n123 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n124 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n125 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n126 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n127 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_NEG32)
                                                                    (fun n128 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n129 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n130 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n131 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n132 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n133 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n134 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n135 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n136 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n137 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n138 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n139 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n140 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n141 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n142 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n143 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_MOD32)
                                                                    (fun n144 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n145 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n146 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n147 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n148 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n149 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n150 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n151 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n152 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n153 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n154 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n155 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n156 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n157 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n158 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n159 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_XOR32)
                                                                    (fun n160 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n161 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n162 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n163 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n164 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n165 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n166 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n167 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n168 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n169 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n170 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n171 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n172 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n173 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n174 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n175 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_MOV32)
                                                                    (fun n176 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n177 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n178 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n179 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n180 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n181 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n182 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n183 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n184 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n185 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n186 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n187 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n188 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n189 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n190 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n191 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ARSH32)
                                                                    (fun n192 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n193 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n194 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n195 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n196 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n197 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n198 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n199 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n200 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n201 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n202 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n203 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n204 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n205 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n206 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    (fun n207 ->
                                                                    (fun fO fS n -> if n=0 then fO () else fS (n-1))
                                                                    (fun _ ->
                                                                    Op_BPF_JIT)
                                                                    (fun _ ->
                                                                    Op_BPF_ALU32_ILLEGAL_INS)
                                                                    n207)
                                                                    n206)
                                                                    n205)
                                                                    n204)
                                                                    n203)
                                                                    n202)
                                                                    n201)
                                                                    n200)
                                                                    n199)
                                                                    n198)
                                                                    n197)
                                                                    n196)
                                                                    n195)
                                                                    n194)
                                                                    n193)
                                                                    n192)
                                                                    n191)
                                                                    n190)
                                                                    n189)
                                                                    n188)
                                                                    n187)
                                                                    n186)
                                                                    n185)
                                                                    n184)
                                                                    n183)
                                                                    n182)
                                                                    n181)
                                                                    n180)
                                                                    n179)
                                                                    n178)
                                                                    n177)
                                                                    n176)
                                                                    n175)
                                                                    n174)
                                                                    n173)
                                                                    n172)
                                                                    n171)
                                                                    n170)
                                                                    n169)
                                                                    n168)
                                                                    n167)
                                                                    n166)
                                                                    n165)
                                                                    n164)
                                                                    n163)
                                                                    n162)
                                                                    n161)
                                                                    n160)
                                                                    n159)
                                                                    n158)
                                                                    n157)
                                                                    n156)
                                                                    n155)
                                                                    n154)
                                                                    n153)
                                                                    n152)
                                                                    n151)
                                                                    n150)
                                                                    n149)
                                                                    n148)
                                                                    n147)
                                                                    n146)
                                                                    n145)
                                                                    n144)
                                                                    n143)
                                                                    n142)
                                                                    n141)
                                                                    n140)
                                                                    n139)
                                                                    n138)
                                                                    n137)
                                                                    n136)
                                                                    n135)
                                                                    n134)
                                                                    n133)
                                                                    n132)
                                                                    n131)
                                                                    n130)
                                                                    n129)
                                                                    n128)
                                                                    n127)
                                                                    n126)
                                                                    n125)
                                                                    n124)
                                                                    n123)
                                                                    n122)
                                                                    n121)
                                                                    n120)
                                                                    n119)
                                                                    n118)
                                                                    n117)
                                                                    n116)
                                                                    n115)
                                                                    n114)
                                                                    n113)
                                                                    n112)
                                                                    n111)
                                                                    n110)
                                                                    n109)
                                                                    n108)
                                                                    n107)
                                                                    n106)
                                                                    n105)
                                                                    n104)
                                                                    n103)
                                                                    n102)
                                                                    n101)
                                                                    n100)
                                                                    n99)
                                                                    n98)
                                                                    n97)
                                                                    n96)
                                                                    n95)
                                                                    n94)
                                                                    n93)
                                                                    n92)
                                                                    n91)
                                                                    n90)
                                                                    n89)
                                                                    n88)
                                                                    n87)
                                                                    n86)
                                                                    n85)
                                                                    n84)
                                                                    n83)
                                                                    n82)
                                                                    n81)
                                                                    n80)
                                                                    n79)
                                                                    n78)
                                                                    n77)
                                                                    n76)
                                                                    n75)
                                                                    n74)
                                                                    n73)
                                                                    n72)
                                                                    n71)
                                                                    n70)
                                                                    n69)
                                                                    n68)
                                                                    n67)
                                                                    n66)
                                                                    n65)
                                                                    n64)
                                                                    n63)
                                                                    n62)
                                                                    n61)
                                                                    n60)
                                                                    n59)
                                                                    n58)
                                                                    n57)
                                                                    n56)
                                                                    n55)
                                                                    n54)
                                                                    n53)
                                                                    n52)
                                                                    n51)
                                                                    n50)
                                                                    n49)
                                                                    n48)
                                                                    n47)
                                                                    n46)
                                                                    n45)
                                                                    n44)
                                                                    n43)
                                                                    n42)
                                                                    n41)
                                                                    n40)
                                                                    n39)
                                                                    n38)
                                                                    n37)
                                                                    n36)
                                                                    n35)
                                                                    n34)
                                                                    n33)
                                                                    n32)
                                                                    n31)
                                                                   n30)
                                                                 n29)
                                                               n28)
                                                             n27)
                                                           n26)
                                                         n25)
                                                       n24)
                                                     n23)
                                                   n22)
                                                 n21)
                                               n20)
                                             n19)
                                           n18)
                                         n17)
                                       n16)
                                     n15)
                                   n14)
                                 n13)
                               n12)
                             n11)
                           n10)
                         n9)
                       n8)
                     n7)
                   n6)
                 n5)
               n4)
             n3)
           n2)
         n1)
       n0)
     opcode_alu)

(** val get_dst0 : int -> (jit_state, reg) m **)

let get_dst0 =
  int64_to_dst_reg

(** val reg64_to_reg32 : val0 -> (jit_state, val0) m **)

let reg64_to_reg32 d =
  returnM (val_intuoflongu d)

(** val get_src0 : int -> (jit_state, reg) m **)

let get_src0 =
  int64_to_src_reg

(** val get_offset1 : int -> (jit_state, int) m **)

let get_offset1 ins =
  returnM (get_offset0 ins)

(** val get_immediate0 : int -> (jit_state, int) m **)

let get_immediate0 ins =
  returnM (get_immediate ins)

(** val eval_immediate : int -> (jit_state, val0) m **)

let eval_immediate ins =
  returnM (Val.longofint (sint32_to_vint ins))

(** val get_src64 : int -> int -> (jit_state, val0) m **)

let get_src64 x ins =
  if Int.eq Int.zero
       (Int.coq_and (Int.repr (Z.of_nat x))
         (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))))
  then bindM (get_immediate0 ins) (fun imm0 ->
         bindM (eval_immediate imm0) returnM)
  else bindM (get_src0 ins) (fun src -> bindM (eval_reg0 src) returnM)

(** val get_src32 : int -> int -> (jit_state, val0) m **)

let get_src32 x ins =
  if Int.eq Int.zero
       (Int.coq_and (Int.repr (Z.of_nat x))
         (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))))
  then bindM (get_immediate0 ins) (fun imm0 -> returnM (sint32_to_vint imm0))
  else bindM (get_src0 ins) (fun src ->
         bindM (eval_reg0 src) (fun src64 ->
           bindM (reg64_to_reg32 src64) returnM))

(** val get_opcode_ins : int -> (jit_state, int) m **)

let get_opcode_ins ins =
  returnM (get_opcode ins)

(** val get_opcode_alu64 : int -> (jit_state, opcode_alu64) m **)

let get_opcode_alu64 op =
  returnM (byte_to_opcode_alu64 op)

(** val get_opcode_alu32 : int -> (jit_state, opcode_alu32_jit) m **)

let get_opcode_alu32 op =
  returnM (byte_to_opcode_alu32_jit op)

(** val get_opcode_branch : int -> (jit_state, opcode_branch) m **)

let get_opcode_branch op =
  returnM (byte_to_opcode_branch op)

(** val get_opcode_mem_ld_imm : int -> (jit_state, opcode_mem_ld_imm) m **)

let get_opcode_mem_ld_imm op =
  returnM (byte_to_opcode_mem_ld_imm op)

(** val get_opcode_mem_ld_reg : int -> (jit_state, opcode_mem_ld_reg) m **)

let get_opcode_mem_ld_reg op =
  returnM (byte_to_opcode_mem_ld_reg op)

(** val get_opcode_mem_st_imm : int -> (jit_state, opcode_mem_st_imm) m **)

let get_opcode_mem_st_imm op =
  returnM (byte_to_opcode_mem_st_imm op)

(** val get_opcode_mem_st_reg : int -> (jit_state, opcode_mem_st_reg) m **)

let get_opcode_mem_st_reg op =
  returnM (byte_to_opcode_mem_st_reg op)

(** val get_opcode0 : int -> (jit_state, opcode) m **)

let get_opcode0 op =
  returnM (byte_to_opcode op)

(** val get_add : val0 -> val0 -> (jit_state, val0) m **)

let get_add x y =
  returnM (Val.add x y)

(** val get_sub : val0 -> val0 -> (jit_state, val0) m **)

let get_sub x y =
  returnM (Val.sub x y)

(** val get_addr_ofs : val0 -> int -> (jit_state, val0) m **)

let get_addr_ofs x ofs =
  returnM (val_intuoflongu (Val.addl x (Val.longofint (sint32_to_vint ofs))))

(** val get_start_addr : memory_region -> (jit_state, val0) m **)

let get_start_addr mr =
  returnM mr.start_addr

(** val get_block_size : memory_region -> (jit_state, val0) m **)

let get_block_size mr =
  returnM mr.block_size

(** val get_block_perm : memory_region -> (jit_state, permission) m **)

let get_block_perm mr =
  returnM mr.block_perm

(** val is_well_chunk_bool : memory_chunk -> (jit_state, bool) m **)

let is_well_chunk_bool = function
| Mint8unsigned -> returnM true
| Mint16unsigned -> returnM true
| Mint32 -> returnM true
| Mint64 -> returnM true
| _ -> returnM false

(** val check_mem_aux2 :
    memory_region -> permission -> val0 -> memory_chunk -> (jit_state, val0) m **)

let check_mem_aux2 mr perm addr chunk =
  bindM (get_start_addr mr) (fun start ->
    bindM (get_block_size mr) (fun size0 ->
      bindM (get_block_perm mr) (fun mr_perm ->
        bindM (get_sub addr start) (fun lo_ofs ->
          bindM (get_add lo_ofs (memory_chunk_to_valu32 chunk))
            (fun hi_ofs ->
            if (&&)
                 ((&&) (compu_lt_32 hi_ofs size0)
                   ((&&)
                     (compu_le_32 lo_ofs
                       (memory_chunk_to_valu32_upbound chunk))
                     (comp_eq_32 vzero
                       (val32_modu lo_ofs (memory_chunk_to_valu32 chunk)))))
                 (perm_ge mr_perm perm)
            then returnM (Val.add mr.block_ptr lo_ofs)
            else returnM vnullptr)))))

(** val check_mem_aux :
    int -> permission -> memory_chunk -> val0 -> myMemRegionsType ->
    (jit_state, val0) m **)

let rec check_mem_aux num perm chunk addr mrs =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> returnM vnullptr)
    (fun n0 ->
    bindM (get_mem_region n0 mrs) (fun cur_mr ->
      bindM (check_mem_aux2 cur_mr perm addr chunk) (fun check_mem0 ->
        bindM (cmp_ptr32_nullM check_mem0) (fun is_null ->
          if is_null
          then check_mem_aux n0 perm chunk addr mrs
          else returnM check_mem0))))
    num

(** val check_mem :
    permission -> memory_chunk -> val0 -> (jit_state, val0) m **)

let check_mem perm chunk addr =
  bindM (is_well_chunk_bool chunk) (fun well_chunk ->
    if well_chunk
    then bindM eval_mrs_num (fun mem_reg_num ->
           bindM eval_mrs_regions (fun mrs ->
             bindM (check_mem_aux mem_reg_num perm chunk addr mrs)
               (fun check_mem0 ->
               bindM (cmp_ptr32_nullM check_mem0) (fun is_null ->
                 if is_null then returnM vnullptr else returnM check_mem0))))
    else returnM vnullptr)

(** val step_opcode_alu64 :
    val0 -> val0 -> reg -> int -> (jit_state, unit) m **)

let step_opcode_alu64 dst64 src64 dst op =
  bindM (get_opcode_alu64 op) (fun opcode_alu65 ->
    match opcode_alu65 with
    | Op_BPF_ADD64 ->
      bindM (upd_reg0 dst (Val.addl dst64 src64)) (fun _ -> returnM ())
    | Op_BPF_SUB64 ->
      bindM (upd_reg0 dst (Val.subl dst64 src64)) (fun _ -> returnM ())
    | Op_BPF_MUL64 ->
      bindM (upd_reg0 dst (Val.mull dst64 src64)) (fun _ -> returnM ())
    | Op_BPF_DIV64 ->
      if compl_ne src64 (Vlong Int64.zero)
      then bindM (upd_reg0 dst (val64_divlu dst64 src64)) (fun _ ->
             returnM ())
      else bindM (upd_flag0 BPF_ILLEGAL_DIV) (fun _ -> returnM ())
    | Op_BPF_OR64 ->
      bindM (upd_reg0 dst (Val.orl dst64 src64)) (fun _ -> returnM ())
    | Op_BPF_AND64 ->
      bindM (upd_reg0 dst (Val.andl dst64 src64)) (fun _ -> returnM ())
    | Op_BPF_LSH64 ->
      bindM (reg64_to_reg32 src64) (fun src32 ->
        if compu_lt_32 src32 (Vint
             (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
               ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))))
        then bindM (upd_reg0 dst (Val.shll dst64 src32)) (fun _ -> returnM ())
        else bindM (upd_flag0 BPF_ILLEGAL_SHIFT) (fun _ -> returnM ()))
    | Op_BPF_RSH64 ->
      bindM (reg64_to_reg32 src64) (fun src32 ->
        if compu_lt_32 src32 (Vint
             (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
               ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))))
        then bindM (upd_reg0 dst (Val.shrlu dst64 src32)) (fun _ ->
               returnM ())
        else bindM (upd_flag0 BPF_ILLEGAL_SHIFT) (fun _ -> returnM ()))
    | Op_BPF_NEG64 ->
      if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
      then bindM (upd_reg0 dst (Val.negl dst64)) (fun _ -> returnM ())
      else bindM (upd_flag0 BPF_ILLEGAL_INSTRUCTION) (fun _ -> returnM ())
    | Op_BPF_MOD64 ->
      if compl_ne src64 (Vlong Int64.zero)
      then bindM (upd_reg0 dst (val64_modlu dst64 src64)) (fun _ ->
             returnM ())
      else bindM (upd_flag0 BPF_ILLEGAL_DIV) (fun _ -> returnM ())
    | Op_BPF_XOR64 ->
      bindM (upd_reg0 dst (Val.xorl dst64 src64)) (fun _ -> returnM ())
    | Op_BPF_MOV64 -> bindM (upd_reg0 dst src64) (fun _ -> returnM ())
    | Op_BPF_ARSH64 ->
      bindM (reg64_to_reg32 src64) (fun src32 ->
        if compu_lt_32 src32 (Vint
             (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
               ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1))))))))
        then bindM (upd_reg0 dst (Val.shrl dst64 src32)) (fun _ -> returnM ())
        else bindM (upd_flag0 BPF_ILLEGAL_SHIFT) (fun _ -> returnM ()))
    | Op_BPF_ALU64_ILLEGAL_INS ->
      bindM (upd_flag0 BPF_ILLEGAL_INSTRUCTION) (fun _ -> returnM ()))

(** val step_opcode_alu32 :
    val0 -> val0 -> reg -> int -> int -> int -> (jit_state, unit) m **)

let step_opcode_alu32 dst32 src32 dst op ins pc =
  bindM (get_opcode_alu32 op) (fun opcode_alu32_jit0 ->
    match opcode_alu32_jit0 with
    | Op_BPF_ADD32 ->
      bindM (upd_reg0 dst (Val.longofintu (Val.add dst32 src32))) (fun _ ->
        returnM ())
    | Op_BPF_SUB32 ->
      bindM (upd_reg0 dst (Val.longofintu (Val.sub dst32 src32))) (fun _ ->
        returnM ())
    | Op_BPF_MUL32 ->
      bindM (upd_reg0 dst (Val.longofintu (Val.mul dst32 src32))) (fun _ ->
        returnM ())
    | Op_BPF_DIV32 ->
      if comp_ne_32 src32 vzero
      then bindM (upd_reg0 dst (Val.longofintu (val32_divu dst32 src32)))
             (fun _ -> returnM ())
      else upd_flag0 BPF_ILLEGAL_DIV
    | Op_BPF_OR32 ->
      bindM (upd_reg0 dst (Val.longofintu (Val.coq_or dst32 src32)))
        (fun _ -> returnM ())
    | Op_BPF_AND32 ->
      bindM (upd_reg0 dst (Val.longofintu (Val.coq_and dst32 src32)))
        (fun _ -> returnM ())
    | Op_BPF_LSH32 ->
      if compu_lt_32 src32 (Vint
           (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
             ((fun p->2*p) 1)))))))
      then bindM (upd_reg0 dst (Val.longofintu (Val.shl dst32 src32)))
             (fun _ -> returnM ())
      else upd_flag0 BPF_ILLEGAL_SHIFT
    | Op_BPF_RSH32 ->
      if compu_lt_32 src32 (Vint
           (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
             ((fun p->2*p) 1)))))))
      then bindM (upd_reg0 dst (Val.longofintu (Val.shru dst32 src32)))
             (fun _ -> returnM ())
      else upd_flag0 BPF_ILLEGAL_SHIFT
    | Op_BPF_NEG32 ->
      if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
      then bindM (upd_reg0 dst (Val.longofintu (Val.neg dst32))) (fun _ ->
             returnM ())
      else upd_flag0 BPF_ILLEGAL_INSTRUCTION
    | Op_BPF_MOD32 ->
      if comp_ne_32 src32 vzero
      then bindM (upd_reg0 dst (Val.longofintu (val32_modu dst32 src32)))
             (fun _ -> returnM ())
      else upd_flag0 BPF_ILLEGAL_DIV
    | Op_BPF_XOR32 ->
      bindM (upd_reg0 dst (Val.longofintu (Val.xor dst32 src32))) (fun _ ->
        returnM ())
    | Op_BPF_MOV32 ->
      bindM (upd_reg0 dst (Val.longofintu src32)) (fun _ -> returnM ())
    | Op_BPF_ARSH32 ->
      if compu_lt_32 src32 (Vint
           (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
             ((fun p->2*p) 1)))))))
      then bindM (upd_reg0 dst (Val.longofint (Val.shr dst32 src32)))
             (fun _ -> returnM ())
      else upd_flag0 BPF_ILLEGAL_SHIFT
    | Op_BPF_JIT -> let _ = print_endline ("Op_BPF_JIT pc= "^ (string_of_int pc)) in
      bindM (get_immediate0 ins) (fun start_addr0 ->
        bindM (get_offset1 ins) (fun ofs ->
          bindM (magic_function0 start_addr0) (fun _ ->
            bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ()))))
    | Op_BPF_ALU32_ILLEGAL_INS -> upd_flag0 BPF_ILLEGAL_INSTRUCTION)

(** val step_opcode_branch :
    val0 -> val0 -> int -> int -> int -> (jit_state, unit) m **)

let step_opcode_branch dst64 src64 pc ofs op =
  bindM (get_opcode_branch op) (fun opcode_jmp ->
    match opcode_jmp with
    | Op_BPF_JA ->
      if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ 0)))))
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else bindM (upd_flag0 BPF_ILLEGAL_INSTRUCTION) (fun _ -> returnM ())
    | Op_BPF_JEQ ->
      if compl_eq dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JGT ->
      if complu_gt dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JGE ->
      if complu_ge dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JLT ->
      if complu_lt dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JLE ->
      if complu_le dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JSET ->
      if complu_set dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JNE ->
      if compl_ne dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JSGT ->
      if compl_gt dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JSGE ->
      if compl_ge dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JSLT ->
      if compl_lt dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_JSLE ->
      if compl_le dst64 src64
      then bindM (upd_pc0 (Int.add pc ofs)) (fun _ -> returnM ())
      else returnM ()
    | Op_BPF_CALL ->
      if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ
           0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
      then bindM (_bpf_get_call (val_intsoflongu src64)) (fun f_ptr ->
             bindM (cmp_ptr32_nullM f_ptr) (fun is_null ->
               if is_null
               then upd_flag0 BPF_ILLEGAL_CALL
               else bindM (exec_function f_ptr) (fun res ->
                      upd_reg0 R13 (Val.longofintu res))))
      else bindM (upd_flag0 BPF_ILLEGAL_INSTRUCTION) (fun _ -> returnM ())
    | Op_BPF_RET ->
      if (=) op (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ (Stdlib.succ
           (Stdlib.succ (Stdlib.succ
           0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
      then bindM (upd_flag0 BPF_SUCC_RETURN) (fun _ -> returnM ())
      else bindM (upd_flag0 BPF_ILLEGAL_INSTRUCTION) (fun _ -> returnM ())
    | Op_BPF_JMP_ILLEGAL_INS ->
      bindM (upd_flag0 BPF_ILLEGAL_INSTRUCTION) (fun _ -> returnM ()))

(** val step_opcode_mem_ld_imm :
    int -> val0 -> reg -> int -> (jit_state, unit) m **)

let step_opcode_mem_ld_imm imm0 dst64 dst op =
  bindM (get_opcode_mem_ld_imm op) (fun opcode_ld ->
    match opcode_ld with
    | Op_BPF_LDDW_low ->
      bindM (upd_reg0 dst (Val.longofintu (sint32_to_vint imm0))) (fun _ ->
        returnM ())
    | Op_BPF_LDDW_high ->
      bindM
        (upd_reg0 dst
          (Val.orl dst64
            (Val.shll (Val.longofintu (sint32_to_vint imm0))
              (sint32_to_vint
                (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                  ((fun p->2*p) ((fun p->2*p) 1)))))))))) (fun _ ->
        returnM ())
    | Op_BPF_LDX_IMM_ILLEGAL_INS -> upd_flag0 BPF_ILLEGAL_INSTRUCTION)

(** val step_opcode_mem_ld_reg : val0 -> reg -> int -> (jit_state, unit) m **)

let step_opcode_mem_ld_reg addr dst op =
  bindM (get_opcode_mem_ld_reg op) (fun opcode_ld ->
    match opcode_ld with
    | Op_BPF_LDXW ->
      bindM (check_mem Readable Mint32 addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (load_mem0 Mint32 addr_ptr) (fun v ->
                 bindM (upd_reg0 dst v) (fun _ -> returnM ()))))
    | Op_BPF_LDXH ->
      bindM (check_mem Readable Mint16unsigned addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (load_mem0 Mint16unsigned addr_ptr) (fun v ->
                 bindM (upd_reg0 dst v) (fun _ -> returnM ()))))
    | Op_BPF_LDXB ->
      bindM (check_mem Readable Mint8unsigned addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (load_mem0 Mint8unsigned addr_ptr) (fun v ->
                 bindM (upd_reg0 dst v) (fun _ -> returnM ()))))
    | Op_BPF_LDXDW ->
      bindM (check_mem Readable Mint64 addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (load_mem0 Mint64 addr_ptr) (fun v ->
                 bindM (upd_reg0 dst v) (fun _ -> returnM ()))))
    | Op_BPF_LDX_REG_ILLEGAL_INS -> upd_flag0 BPF_ILLEGAL_INSTRUCTION)

(** val step_opcode_mem_st_imm :
    val0 -> val0 -> int -> (jit_state, unit) m **)

let step_opcode_mem_st_imm imm0 addr op =
  bindM (get_opcode_mem_st_imm op) (fun opcode_st ->
    match opcode_st with
    | Op_BPF_STW ->
      bindM (check_mem Writable Mint32 addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (store_mem_imm0 addr_ptr Mint32 imm0) (fun _ ->
                 returnM ())))
    | Op_BPF_STH ->
      bindM (check_mem Writable Mint16unsigned addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (store_mem_imm0 addr_ptr Mint16unsigned imm0) (fun _ ->
                 returnM ())))
    | Op_BPF_STB ->
      bindM (check_mem Writable Mint8unsigned addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (store_mem_imm0 addr_ptr Mint8unsigned imm0) (fun _ ->
                 returnM ())))
    | Op_BPF_STDW ->
      bindM (check_mem Writable Mint64 addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (store_mem_imm0 addr_ptr Mint64 imm0) (fun _ ->
                 returnM ())))
    | Op_BPF_ST_ILLEGAL_INS -> upd_flag0 BPF_ILLEGAL_INSTRUCTION)

(** val step_opcode_mem_st_reg :
    val0 -> val0 -> int -> (jit_state, unit) m **)

let step_opcode_mem_st_reg src64 addr op =
  bindM (get_opcode_mem_st_reg op) (fun opcode_st ->
    match opcode_st with
    | Op_BPF_STXW ->
      bindM (check_mem Writable Mint32 addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (store_mem_reg0 addr_ptr Mint32 src64) (fun _ ->
                 returnM ())))
    | Op_BPF_STXH ->
      bindM (check_mem Writable Mint16unsigned addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (store_mem_reg0 addr_ptr Mint16unsigned src64) (fun _ ->
                 returnM ())))
    | Op_BPF_STXB ->
      bindM (check_mem Writable Mint8unsigned addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (store_mem_reg0 addr_ptr Mint8unsigned src64) (fun _ ->
                 returnM ())))
    | Op_BPF_STXDW ->
      bindM (check_mem Writable Mint64 addr) (fun addr_ptr ->
        bindM (cmp_ptr32_nullM addr_ptr) (fun is_null ->
          if is_null
          then upd_flag0 BPF_ILLEGAL_MEM
          else bindM (store_mem_reg0 addr_ptr Mint64 src64) (fun _ ->
                 returnM ())))
    | Op_BPF_STX_ILLEGAL_INS -> upd_flag0 BPF_ILLEGAL_INSTRUCTION)

(** val step : (jit_state, unit) m **)

let step =
  bindM eval_pc0 (fun pc ->
    bindM (eval_ins0 pc) (fun ins ->
      bindM (get_opcode_ins ins) (fun op ->
        bindM (get_opcode0 op) (fun opc ->
          bindM (get_dst0 ins) (fun dst ->
            match opc with
            | Op_BPF_ALU64 ->
              bindM (eval_reg0 dst) (fun dst64 ->
                bindM (get_src64 op ins) (fun src64 ->
                  step_opcode_alu64 dst64 src64 dst op))
            | Op_BPF_ALU32 ->
              bindM (eval_reg0 dst) (fun dst64 ->
                bindM (reg64_to_reg32 dst64) (fun dst32 ->
                  bindM (get_src32 op ins) (fun src32 ->
                    step_opcode_alu32 dst32 src32 dst op ins pc)))
            | Op_BPF_Branch ->
              bindM (eval_reg0 dst) (fun dst64 ->
                bindM (get_offset1 ins) (fun ofs ->
                  bindM (get_src64 op ins) (fun src64 ->
                    step_opcode_branch dst64 src64 pc ofs op)))
            | Op_BPF_Mem_ld_imm ->
              bindM (eval_reg0 dst) (fun dst64 ->
                bindM (get_immediate0 ins) (fun imm0 ->
                  step_opcode_mem_ld_imm imm0 dst64 dst op))
            | Op_BPF_Mem_ld_reg ->
              bindM (get_src0 ins) (fun src ->
                bindM (eval_reg0 src) (fun src64 ->
                  bindM (get_offset1 ins) (fun ofs ->
                    bindM (get_addr_ofs src64 ofs) (fun addr ->
                      step_opcode_mem_ld_reg addr dst op))))
            | Op_BPF_Mem_st_imm ->
              bindM (eval_reg0 dst) (fun dst64 ->
                bindM (get_offset1 ins) (fun ofs ->
                  bindM (get_immediate0 ins) (fun imm0 ->
                    bindM (get_addr_ofs dst64 ofs) (fun addr ->
                      step_opcode_mem_st_imm (sint32_to_vint imm0) addr op))))
            | Op_BPF_Mem_st_reg ->
              bindM (eval_reg0 dst) (fun dst64 ->
                bindM (get_src0 ins) (fun src ->
                  bindM (eval_reg0 src) (fun src64 ->
                    bindM (get_offset1 ins) (fun ofs ->
                      bindM (get_addr_ofs dst64 ofs) (fun addr ->
                        step_opcode_mem_st_reg src64 addr op)))))
            | Op_BPF_ILLEGAL_INS -> upd_flag0 BPF_ILLEGAL_INSTRUCTION)))))

(** val bpf_interpreter_aux : int -> (jit_state, unit) m **)

let rec bpf_interpreter_aux fuel = let _ = print_endline ("fuel= " ^ string_of_int fuel) in
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> upd_flag0 BPF_ILLEGAL_LEN)
    (fun fuel0 ->
    bindM eval_ins_len0 (fun len ->
      bindM eval_pc0 (fun pc ->
        if Int.ltu pc len
        then bindM step (fun _ ->
               bindM eval_flag0 (fun f ->
                 if comp_eq_32 f (Vint (int_of_flag BPF_OK))
                 then bindM eval_ins_len0 (fun len0 ->
                        bindM eval_pc0 (fun pc0 ->
                          if Int.ltu (Int.add pc0 Int.one) len0
                          then bindM upd_pc_incr0 (fun _ ->
                                 bpf_interpreter_aux fuel0)
                          else upd_flag0 BPF_ILLEGAL_LEN))
                 else returnM ()))
        else upd_flag0 BPF_ILLEGAL_LEN)))
    fuel

(** val bpf_interpreter : int -> (jit_state, val0) m **)

let bpf_interpreter fuel =
  bindM (bpf_interpreter_aux fuel) (fun _ ->
    bindM eval_flag0 (fun f ->
      if comp_eq_32 f (Vint (int_of_flag BPF_SUCC_RETURN))
      then bindM (eval_reg0 R13) returnM
      else returnM (Vlong Int64.zero)))

(** val wrap_around_data_ascii : string **)

let wrap_around_data_ascii =
  (^)
    "AD3Awn4kb6FtcsyE0RU25U7f55Yncn3LP3oEx9Gl4qr7iDW7I8L6Pbw9jNnh0sE4DmCKuc"
    ((^)
      "d1J8I34vn31W924y5GMS74vUrZQc08805aj4Tf66HgL1cO94os10V2s2GDQ825yNh9Yuq3"
      ((^)
        "QHcA60xl31rdA7WskVtCXI7ruH1A4qaR6Uk454hm401lLmv2cGWt5KTJmr93d3JsGaRRPs"
        ((^)
          "4HqYi4mFGowo8fWv48IcA3N89Z99nf0A0H2R6P0uI4Tir682Of3Rk78DUB2dIGQRRpdqVT"
          ((^)
            "tLhgfET2gUGU65V3edSwADMqRttI9JPVz8JS37g5QZj4Ax56rU1u0m0K8YUs57UYG5645n"
            "byNy4yqxu7"))))

(** val wrap_around_data_byte : memval list **)

let wrap_around_data_byte =
  let ascii_list =
    (fun s ->
      Array.to_list (Array.init (String.length s) (fun i -> s.[i])))
      wrap_around_data_ascii
  in
  map (fun a -> Byte (Byte.repr (Z.of_N (n_of_ascii a)))) ascii_list

(** val test_fletcher32_int64 : int list **)

let test_fletcher32_int64 =
  (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) 1)))))))))))))))) :: ((Int64.repr
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->1+2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->1+2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->1+2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->1+2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          ((fun p->2*p)
                                                          1))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) 1)))))))))))) :: ((Int64.repr
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->1+2*p)
                                                                    ((fun p->2*p)
                                                                    ((fun p->2*p)
                                                                    1))))))))))))))))))) :: (
    (Int64.repr ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))))))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      1)))))))))))))))))))))))))))))))))))))))))))))))) :: ((Int64.repr
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              1))))))))))))))) :: (
    (Int64.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) 1))))))))))))))))))))) :: ((Int64.repr ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   1))))))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      1))))))))))))))))))))))))))))))))))))))))) :: ((Int64.repr
                                                       ((fun p->1+2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->1+2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       ((fun p->2*p)
                                                       1))))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      1)))))))))))))) :: ((Int64.repr ((fun p->2*p) ((fun p->2*p)
                            ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) 1)))))))))) :: ((Int64.repr
                                                            ((fun p->2*p)
                                                            ((fun p->2*p)
                                                            ((fun p->1+2*p)
                                                            ((fun p->1+2*p)
                                                            ((fun p->1+2*p)
                                                            ((fun p->1+2*p)
                                                            ((fun p->2*p)
                                                            ((fun p->1+2*p)
                                                            ((fun p->2*p)
                                                            ((fun p->2*p)
                                                            ((fun p->1+2*p)
                                                            ((fun p->2*p)
                                                            1))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) 1))))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           1)))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) 1))))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) 1))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) 1))))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) 1)))))))))))))))))))))))))))))))) :: ((Int64.repr
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              1))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p)
      1)))))))))))))))))))))))))))))))))))))))))))))))) :: ((Int64.repr
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              1))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) 1))))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->1+2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->1+2*p) 1))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))))))))))) :: ((Int64.repr
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->1+2*p)
                                                         ((fun p->1+2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->1+2*p)
                                                         ((fun p->2*p)
                                                         1))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1)))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->1+2*p)
                                            ((fun p->2*p) ((fun p->1+2*p)
                                            ((fun p->2*p) ((fun p->1+2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->1+2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->2*p)
                                            ((fun p->2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            ((fun p->1+2*p) ((fun p->1+2*p)
                                            1)))))))))))))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      1))))))))))))))))))))))))))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   1)))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->1+2*p) 1))))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                             ((fun p->2*p) ((fun p->1+2*p)
                                             ((fun p->1+2*p) ((fun p->1+2*p)
                                             ((fun p->1+2*p) ((fun p->2*p)
                                             ((fun p->1+2*p) ((fun p->1+2*p)
                                             ((fun p->1+2*p) ((fun p->2*p)
                                             ((fun p->2*p) ((fun p->2*p)
                                             ((fun p->2*p) 1))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      1)))))))))) :: ((Int64.repr ((fun p->1+2*p) ((fun p->2*p)
                        ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
                        ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                        ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                        ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                        ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
                        ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
                        ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                        ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                        ((fun p->1+2*p) ((fun p->1+2*p)
                        1)))))))))))))))))))))))))))))))) :: ((Int64.repr
                                                                ((fun p->2*p)
                                                                ((fun p->2*p)
                                                                ((fun p->1+2*p)
                                                                ((fun p->1+2*p)
                                                                ((fun p->1+2*p)
                                                                ((fun p->1+2*p)
                                                                ((fun p->2*p)
                                                                ((fun p->1+2*p)
                                                                ((fun p->1+2*p)
                                                                ((fun p->2*p)
                                                                ((fun p->2*p)
                                                                ((fun p->2*p)
                                                                ((fun p->1+2*p)
                                                                ((fun p->2*p)
                                                                1))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p)
      1)))))))))))))))))))))))))))))))))))))))))))))))) :: ((Int64.repr
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->1+2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              ((fun p->2*p)
                                                              1))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))))))))))) :: ((Int64.repr
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->1+2*p)
                                                         ((fun p->1+2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->1+2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->2*p)
                                                         ((fun p->1+2*p)
                                                         ((fun p->2*p)
                                                         1))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      1)))))))))))))) :: ((Int64.repr ((fun p->2*p) ((fun p->2*p)
                            ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
                            ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                            ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                            ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                            ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                            ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
                            1)))))))))))))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      1))))))))))))))))))))))))))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->1+2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   ((fun p->2*p)
                                                   1)))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      1)))))))))))))) :: ((Int64.repr ((fun p->2*p) ((fun p->2*p)
                            ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
                            ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
                            ((fun p->2*p)
                            1))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) 1))))))))))))))) :: ((Int64.repr ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->1+2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->1+2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) ((fun p->2*p)
                                           ((fun p->2*p) 1))))))))))))) :: (
    (Int64.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))))))))))))))))))) :: (
    (Int64.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->2*p) 1))))))))))))))))))) :: ((Int64.repr
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->1+2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->1+2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->1+2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             ((fun p->2*p)
                                                             1))))))))))))))))))))))))))))))))))))) :: (
    (Int64.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) 1)))))))) :: []))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val init_mem : Mem.mem' * block **)

let init_mem =
  Mem.alloc Mem.empty 0 ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->1+2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p)
    ((fun p->2*p) 1))))))))

(** val input_blk : block **)

let input_blk =
  snd init_mem

(** val mem1 : Mem.mem **)

let mem1 =
  match Mem.storebytes (fst init_mem) input_blk 0 wrap_around_data_byte with
  | Some m0 -> m0
  | None -> Mem.empty

(** val jit_state_memval_list : memval list **)

let jit_state_memval_list =
  (Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    (Byte.repr ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p) ((fun p->2*p)
      ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) 1))))))))) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    (Byte.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) 1))))))))) :: ((Byte
    (Byte.repr ((fun p->1+2*p) ((fun p->2*p) 1)))) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: ((Byte Byte.zero) :: ((Byte
    Byte.zero) :: [])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(** val init_mem2 : Mem.mem' * block **)

let init_mem2 =
  Mem.alloc mem1 0 ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->1+2*p) 1))))))

(** val jit_state_blk : block **)

let jit_state_blk =
  snd init_mem2

(** val mem2 : Mem.mem **)

let mem2 =
  match Mem.storebytes (fst init_mem2) jit_state_blk 0 jit_state_memval_list with
  | Some m0 -> m0
  | None -> Mem.empty

(** val calc_jitted_code_aux : int -> int -> int list -> int list **)

let rec calc_jitted_code_aux fuel pc l =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ -> [])
    (fun n0 ->
    let ins = List32.index l (Int.repr (Z.of_nat pc)) in
    ins :: (calc_jitted_code_aux n0 (Stdlib.succ pc) l))
    fuel

(** val calc_jitted_code : int -> int list -> int list **)

let calc_jitted_code len l =
  calc_jitted_code_aux len 0 l

(** val int2listmemval : int -> memval list **)

let int2listmemval i =
  encode_val Mint16unsigned (Vint i)

(** val fletcher32_init_jitted_list : List32.t **)

let fletcher32_init_jitted_list =
  List32.create_int_list jITTED_LIST_MAX_LENGTH

(** val fletcher32_init_jit_state_tmp : jit_state **)

let fletcher32_init_jit_state_tmp =
  { pc_loc = Int.zero; flag = Vundef; regs_st = Vundef; mrs_num = 0;
    bpf_mrs = []; ins_len = (length test_fletcher32_int64); entry_len = 0;
    ep_list =
    (ListNat.create_int_list (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ 0))))))))))))))))))))); is_IR11 =
    false; load_store_regs = init_LoadStoreRegs; offset = 0; thumb_len = 0;
    thumb =
    (List16.create_int_list (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ
      0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
    ibpf = test_fletcher32_int64; stack_ofs = 0; jitted_len = 0;
    jitted_list = fletcher32_init_jitted_list; jit_mem = Mem.empty }

(** val final_jitted_state : jit_state **)

let final_jitted_state =
  let final_state = jit_alu32 fletcher32_init_jit_state_tmp in
  (match fst final_state with
   | Some st -> st
   | None -> empty_jit_state)

(** val jitted_arm_memval_list : memval list **)

let jitted_arm_memval_list =
  let l =
    map int2listmemval
      (calc_jitted_code final_jitted_state.jitted_len
        final_jitted_state.jitted_list)
  in
  flat_map (fun x -> x) l

(** val init_mem3 : Mem.mem' * block **)

let init_mem3 =
  Mem.alloc mem2 0 (Z.of_nat (length jitted_arm_memval_list))

(** val jitted_arm_blk : block **)

let jitted_arm_blk =
  snd init_mem3

(** val mem3 : Mem.mem **)

let mem3 =
  match Mem.storebytes (fst init_mem3) jitted_arm_blk 0 jitted_arm_memval_list with
  | Some m0 -> m0
  | None -> Mem.empty

(** val init_mem4 : Mem.mem' * block **)

let init_mem4 =
  Mem.alloc mem3 0 ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
    1)))))))))

(** val stk_blk : block **)

let stk_blk =
  snd init_mem4

(** val mem4 : Mem.mem' **)

let mem4 =
  fst init_mem4

(** val fletcher32_init_memory_regions : memory_region list **)

let fletcher32_init_memory_regions =
  { start_addr = (Vint (Int.repr 0)); block_size = (Vint
    (Int.repr ((fun p->1+2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->2*p) 1))))))))));
    block_perm = Readable; block_ptr = (Vptr (input_blk,
    Ptrofs.zero)) } :: ({ start_addr = (Vint
    (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->1+2*p)
      ((fun p->2*p) ((fun p->1+2*p) ((fun p->1+2*p) ((fun p->1+2*p)
      ((fun p->1+2*p) 1))))))))))); block_size = (Vint
    (Int.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) ((fun p->2*p)
      1))))))))))); block_perm = Writable; block_ptr = (Vptr (stk_blk,
    Ptrofs.zero)) } :: [])

(** val fletcher32_init_jit_state : jit_state **)

let fletcher32_init_jit_state =
  { pc_loc = Int.zero; flag = (Vptr (jit_state_blk,
    (Ptrofs.repr ((fun p->2*p) ((fun p->2*p) 1))))); regs_st = (Vptr
    (jit_state_blk,
    (Ptrofs.repr ((fun p->2*p) ((fun p->2*p) ((fun p->2*p) 1)))))); mrs_num =
    (Stdlib.succ (Stdlib.succ 0)); bpf_mrs =
    fletcher32_init_memory_regions; ins_len = (length test_fletcher32_int64);
    entry_len = final_jitted_state.entry_len; ep_list =
    final_jitted_state.ep_list; is_IR11 = final_jitted_state.is_IR11;
    load_store_regs = final_jitted_state.load_store_regs; offset =
    final_jitted_state.offset; thumb_len = final_jitted_state.thumb_len;
    thumb = final_jitted_state.thumb; ibpf = final_jitted_state.ibpf;
    stack_ofs = final_jitted_state.stack_ofs; jitted_len =
    final_jitted_state.jitted_len; jitted_list =
    final_jitted_state.jitted_list; jit_mem = mem4 }

(** val fletcher32_ibpf_main : string list **)

let fletcher32_ibpf_main =
  let final_state =
    bpf_interpreter (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ (Stdlib.succ (Stdlib.succ (Stdlib.succ
      (Stdlib.succ

      fletcher32_init_jit_state
  in
  (match final_state with
   | Some p ->
     let (k, st) = p in
     let _ = print_endline ("res = " ^ (string_of_val0 k)) in
       print_iBPF_prog (ibpf_decode_prog st.ibpf st.ins_len)
   | None -> let _ = print_endline "interpreter ibpf None" in [])
