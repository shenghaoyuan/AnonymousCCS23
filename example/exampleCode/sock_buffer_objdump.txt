
sock_buffer.o:	file format ELF64-BPF


Disassembly of section .text:

0000000000000000 foo:
; {
       0:	b4 00 00 00 00 00 00 00	w0 = 0
;     for (index = 0U; index < len; index++) {
       1:	bc 45 00 00 00 00 00 00	w5 = w4
       2:	67 05 00 00 20 00 00 00	r5 <<= 32
       3:	77 05 00 00 20 00 00 00	r5 >>= 32
       4:	15 05 1c 00 00 00 00 00	if r5 == 0 goto +28 <LBB0_7>
       5:	bc 45 00 00 00 00 00 00	w5 = w4
       6:	67 05 00 00 20 00 00 00	r5 <<= 32
       7:	77 05 00 00 20 00 00 00	r5 >>= 32
       8:	67 02 00 00 20 00 00 00	r2 <<= 32
       9:	77 02 00 00 20 00 00 00	r2 >>= 32
      10:	67 01 00 00 20 00 00 00	r1 <<= 32
      11:	77 01 00 00 20 00 00 00	r1 >>= 32
      12:	b4 06 00 00 01 00 00 00	w6 = 1
      13:	bf 37 00 00 00 00 00 00	r7 = r3

0000000000000070 LBB0_2:
;         if ((data_start + index) >= data_end)
      14:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB0_4>
;         array[index] = 1;
      15:	73 67 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r6
;     for (index = 0U; index < len; index++) {
      16:	07 01 00 00 01 00 00 00	r1 += 1
      17:	07 07 00 00 01 00 00 00	r7 += 1
      18:	07 05 00 00 ff ff ff ff	r5 += -1
      19:	55 05 fa ff 00 00 00 00	if r5 != 0 goto -6 <LBB0_2>

00000000000000a0 LBB0_4:
;     for (index = 0U; index < len; index++) {
      20:	bc 41 00 00 00 00 00 00	w1 = w4
      21:	67 01 00 00 20 00 00 00	r1 <<= 32
      22:	77 01 00 00 20 00 00 00	r1 >>= 32
      23:	15 01 09 00 00 00 00 00	if r1 == 0 goto +9 <LBB0_7>
      24:	b4 00 00 00 00 00 00 00	w0 = 0
      25:	bc 41 00 00 00 00 00 00	w1 = w4
      26:	67 01 00 00 20 00 00 00	r1 <<= 32
      27:	77 01 00 00 20 00 00 00	r1 >>= 32

00000000000000e0 LBB0_6:
;         cumul += array[index];
      28:	71 32 00 00 00 00 00 00	r2 = *(u8 *)(r3 + 0)
      29:	0c 20 00 00 00 00 00 00	w0 += w2
;     for (index = 0U; index < len; index++) {
      30:	07 03 00 00 01 00 00 00	r3 += 1
      31:	07 01 00 00 ff ff ff ff	r1 += -1
      32:	55 01 fb ff 00 00 00 00	if r1 != 0 goto -5 <LBB0_6>

0000000000000108 LBB0_7:
;     return cumul;
      33:	95 00 00 00 00 00 00 00	exit
